%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: SamplingTimeCorrection.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: Neal Patwari
%%CreationDate: 3/25/19
%%BoundingBox: 0 0 456 166
%%HiResBoundingBox: 0 0 455.6641 165.5487
%%CropBox: 0 0 455.6641 165.5487
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.1 x540 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 48 8%%BeginData: 5608 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD13FFA8A87DFFFF7D7DA8527DFD06FF7DA8A8FF7D527D7D52FD06%FFA87DA8FFA87DA87D52A8FD0AFFA852FD08FFA8A8FFFFFF7D7DA8FF527D%FD04FF7DA8A8FFFFA8527DFF7D52FD04FFA8A8A8FFFFA87D7DFF7D7DFD1A%FFA87D527DA852FD047DFD05FFA87D27527D7D7DA8A8A8FD06FF7D7D52A8%7DA87DA87DFD09FF7D52A87DFD07FFA87D7D527D52A87DA8A87DA8FFFFFF%A8A85252FD057DA8A8A8FD04FF7D7D527D52A8527D7DFF7DFD1AFFA8A8A8%FFFFA87DA8A8FD07FF7DA8A8FF7DA87DFFA8FD05FFFD05A8FFA8A8A8FD0A%FFA87DA87DFD08FF7DFD04A8FFFF7DFFA8FD05FF7DA87DA8A87D7DA8A8FF%A8FD04FFA87DFD04A87D7DA8FFA8FD07FFA8FFA8FFA8FD0FFFA8FD05FFA8%FD07FFA8FD0FFFA8FD05FFA8FD0DFFA8FD09FFA8FD05FFA8A8FD08FFA8FD%05FFA8FD07FFA8FD06FFA8A8FD09FF7DA852A87DFD14FFA8FD1DFFA8FD1D%FFA8FD2AFF52FF52FF7DA8FD13FFA8FD0EFFA8FD0DFFA8A8FD0EFFA8FD0E%FFA8A8FD0DFFA8FD0FFFA8FD09FFA8FF7DFF7DFF7DA8FD04FFFD0FA87DFD%0DA87DFD0FA87DFFFD0DA87D7DFD0CA8FF7DFD1DA87DFD08A8FF7D27A852%FFA8A852FD05FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8%FFA8FFA8FFA8A87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8%FFA8FFA8FFA8FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8%FFA8FFA8FFA8FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8%FFA8A8A8FDFCFFFDBFFFA8FD1BFFA8FD27FF7DFD14FFA8FFFFFFA8FF7DA8%FD06FFA8A852FD0DFFA8FFFFFFA8FFA87DA8FD07FF52A8FD10FFA87DA8FD%05FFA8FF52A8FD0EFFA8FFFFFFA8A8A8FF7DA8FD06FFA85252FD12FF7D7D%7DFF7D527DA852FFFFA8A8FF277D7D52FD0CFF7D7D52FFA8527DA852FFFF%A8A8FFA87D7D527DFD0EFFA827A87DFFFFA8A8FFA8527D527DFD0DFF7D7D%52A8A87D52A8FF527DFFA8A8FFFF27A8A8FD12FFA8A85252A8527DA8A8A8%FFFF52A8FFA87DFD0EFFA87D527DFF7DA87D7DA8FF7D7DFFFF27A8FD10FF%A852A8A8A8FF7D7DFFFF7DA8FD0FFFA87D527D7DA8A87DFF7DA8FFA852FF%FF7D7DFD14FF7DA8A8FFA8A87DFFA87DA8FFFFFFA8FD0FFF7DA8A8FFFFFF%7DA8A87DA8FFA8FFFFA87DFD11FFA8FFFF7DA8FFA8FFFFFFA8FD0FFF7DA8%A8FFFFFFA8A8FFFF7D7DFD04FFA8FFFFFFA87D7D7DA8FD7BFF52A8527D7D%FD13FFA8A8FD1DFFA8FD1DFFA8FD1EFFA8FD09FFA8FF7DA852FF7DA8FD04%FFFD0FA87DFFFD1CA87DFD1DA87DFD1EA87DFD07A8FF5227A8527D52A852%FD05FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFFA8FFA8FFA8FFA8A87D%FFA8A8FFA8A8FD14FFA8FD3BFFA8FDFCFFFDFCFFFD3AFFA8FFFFFFA8FFA8%A8A8FD15FFA8FD05FFA8A8A8FD19FFA8A8A8FD17FFA8FD05FFA8FFA8A8FD%1BFF7D7D7DFFA8527D7D52FD05FFA8FD0FFFA87D7DFFA87DA8A827A8FD04%FFA87DA8FD10FFA852A852FFFFFFA8FFA87DA8FD0FFF7D7D7DFFFFA87DA8%A87D7DFD05FF7D7DFD13FFA8A85227A87D527D7D7DFFFF27A8FF5252FD0E%FF7D7D277DFF7DA87D7DA8FF7D52FFA827A8FD10FFA8277D7DA8FF7D52FF%FF27A8FD0FFFA852527D52A8A87DFF7DA8FFA827FFFF7D52FD14FF7DA8A8%FF7DA87DFFA87DA8A8A8FFA87DFD0EFF7DA8A8A8FFFFFD05A8FFA8FFFFA8%A8FD11FFA8FFA8A8A8FFA8FFFFA8A8FD0FFF7DFD04A8FFA8A8FFFFA87DFF%A8FFFFA8A8FD0DFFA8A87DA8A8FD0BFFA8FD05FFA8FD0FFFA8FD07FFA8FD%1BFFA8FD1DFFA8FFFFFFA8FD13FF7D7D52527DFD09FFA8FD5AFFA8FD16FF%52FF527D7DFD05FFFD04A87DFD1DA87DFD1DA87DFD1DA87D7DFD13A87D52%FF7D7D527DA8FD06FFA8FFA8A8FD1DFFA8A8FD1CFFA8A8FD1DFFA8FD13FF%7D7DFF7DFFA8A87DFD09FFA8FD1DFFA8FD1DFFA8FD1DFFA8FDFCFFFDFCFF%FD11FFA8FD16FFA8A8FFFFA87DA8A87DFD05FFA8FD12FFA8A8FFFFA8A8A8%7DA8FD04FFA8FD15FFA8A852A8FD04FFA8FD13FFA8A8A8FFFFA87DA8FF7D%7DFD04FFA852A8FD0DFFA8A85252A87D527D7D7DFFFF7DFFFF5252FD10FF%A87D527DA852A87D52A8FFA8A8FFA827A8FD12FFA827A87DA8FFA8A8FF7D%27FD12FFA852527D7DA87D7DFF7D7DFFFF7DFFA827A8FD0EFF7D7D52FF52%7D7DA8A8FFFF7D7DFF7D7DFD10FF7DA852A8FFA8A8A87DA8A8A852FFFF7D%A8FD13FF52FD05A852FFFF52FD12FF7DA852A87DFFFD04A87DA8FFA8FFFF%7DFD0FFFA8A8FFFFFFA8A8FFFF7DFD05FFA8FD11FFA8FD04FFA8A8FFA8A8%FD04FFA8FD17FF7DA8FD04FFA8FD13FFA8FD05FFA8FFFFFF7DFD0BFFA8FF%7D7DA8FD6CFFA8FD0EFF52A827A852FD0BFFA8FD1FFFA8FD1FFFA8FD1FFF%A8A8FD0CFFA8FF7D7D277D7DA8FD04FFFD04A8FFFD23A8FFFD1FA8FFFD1E%A87DFFFD09A8FF5227FF52FF7DA87DFD05FFA8FFA8FFA8FF7DFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8A8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DA8%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFFFA8A8FDFAFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2019-03-25T10:13:57-05:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>96</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAYAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Si6tjSkqGrtGPiG7qCW&#xA;X/WAU1Htiq6OSOWNZI2DxuAyOpBVlIqCCOoOKrsVdiqF1aG7n0u8hs5PSu5YJEtpa8eMjIQjVHSj&#xA;Yqwzy35W83W14l9DqT6fps9nFFBo8xMyWix21ikUa2/wxoyvDdcyr/tr16Kqx3T/AMrNWjW50u8t&#xA;bM2t8NSkSFKy2cMc0FvFHExeNKmW6hW53RnDKWd3c8iq9M8saLBonl7TtJhhhgWzt44mjt1CReoF&#xA;/eMoAX7T1atN61xVDecLO5u9KgjgiadY7+wmuYE6vBDdxSSfMKq8yv7QHHvTFWIW3kj8x08ralpd&#xA;7rFtq013AgSDUJLiSF5mi4SrJNGsUyQ+oA3EV5CoNORxVC6b+VQksm0y+0u0MFm2jmP6yVuYmltb&#xA;w3F9JCTDHQS23pw0ESL8IjoEUYq9TjjjijWONQkaAKiKAFVQKAADoBirEvO+ha3qmoWR02Zrf/Qd&#xA;QtorpGKm3vLj0DDcBgGKFYop0D0NC9O+KqVx5K1y80q1stQ1Bb0afqlrfWIlMnNYrPUxcR+pODym&#xA;f6ooSjrTnuSftYqhfLnkG3/Ttpr99ptqslvJrBh9aJGukF1qMc9kytxJHCKNyvxAx8wo74qz7FXY&#xA;q801Ty55/wBWjvodTeS4hGr2FxpghljtWishrTi7i5QSRl0/RUcbn1KsSzAfF8KqvSY41jjWNNlQ&#xA;BVBJJoBQbnfFV2KvOvLXl7z9D+jbpdSa1WOBLe/sbpRLCbgRXP1u5aMCOR2kvTE6lZVBStKV3VUt&#xA;X8r+cJdDj1HUJfr3mQ+X7jTrg2nqRKdRkkt5LOSODnJCjRTK7PMoXsacQAqrJLfyhbRfmDd+ZhZ2&#xA;oWawggjnCL6/1lZJvVkrxr8UTonKtSBToMVRnnW3vLnyrqcFmjyzPCQ0MX95JHUGWOOn7bx8lX3O&#xA;KsasdD/NS2utRkj1uAxXd561tHdxfWkgt/0jcERRIhtWUfUGgB5O3xBgKEhgqlujeUPNFl5yOrXl&#xA;vwlvdVMvqWs80sAtEhvC0kyyluLymdV41ov7tFFI+eKsv8peUdO0CfVpLWwtLP67dmSE2sSRn0Ai&#xA;BEbiq7KwYhegr74qpeeLHWLv9EDTQ1Y7qZpGStI3awuY7eV6VqiXDx9jQ0b9nFUqi0D8y4bWCwbV&#xA;4L+xrOl2LxWFxPE9vRFa6tzA0VZiQGji5J13+ziqX+QvJWtWUh03zFaxT6e9lKt1aSs15b8ZL55r&#xA;G2DSgI/1WLmpCoAOS/PFWY+StATQPKmlaT6MME9tawpeC3UKj3Cxqs0lQF5F3BJYipxVO8VeXeU9&#xA;BluYPIerJDI11pc2oR67I0hAjuHhuUujJGWCczesanjXfwxVk/5YA/4MtWTaze5v5NM8P0e99O1h&#xA;x/yfqhj4+2Kshvbu4t+HpWU15yry9EwjjSnX1pIuvtXFUN+lr/8A6st5/wAHZ/8AZRirv0tf/wDV&#xA;lvP+Ds/+yjFXfpa//wCrLef8HZ/9lGKpdper6gb3V66ReMBdqAOdp8I+qQbb3H07eOKpj+lr/wD6&#xA;st5/wdn/ANlGKu/S1/8A9WW8/wCDs/8AsoxV36Wv/wDqy3n/AAdn/wBlGKpd5d1fUD5f0wnSLyQm&#xA;0gJk52nxH0133uK7++Kpj+lr/wD6st5/wdn/ANlGKu/S1/8A9WW8/wCDs/8AsoxVLtd1fUBZRU0i&#xA;8Q/W7IV52nQ3cVRtcd+mKpj+lr//AKst5/wdn/2UYq79LX//AFZbz/g7P/soxV36Wv8A/qy3n/B2&#xA;f/ZRiqXapq+oC90imkXig3bAjnafEPqk+21x9O/hiqY/pa//AOrLef8AB2f/AGUYq79LX/8A1Zbz&#xA;/g7P/soxV36Wv/8Aqy3n/B2f/ZRiqXQavqH+IL0foi8IFpaER87TY+pc7/70U3/hiqY/pa//AOrL&#xA;ef8AB2f/AGUYq79LX/8A1Zbz/g7P/soxV36Wv/8Aqy3n/B2f/ZRiqXaFq+oGylrpF45+t3orztOg&#xA;u5aDe47dMVTH9LX/AP1Zbz/g7P8A7KMVd+lr/wD6st5/wdn/ANlGKu/S1/8A9WW8/wCDs/8AsoxV&#xA;LvLur6gfL+mE6ReSE2kBMnO0+I+mu+9xXf3xVMf0tf8A/VlvP+Ds/wDsoxVJ5vMvm/8Axdp+mW/l&#xA;iZtDuIHkv9VmngT6u4YBKKkkokqP2QeXfpirKQiAEBQAakinUnrirYAUAAUA2AHQDFXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqpTXVrA0KTzJE1&#xA;w/pQK7BTJJxL8EBPxNxRjQdgcVVcVdirsVdirC/zGn8yA2dvojypNLb3zWvpMUEl8kS/V4ZGXfiY&#xA;2mf5oD2xVIfMGpfmbcaDoaPZXdlqMlxGuo3OlFX9J4+QuXlt3jYmEOtIFWUiQEM5UChVRGnyS2ku&#xA;n+ZNWutROkW0OpmacXN68UixX8MGlyvbRvxcyWhZj+7+KpZt98VZjb3nmeTzPfWc9jbxaBHbQvZ6&#xA;gkztO8ztKJFMbRBPhCLty22NW5URVhUXkLzj5gtLyw8zeYNXiNjq6z6Ze106MS2cEnKJo/qEcLBy&#xA;tKtKvwuKqtOqr07FXYq7FXmdnqn5iDzQJbWE3mlvdX9tqMc7OvpPHdXS2IVQHEUbRLb+pIEYhWDB&#xA;TUkKoq7XzWnmCeG9ubs2uoahZRWkEcvGNYZbKUX0UMsK28nCIBpFc0fkoNa4qr+T73VdO8vS6OFn&#xA;vPN8Vs2oS22p3F06sss8kMQNy4uOPwwf3a/Og5csVRvmDVvPlv8Al3Jq9hZ2yeare0+tS6Z6M9/G&#xA;7qhZoI0je1lLt2pWh2o3XFWvL3lS6PmQecrrV7m4uL/T7eCSx9GWytwVBPIWs7STRD4qiKQ8kcsS&#xA;fioFWX4q7FXYqw7zVD5vl816NHp6yN5Znjkg14wStFMokIETxMrIykNTmynkErxNcVWeW59S0zQp&#xA;NHgSe881RWaX00OpXNzIjPMzRKPrUn1nj/cn4E29hyriqK1qPzzffl5O9lJ+ivOf1F5reO0aCZPr&#xA;qxFo4S13C0fB5KB6qKdm/axVDeV/Jd/Br6+atQ1XU5b260+C1uNNv2tqo6VLeoLOlttyqFjHENyY&#xA;E8sVZnirsVdiry3SdQ/NE6wl1aQi+0uS2mju0uJPT4anFdX9Y6EOY4E/dpyVSx/dfs8jiqvrTfmA&#xA;kS6vdyTWk76Gy/o60mElqmsi7gNmq0SGRmnJ4SBqrxqoNKllU4lSTR/Pd9qd9JfnSLyDS7XTU+sX&#xA;M1v+kLu5uorilv6jRoOH1apKBV/ZoS2KptpU/m26vNat9VtoLCySb09IvLWczTNEYIz6hSWAJUSM&#xA;/Wu/w8SByZViuh+QdQ161tZ/P8l/e6tomqXMunzXDWMaSW4ciBkGnpGDG8axO3qgSeop6LsVWGWu&#xA;oXl/qvlKM32swXU6W+o6lfRm8+oRzvfyyXVsIrdJI5pp2JgcXH7uGJRTfYqvVPy4nuJvKUAmdpUt&#xA;7q/tLSVySz2lrfT29o5Y7tyt40NT164qnt7d3Fvw9KymvOVeXomEcaU6+tJF19q4qhv0tf8A/Vlv&#xA;P+Ds/wDsoxV36Wv/APqy3n/B2f8A2UYq79LX/wD1Zbz/AIOz/wCyjFUBp2t6m95qqvpN66x3SrGv&#xA;O0+BTawNx3uP5mLbeOKo/wDS1/8A9WW8/wCDs/8AsoxV36Wv/wDqy3n/AAdn/wBlGKu/S1//ANWW&#xA;8/4Oz/7KMVd+lr//AKst5/wdn/2UYq79LX//AFZbz/g7P/soxV36Wv8A/qy3n/B2f/ZRiqA1rW9T&#xA;js42j0m9iY3VopYPaCqvdRqy7XH7Skr9OKo/9LX/AP1Zbz/g7P8A7KMVd+lr/wD6st5/wdn/ANlG&#xA;Ku/S1/8A9WW8/wCDs/8AsoxV36Wv/wDqy3n/AAdn/wBlGKu/S1//ANWW8/4Oz/7KMVd+lr//AKst&#xA;5/wdn/2UYq79LX//AFZbz/g7P/soxVAQ63qZ128iOk3pjW1tmWLnaUVmkuAzf70U+LiB9GKo/wDS&#xA;1/8A9WW8/wCDs/8AsoxV36Wv/wDqy3n/AAdn/wBlGKu/S1//ANWW8/4Oz/7KMVd+lr//AKst5/wd&#xA;n/2UYq79LX//AFZbz/g7P/soxV36Wv8A/qy3n/B2f/ZRirv0tf8A/VlvP+Ds/wDsoxVAaBrepy6F&#xA;p0suk3s0klrCzyl7Ql2MaktvcA79d8VR/wClr/8A6st5/wAHZ/8AZRiqTy+Z/NY836fpUPle4bRb&#xA;mB5L7V5JrdBbOrUUcVkkEnKv2QeQ60IxVkdtY2drFJFbQpDHLJJNIkYChpJnMkrkD9p3Ysx7k1xV&#xA;dZ2lrZWkNnaRLBa26LFBBGAqIiDiqqB0AApiqrirsVdirsVaWONS7KoVnPJyBQsaBanxNABireKu&#xA;xV2KuxV2KuxVp445BxdQ6ghgGFRVSGU79wRUYq3irsVdirsVdirsVdirQjjEhkCgSMArPTchakAn&#xA;wHI4q3irsVdirsVdirsVdirUccccaxxqEjQBURRQADYAAdAMVbxV2KuxVLvMWrNpGi3WoJF9YmhU&#xA;CCDlxEk0jCOJC2/EM7AFuw3xVjWnfmhpl5p3mCYRrFdeXrq9srhZ5FggeSzkkFfWk+whjjDNIy8R&#xA;UgFipoqlU/5neaX0yK5ttCtobl5dMVoLq5lVDFq+oPptvIjCDmV9SP1fjjU+my7BqrirNNS806Lp&#xA;FxpVlrF7b2l/q0n1e2haVQGlEbSNx5lWK1TiDT7RUdTiqxvOOhr5oXywTdfpho/WCCyvDB6XHlz+&#xA;tCH6tx/Zr6n2vh+1tiqdYq7FXYqw3zt+Y9r5UkuJbu2L2FhDa3GoXAJ5qt5O8MfBADyoIJCxJAG3&#xA;apCqO1HzZdpd2dpptgLp71LpA8kojEd1bweskLBVk5c+hdTQe+KoLyl5y1rX9furc2drFo0dlaah&#xA;a3STStcPFqAdoA0TRIqkLEefx7bUriqc2nmzRtRTVBo0yaxdaSeFzZ2UsDymQpzVFLyJGC26gu6j&#xA;kCCdjiqzyd5pi80aDBrUFhdafbXNTbxXvoeq6DpJS3luFCk1G7BtunTFU7xV2KuxVjf5gec4PJ3l&#xA;465cwPcW0dxbwzxxglxHPKsbMigHkyhqgfiMVU/LPmfWNW17VLK4tLeCxsY4JIZY5jLM4u09WIMF&#xA;Bi2T7RR2FfskjfFUfpvm3SNVTVP0SzahcaS7RXFrDxWRpVXkqIZWjSr04qWYCvUjFVvk/wA0r5n0&#xA;YarHp13psDyPHFFem39RxGeDOBbTXKheYZfiYHbpShKqd4q7FXYqwnzj+Zlt5X1H07u0eXT4mt45&#xA;54iDJ6lzDdyoqIeKihtEBZ3VQHqSoUnFUVefmFp5kki0lFv5rPVbLS9VQv6ZtxevFH6o2b1OLTqv&#xA;Ed677Yqhrvzrrhg0WSxsbYnUtUudGuVnlkX05rR7iN5E4I3JGNm9K0O4xVkF75n0Sy1yy0O5uAmp&#xA;6gjSWsFD8SoadfftiqEbzcV85r5W/Q98ZGtzd/pQG0+qCEUBbe4+sf3hEdPRrXf7PxYqyDFXYq7F&#xA;XmH/ACs7zaZ/Kc36Ls4tK82NCLOWWWUTAXYlmj+AL6YaC3ERkV3UyMWCdMVZdpFzb+cfJiHUIfS+&#xA;vwyW1/BGxHpzxO0M4ikFG+CWNuD9dgcVVtQsPJdtHPBqcGmxpqKGO6S6S3UXKeo8rCRXAEg9WZ3I&#xA;O3JiepOKpPav+XFhqQtLY6YsF1Ek3BZLcQRHT50lt1jiHwLxnuHmUjcPVuvRVMNMuPI+nWdvaQaj&#xA;ZyR2k0txbPPcxzSRyztIzsruzMD+/da1rxNMVdNP5Gm123119SthqdrC9tFKl8UQwyHkySRJKsUg&#xA;ruOamh3FMVTH/E/lr/q7Wf8A0kRf81Yq7/E/lr/q7Wf/AEkRf81Yq7/E/lr/AKu1n/0kRf8ANWKp&#xA;dc3HkS61H6/c31hNOYVgcSTwujIj+pGWRmKlo2LcT25HxxVdc3fkefT1sBf2EEEcLW9t6M0EbQRv&#xA;GYv3BU/u6IaDj0xVL4Jvy+1CO1uDPY2kmn3Q9Aw3McbH9HPLBb82QoXjCsxVGqo5YqnieYfKqNIy&#xA;anYq0rc5WWeEFmCheTUbc8VA+QxVD6ZqHkXSrY22l3Ol2FsztK0Fs9vChkc1d+KFRyY7k98VRf8A&#xA;ify1/wBXaz/6SIv+asVd/ify1/1drP8A6SIv+asVd/ify1/1drP/AKSIv+asVUrjXfKNygS41DT5&#xA;kVldVkmhYB0PJWAJO6kVBxVJ9Qu/y/E+kRLNYIsd3E0Bt7iKARNa20volhGRyRFXgqH4d8VTmLX/&#xA;ACnCZDDqNhGZnMkpSaFebkAFmo27UA3OKofTb/yJpcUkOmXOl2MM0rzzR2z28KvNJ9uRghUF2pux&#xA;3OKoz/E/lr/q7Wf/AEkRf81Yq7/E/lr/AKu1n/0kRf8ANWKu/wAT+Wv+rtZ/9JEX/NWKpfPceQ7i&#xA;+lvri80+eeeFbab1Z4XRo0EoUFGYr9m5lWtN1Yg7YqrrqvkpVdVvNNVZJEmkAkgAaSIII3bfdkES&#xA;BT1HEU6DFUBpup+RxBPpq3VitvYXLmJ3uY3ZpZ4xPLOGJ5K7NcvVga1rvviqJ0y78j6bZWFna39i&#xA;ItNhFtZM9xHJIkYULQSOxfcKOW++Kr5r/wAiT6lb6pNc6XLqdorx2t8727TxJIKOscpPNQ3cA74q&#xA;jP8AE/lr/q7Wf/SRF/zVirv8T+Wv+rtZ/wDSRF/zViqhD5z8pzaxFosOr2kmqzxmaC0WZC8iAkEp&#xA;Q/ERTcDcdcVY/Yfk/wCVbf8ARc06NcX2jCFLKcSTRRtHYOzacLiBJRHO1orKFZupFdugVZN5Z0NN&#xA;C0Kz0pZTcNbqTPcsOJlmkYyTSlQTx9SR2anauKpniqg9mj38N6WPOGKWFV7ETNGxJ+XojFVfFXYq&#xA;7FXYq7FXYq7FVCys0tIWiRiwaWaYk9azytKw28C9BiqvirsVdirsVdirsVULmzS4mtJWYg2kpmQD&#xA;oSYniofolJxVXxV2KuxV2KuxV2KuxVQtrNLea7lViTdyiZwegIiSKg+iIHFVfFXYq7FXYqgJfL+i&#xA;TazFrc1jDLq1vEbe3vXQNLHESWKox+zUnemKo/FXYqxvW/zA8u6JqS2OovJFWaC2NwFDRie5inmi&#xA;hoD6jSMtrQIqEkugFeWyqh5h/MjRdC1JbK6tbyZDbzXRvbeJXtwttHJNMvIurMyRwsW4qQDxUnk6&#xA;qVUy0TzG+q3+pWZ0u7sTpcwt5prk2pR5GijmAj9CeZ/7uZG+JR18dsVVdV8zaNpei3WtXUzvptkZ&#xA;FupraGa6ZDDIYpax26Syfu3Vg5C/DQk0AOKonSNVs9W0231Ky9X6rcrzhM8M1tIVrQExTpHKtaVH&#xA;JRUb9MVReKuxV2Kse8x+etB8uzmPU3aKKOOKW6uvgEUCTy+jEZSzKRzZXpQHZW70BVb1Tztptjea&#xA;dZpa3d7PqiXDWq20XR7W3NyYZDK0XCV0WiI29etBU4qs8v8Ane113Vp9PtNPu0ihtre9XUZPq31e&#xA;SC7DG3ZOEzzfvFjYgNGKd6YqnE2q2MUF7NzaYafUXcdvHJcSqwjWbgIYVeRnMbqwVVLGooMVQvlr&#xA;zPo/mXSk1XSHmlsJGKxSz21xal6U+JEuY4XZd/tAU99sVTXFXYq7FXYqxHVvzI02zudcs7W1lv8A&#xA;UPL7xfpK0iZFZIZ4EmjmLOQgDerxVSQzFWIFFJxVkf6QSGxhub9fqRlaKJonZWKyzusUcfJKqSZH&#xA;C7Yql955x0Kz8yWvlyc3Q1a9RpbWNLK8kieNCod/rCQtAFQyKHJf4eS1pUYqneKuxV2KuxVi3mf8&#xA;w9F8t33oakrx28a2zXN3QlU+uNOkCqihnkZmtHHFVrXiBUnFUXqPnPSrVOVuHv3j1Cz0u7jt+PK3&#xA;lvniRHlEhSir9YQtSp3pStaKpfqHny4hsrG5sdM+ttd6jLpEsTTrEYrqKZ4N6q9UZomNfChpvirJ&#xA;p9RsILqC0mnSO5ua+hExoz8etBiqTaH5w/S3mDV9F/Q99ZPozrHcXlybQwO0iq8fp+jcTSn1I2Dj&#xA;lGKDZqNtirIcVYUn5p6NLN5btoIJJbrzQzyafEpBCWnGR4LqZhUIk6xjgOpqaV4tRVknl3W4Nc0S&#xA;z1WBGiS6j5NBJTnFIpKyRPTblG6lGp3GKpbq/kHy9rN/cXGqw/W4J/RkW1YsgjuYYprcXMbxsrrI&#xA;YbjjWvw8VZaMK4qoar+Wnla/mvLmOGSyvb6zfTbi4tppkU2snMSIYQ/oEn1nPJkPxHl1AxVHWulW&#xA;d7Jaa1ZSzWsV7J+kL22rVLozWa2yLOpLCiRrGaLtyX54q3p3kryrpukX2kWGmQWunakZ/rsEKCIS&#xA;C5LmQMU4mn7wqv8AKNhQDFUx0vTbXTNOt9PtPUFraoIoRNLLO4RdgGlmaSRqeLMcVRWKuxV2KpDr&#xA;fkrQ9bvZJtUhF1a3FvHb3dlJvFL6EplgZqEf3Zkk26Hlv0xVVl8p6OLe2W0i+q3Vj6j2F2pZpI55&#xA;bdrYzuWb98/ptQmXkT1O++KoHSvK2kJBbS6PJcae1o9vZzSK5LTwaQ8sEcEgJZeBq1aAEjr7Kpno&#xA;3ljy/otzqFzpVhBZTapKs980Map6jogjWvEDYBa08Sx6scVX6B5f0rQNNTTdKjeGyjZmihkmmn4c&#xA;zyKoZnkZVr0UHiOwxVMcVdirsVdiqR3Hkjyvcaje6lLZVvdSRor+ZZJUMyMkKUcK4U0W1jC7fDvS&#xA;nJqqqEPlzR9ZsrhNWD6vbnUpbmBL4I3oPbXACxxcekSyQVAJ3GzbGmKpjeeXdJvNW07VponF/pKz&#xA;R2MsU00QVLgJ6qOkbokiN6SHjIGFVB6jFUyxV2KuxV2KpLqvk7QdWvJ7nUrf60tzbx209tIawskP&#xA;rcCV61Au5R1oQ2/QUVVofK+gQxzRx2aKLieC7nNWLPPa+l6MjMTyJX6vGeu9N61NVULp2g6I1vJp&#xA;/pyT/o7UZLwyzEBjeTn64ZQY+I2N0abe1MVRWn+XbC0ttOjmaTULnTIxFBqF63rXTUFC8klByY9z&#xA;TFUTFpGkxalPqkVlBHqdyixXN8sSLPJHH9hHlA5sq9gTtiqI9eD1zB6i+uFDmKo58CaBuPWlRSuK&#xA;vPNM/J/SEstBudQSRtd8vi3ijube5njW6i02OW3s/WUMEBaNw7UXZiRUrWqrLfJ2iT6L5bs9PuXW&#xA;S8UPNePHX0zcXEjTz8KgHh6sjcajpiqPvNNt7wqZXnUpUD0bieAb+IidK/TiqH/w9Yf79vP+k68/&#xA;6rYqhdL8qWdnplpaST3bPbwxxOy3t4qkogUkD1dhtiqK/wAPWH+/bz/pOvP+q2Ku/wAPWH+/bz/p&#xA;OvP+q2Ku/wAPWH+/bz/pOvP+q2Ku/wAPWH+/bz/pOvP+q2Ku/wAPWH+/bz/pOvP+q2Ku/wAPWH+/&#xA;bz/pOvP+q2Ku/wAPWH+/bz/pOvP+q2KoXTvKlna27xvPdsWmnlBW9vAKTTPKo/veoD0OKor/AA9Y&#xA;f79vP+k68/6rYq7/AA9Yf79vP+k68/6rYq7/AA9Yf79vP+k68/6rYq7/AA9Yf79vP+k68/6rYq7/&#xA;AA9Yf79vP+k68/6rYq7/AA9Yf79vP+k68/6rYq7/AA9Yf79vP+k68/6rYqhdO8qWdrbvG892xaae&#xA;UFb28ApNM8qj+96gPQ4qiv8AD1h/v28/6Trz/qtirv8AD1h/v28/6Trz/qtirv8AD1h/v28/6Trz&#xA;/qtirv8AD1h/v28/6Trz/qtirv8AD1h/v28/6Trz/qtirv8AD1h/v28/6Trz/qtirv8AD1h/v28/&#xA;6Trz/qtiqFtPKlnBcXsjT3ZF1MJUAvbwEAQxxUb97uaxk4qiv8PWH+/bz/pOvP8Aqtirv8PWH+/b&#xA;z/pOvP8AqtiqWf8AKu/LB812nmmSO4m1iwga2s5Zrq4lWNHJL0V3avLl+1UeArir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2019-03-25T10:13:57-05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-03-25T10:13:57-05:00</xmp:ModifyDate>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>13.0d2e2</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:e12808c9-bd7b-42f3-bf93-37a2d1081418</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:e12808c9-bd7b-42f3-bf93-37a2d1081418</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:e12808c9-bd7b-42f3-bf93-37a2d1081418</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e12808c9-bd7b-42f3-bf93-37a2d1081418</stEvt:instanceID>
                  <stEvt:when>2019-03-25T10:13:57-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -165.549 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 165.549 li
455.664 165.549 li
455.664 0 li
cp
clp
35.7007 23.1978 mo
448.524 23.1978 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
.216 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
35.7007 23.1978 mo
448.524 23.1978 li
@
448.104 20.5576 mo
452.895 23.1978 li
448.104 25.8374 li
448.104 20.5576 li
448.104 20.5576 li
cp
f
0 lw
448.104 20.5576 mo
452.895 23.1978 li
448.104 25.8374 li
448.104 20.5576 li
448.104 20.5576 li
cp
@
89.5264 15.3975 mo
89.5264 28.2075 li
f
.216 lw
89.5264 15.3975 mo
89.5264 28.2075 li
@
143.526 15.3975 mo
143.526 28.2075 li
f
143.526 15.3975 mo
143.526 28.2075 li
@
197.526 15.3975 mo
197.526 28.2075 li
f
197.526 15.3975 mo
197.526 28.2075 li
@
251.525 15.3975 mo
251.525 28.2075 li
f
251.525 15.3975 mo
251.525 28.2075 li
@
305.525 15.3975 mo
305.525 28.2075 li
f
305.525 15.3975 mo
305.525 28.2075 li
@
359.524 15.3975 mo
359.524 28.2075 li
f
359.524 15.3975 mo
359.524 28.2075 li
@
413.524 15.3975 mo
413.524 28.2075 li
f
413.524 15.3975 mo
413.524 28.2075 li
@
244.016 4.12988 mo
244.016 10.4175 li
245.023 10.4175 li
245.023 6.94971 li
245.023 5.66602 245.695 4.82568 246.728 4.82568 cv
247.52 4.82568 248.023 5.30566 248.023 6.06201 cv
248.023 10.4175 li
249.02 10.4175 li
249.02 5.66602 li
249.02 4.62207 248.239 3.94971 247.027 3.94971 cv
246.092 3.94971 245.491 4.31006 244.939 5.18604 cv
244.939 4.12988 li
244.016 4.12988 li
f
254.103 2.65381 mo
256.971 2.65381 li
256.971 1.66992 li
250.106 1.66992 li
250.106 2.65381 li
252.986 2.65381 li
252.986 10.4175 li
254.103 10.4175 li
254.103 2.65381 li
f
287.228 .549805 mo
286.027 2.12207 285.271 4.30566 285.271 6.18994 cv
285.271 8.08594 286.027 10.2695 287.228 11.8418 cv
287.887 11.8418 li
286.831 10.1255 286.243 8.10986 286.243 6.18994 cv
286.243 4.28174 286.831 2.25391 287.887 .549805 cv
287.228 .549805 li
f
302.663 6.09375 mo
300.179 6.09375 li
300.179 3.60986 li
299.339 3.60986 li
299.339 6.09375 li
296.855 6.09375 li
296.855 6.93359 li
299.339 6.93359 li
299.339 9.41748 li
300.179 9.41748 li
300.179 6.93359 li
302.663 6.93359 li
302.663 6.09375 li
f
306.37 3.23779 mo
306.37 9.29785 li
307.427 9.29785 li
307.427 .790039 li
306.73 .790039 li
306.358 2.09766 306.118 2.27783 304.486 2.48193 cv
304.486 3.23779 li
306.37 3.23779 li
f
311.058 11.8418 mo
312.258 10.2695 313.014 8.08594 313.014 6.20166 cv
313.014 4.30566 312.258 2.12207 311.058 .549805 cv
310.398 .549805 li
311.454 2.26611 312.042 4.28174 312.042 6.20166 cv
312.042 8.10986 311.454 10.1377 310.398 11.8418 cv
311.058 11.8418 li
f
289.896 3.00977 mo
289.896 9.29785 li
290.903 9.29785 li
290.903 5.83008 li
290.903 4.5459 291.575 3.70605 292.607 3.70605 cv
293.399 3.70605 293.903 4.18604 293.903 4.94189 cv
293.903 9.29785 li
294.899 9.29785 li
294.899 4.5459 li
294.899 3.50195 294.119 2.83008 292.907 2.83008 cv
291.971 2.83008 291.371 3.18994 290.819 4.06592 cv
290.819 3.00977 li
289.896 3.00977 li
f
320.482 1.53418 mo
323.351 1.53418 li
323.351 .549805 li
316.487 .549805 li
316.487 1.53418 li
319.367 1.53418 li
319.367 9.29785 li
320.482 9.29785 li
320.482 1.53418 li
f
341.227 .549805 mo
340.026 2.12207 339.271 4.30566 339.271 6.18994 cv
339.271 8.08594 340.026 10.2695 341.227 11.8418 cv
341.887 11.8418 li
340.831 10.1255 340.243 8.10986 340.243 6.18994 cv
340.243 4.28174 340.831 2.25391 341.887 .549805 cv
341.227 .549805 li
f
356.662 6.09375 mo
354.179 6.09375 li
354.179 3.60986 li
353.339 3.60986 li
353.339 6.09375 li
350.854 6.09375 li
350.854 6.93359 li
353.339 6.93359 li
353.339 9.41748 li
354.179 9.41748 li
354.179 6.93359 li
356.662 6.93359 li
356.662 6.09375 li
f
363.334 8.25391 mo
358.858 8.25391 li
358.966 7.55762 359.351 7.11377 360.395 6.50195 cv
361.594 5.85352 li
362.782 5.20605 363.395 4.33008 363.395 3.28613 cv
363.395 2.57813 363.106 1.91797 362.603 1.46191 cv
362.098 1.00586 361.475 .790039 360.67 .790039 cv
359.59 .790039 358.786 1.17383 358.318 1.89404 cv
358.019 2.3501 357.887 2.87793 357.862 3.7417 cv
358.918 3.7417 li
358.954 3.16602 359.026 2.81787 359.17 2.54199 cv
359.446 2.02588 359.998 1.71387 360.634 1.71387 cv
361.594 1.71387 362.314 2.39795 362.314 3.31006 cv
362.314 3.98193 361.918 4.55762 361.162 4.98975 cv
360.059 5.61377 li
358.282 6.62158 357.767 7.42578 357.67 9.29785 cv
363.334 9.29785 li
363.334 8.25391 li
f
365.058 11.8418 mo
366.258 10.2695 367.014 8.08594 367.014 6.20166 cv
367.014 4.30566 366.258 2.12207 365.058 .549805 cv
364.397 .549805 li
365.454 2.26611 366.042 4.28174 366.042 6.20166 cv
366.042 8.10986 365.454 10.1377 364.397 11.8418 cv
365.058 11.8418 li
f
343.895 3.00977 mo
343.895 9.29785 li
344.902 9.29785 li
344.902 5.83008 li
344.902 4.5459 345.575 3.70605 346.606 3.70605 cv
347.398 3.70605 347.902 4.18604 347.902 4.94189 cv
347.902 9.29785 li
348.898 9.29785 li
348.898 4.5459 li
348.898 3.50195 348.119 2.83008 346.906 2.83008 cv
345.971 2.83008 345.371 3.18994 344.818 4.06592 cv
344.818 3.00977 li
343.895 3.00977 li
f
374.482 1.53418 mo
377.351 1.53418 li
377.351 .549805 li
370.486 .549805 li
370.486 1.53418 li
373.366 1.53418 li
373.366 9.29785 li
374.482 9.29785 li
374.482 1.53418 li
f
395.227 .549805 mo
394.026 2.12207 393.271 4.30566 393.271 6.18994 cv
393.271 8.08594 394.026 10.2695 395.227 11.8418 cv
395.887 11.8418 li
394.83 10.1255 394.242 8.10986 394.242 6.18994 cv
394.242 4.28174 394.83 2.25391 395.887 .549805 cv
395.227 .549805 li
f
410.662 6.09375 mo
408.179 6.09375 li
408.179 3.60986 li
407.338 3.60986 li
407.338 6.09375 li
404.854 6.09375 li
404.854 6.93359 li
407.338 6.93359 li
407.338 9.41748 li
408.179 9.41748 li
408.179 6.93359 li
410.662 6.93359 li
410.662 6.09375 li
f
413.914 5.39795 mo
414.046 5.39795 li
414.49 5.38574 li
415.653 5.38574 416.254 5.91406 416.254 6.93359 cv
416.254 8.00195 415.594 8.6377 414.49 8.6377 cv
413.338 8.6377 412.773 8.06152 412.702 6.82568 cv
411.646 6.82568 li
411.694 7.50977 411.813 7.95361 412.018 8.33789 cv
412.45 9.15381 413.29 9.57373 414.454 9.57373 cv
416.206 9.57373 417.334 8.52979 417.334 6.92188 cv
417.334 5.8418 416.914 5.2417 415.894 4.89355 cv
416.686 4.58203 417.082 3.98193 417.082 3.12988 cv
417.082 1.66602 416.109 .790039 414.49 .790039 cv
412.773 .790039 411.862 1.72607 411.826 3.53809 cv
412.882 3.53809 li
412.894 3.02197 412.942 2.73389 413.074 2.46973 cv
413.313 2.00195 413.842 1.71387 414.502 1.71387 cv
415.438 1.71387 416.002 2.26611 416.002 3.16602 cv
416.002 3.76563 415.786 4.12598 415.317 4.31787 cv
415.03 4.43799 414.658 4.48584 413.914 4.49805 cv
413.914 5.39795 li
f
419.058 11.8418 mo
420.257 10.2695 421.014 8.08594 421.014 6.20166 cv
421.014 4.30566 420.257 2.12207 419.058 .549805 cv
418.397 .549805 li
419.453 2.26611 420.041 4.28174 420.041 6.20166 cv
420.041 8.10986 419.453 10.1377 418.397 11.8418 cv
419.058 11.8418 li
f
397.895 3.00977 mo
397.895 9.29785 li
398.902 9.29785 li
398.902 5.83008 li
398.902 4.5459 399.574 3.70605 400.606 3.70605 cv
401.398 3.70605 401.902 4.18604 401.902 4.94189 cv
401.902 9.29785 li
402.898 9.29785 li
402.898 4.5459 li
402.898 3.50195 402.118 2.83008 400.906 2.83008 cv
399.971 2.83008 399.37 3.18994 398.818 4.06592 cv
398.818 3.00977 li
397.895 3.00977 li
f
428.482 1.53418 mo
431.35 1.53418 li
431.35 .549805 li
424.486 .549805 li
424.486 1.53418 li
427.366 1.53418 li
427.366 9.29785 li
428.482 9.29785 li
428.482 1.53418 li
f
180.278 0 mo
179.078 1.57178 178.322 3.75586 178.322 5.63965 cv
178.322 7.53564 179.078 9.71973 180.278 11.2915 cv
180.938 11.2915 li
179.882 9.57568 179.294 7.55957 179.294 5.63965 cv
179.294 3.73193 179.882 1.7041 180.938 0 cv
180.278 0 li
f
192.714 5.00391 mo
189.858 5.00391 li
189.858 5.86768 li
192.714 5.86768 li
192.714 5.00391 li
f
196.421 2.68799 mo
196.421 8.74756 li
197.478 8.74756 li
197.478 .240234 li
196.781 .240234 li
196.409 1.54785 196.169 1.72803 194.538 1.93213 cv
194.538 2.68799 li
196.421 2.68799 li
f
201.109 11.2915 mo
202.309 9.71973 203.065 7.53564 203.065 5.65186 cv
203.065 3.75586 202.309 1.57178 201.109 0 cv
200.449 0 li
201.505 1.71582 202.093 3.73193 202.093 5.65186 cv
202.093 7.55957 201.505 9.58789 200.449 11.2915 cv
201.109 11.2915 li
f
182.946 2.45996 mo
182.946 8.74756 li
183.954 8.74756 li
183.954 5.27979 li
183.954 3.99609 184.626 3.15576 185.658 3.15576 cv
186.45 3.15576 186.954 3.63574 186.954 4.3916 cv
186.954 8.74756 li
187.95 8.74756 li
187.95 3.99609 li
187.95 2.95215 187.169 2.27979 185.958 2.27979 cv
185.022 2.27979 184.422 2.63965 183.87 3.51563 cv
183.87 2.45996 li
182.946 2.45996 li
f
208.213 .983887 mo
211.082 .983887 li
211.082 0 li
204.218 0 li
204.218 .983887 li
207.098 .983887 li
207.098 8.74756 li
208.213 8.74756 li
208.213 .983887 li
f
126.278 0 mo
125.078 1.57178 124.322 3.75586 124.322 5.63965 cv
124.322 7.53564 125.078 9.71973 126.278 11.2915 cv
126.938 11.2915 li
125.882 9.57568 125.294 7.55957 125.294 5.63965 cv
125.294 3.73193 125.882 1.7041 126.938 0 cv
126.278 0 li
f
138.714 5.00391 mo
135.858 5.00391 li
135.858 5.86768 li
138.714 5.86768 li
138.714 5.00391 li
f
145.386 7.70361 mo
140.91 7.70361 li
141.018 7.00781 141.402 6.56348 142.446 5.95166 cv
143.646 5.30371 li
144.833 4.65576 145.445 3.77979 145.445 2.73584 cv
145.445 2.02783 145.158 1.36816 144.654 .912109 cv
144.149 .456055 143.525 .240234 142.722 .240234 cv
141.642 .240234 140.838 .624023 140.37 1.34375 cv
140.07 1.7998 139.938 2.32813 139.914 3.19189 cv
140.97 3.19189 li
141.006 2.61572 141.078 2.26807 141.222 1.99219 cv
141.498 1.47607 142.05 1.16406 142.686 1.16406 cv
143.646 1.16406 144.366 1.84766 144.366 2.75977 cv
144.366 3.43164 143.97 4.00781 143.214 4.43994 cv
142.11 5.06396 li
140.334 6.07178 139.818 6.87598 139.722 8.74756 cv
145.386 8.74756 li
145.386 7.70361 li
f
147.109 11.2915 mo
148.309 9.71973 149.065 7.53564 149.065 5.65186 cv
149.065 3.75586 148.309 1.57178 147.109 0 cv
146.449 0 li
147.505 1.71582 148.093 3.73193 148.093 5.65186 cv
148.093 7.55957 147.505 9.58789 146.449 11.2915 cv
147.109 11.2915 li
f
128.946 2.45996 mo
128.946 8.74756 li
129.954 8.74756 li
129.954 5.27979 li
129.954 3.99609 130.626 3.15576 131.658 3.15576 cv
132.45 3.15576 132.954 3.63574 132.954 4.3916 cv
132.954 8.74756 li
133.95 8.74756 li
133.95 3.99609 li
133.95 2.95215 133.17 2.27979 131.958 2.27979 cv
131.022 2.27979 130.422 2.63965 129.87 3.51563 cv
129.87 2.45996 li
128.946 2.45996 li
f
154.214 .983887 mo
157.082 .983887 li
157.082 0 li
150.218 0 li
150.218 .983887 li
153.098 .983887 li
153.098 8.74756 li
154.214 8.74756 li
154.214 .983887 li
f
72.2813 0 mo
71.0815 1.57178 70.3257 3.75586 70.3257 5.63965 cv
70.3257 7.53564 71.0815 9.71973 72.2813 11.2915 cv
72.9414 11.2915 li
71.8857 9.57568 71.2974 7.55957 71.2974 5.63965 cv
71.2974 3.73193 71.8857 1.7041 72.9414 0 cv
72.2813 0 li
f
84.7163 5.00391 mo
81.8604 5.00391 li
81.8604 5.86768 li
84.7163 5.86768 li
84.7163 5.00391 li
f
87.9683 4.84766 mo
88.1001 4.84766 li
88.5439 4.83594 li
89.708 4.83594 90.3081 5.36377 90.3081 6.38379 cv
90.3081 7.45166 89.6479 8.08789 88.5439 8.08789 cv
87.3921 8.08789 86.8281 7.51172 86.7563 6.27588 cv
85.7002 6.27588 li
85.748 6.95996 85.8682 7.40381 86.0723 7.7876 cv
86.5039 8.60352 87.3442 9.02344 88.5078 9.02344 cv
90.2598 9.02344 91.3877 7.97949 91.3877 6.37158 cv
91.3877 5.29199 90.9678 4.69189 89.9478 4.34375 cv
90.7397 4.03174 91.1357 3.43164 91.1357 2.58008 cv
91.1357 1.11621 90.1641 .240234 88.5439 .240234 cv
86.8281 .240234 85.916 1.17578 85.8804 2.98779 cv
86.936 2.98779 li
86.9482 2.47168 86.9961 2.18408 87.1279 1.91992 cv
87.3682 1.45215 87.896 1.16406 88.5562 1.16406 cv
89.4922 1.16406 90.0562 1.71582 90.0562 2.61572 cv
90.0562 3.21582 89.8398 3.57568 89.3721 3.76758 cv
89.084 3.8877 88.7119 3.93604 87.9683 3.94775 cv
87.9683 4.84766 li
f
93.1113 11.2915 mo
94.3115 9.71973 95.0674 7.53564 95.0674 5.65186 cv
95.0674 3.75586 94.3115 1.57178 93.1113 0 cv
92.4517 0 li
93.5073 1.71582 94.0957 3.73193 94.0957 5.65186 cv
94.0957 7.55957 93.5073 9.58789 92.4517 11.2915 cv
93.1113 11.2915 li
f
74.9463 2.45996 mo
74.9463 8.74756 li
75.9546 8.74756 li
75.9546 5.27979 li
75.9546 3.99609 76.6265 3.15576 77.6582 3.15576 cv
78.4502 3.15576 78.9541 3.63574 78.9541 4.3916 cv
78.9541 8.74756 li
79.9502 8.74756 li
79.9502 3.99609 li
79.9502 2.95215 79.1704 2.27979 77.9585 2.27979 cv
77.0225 2.27979 76.4224 2.63965 75.8706 3.51563 cv
75.8706 2.45996 li
74.9463 2.45996 li
f
100.214 .983887 mo
103.082 .983887 li
103.082 0 li
96.2183 0 li
96.2183 .983887 li
99.0981 .983887 li
99.0981 8.74756 li
100.214 8.74756 li
100.214 .983887 li
f
35.7007 66.0874 mo
448.524 66.0874 li
f
35.7007 66.0874 mo
448.524 66.0874 li
@
448.104 63.4575 mo
452.895 66.0874 li
448.104 68.7275 li
448.104 63.4575 li
448.104 63.4575 li
cp
f
0 lw
448.104 63.4575 mo
452.895 66.0874 li
448.104 68.7275 li
448.104 63.4575 li
448.104 63.4575 li
cp
@
89.5264 59.5674 mo
89.5264 72.3872 li
f
.216 lw
89.5264 59.5674 mo
89.5264 72.3872 li
@
197.526 59.5674 mo
197.526 72.3872 li
f
197.526 59.5674 mo
197.526 72.3872 li
@
305.525 59.5674 mo
305.525 72.3872 li
f
305.525 59.5674 mo
305.525 72.3872 li
@
413.524 59.5674 mo
413.524 72.3872 li
f
413.524 59.5674 mo
413.524 72.3872 li
@
292.547 44.9497 mo
291.551 44.9497 li
291.551 53.6973 li
292.547 53.6973 li
292.547 51.2495 li
293.52 50.2896 li
295.643 53.6973 li
296.879 53.6973 li
294.312 49.5815 li
296.495 47.4097 li
295.211 47.4097 li
292.547 50.0737 li
292.547 44.9497 li
f
301.103 45.9336 mo
303.971 45.9336 li
303.971 44.9497 li
297.107 44.9497 li
297.107 45.9336 li
299.987 45.9336 li
299.987 53.6973 li
301.103 53.6973 li
301.103 45.9336 li
f
306.733 53.8296 mo
306.727 53.2114 306.319 52.8633 305.593 52.8633 cv
304.861 52.8633 304.387 53.2412 304.387 53.8232 cv
304.387 54.3154 304.639 54.5493 305.383 54.7295 cv
305.851 54.8433 li
306.199 54.9272 306.337 55.0532 306.337 55.2813 cv
306.337 55.5752 306.043 55.7734 305.605 55.7734 cv
305.335 55.7734 305.107 55.6953 304.981 55.5635 cv
304.903 55.4736 304.867 55.3833 304.837 55.1611 cv
304.309 55.1611 li
304.333 55.8872 304.741 56.2354 305.563 56.2354 cv
306.354 56.2354 306.859 55.8452 306.859 55.2393 cv
306.859 54.7715 306.595 54.5137 305.971 54.3633 cv
305.491 54.2495 li
305.083 54.1533 304.909 54.0215 304.909 53.7993 cv
304.909 53.5117 305.167 53.3257 305.575 53.3257 cv
305.977 53.3257 306.193 53.4995 306.205 53.8296 cv
306.733 53.8296 li
f
316.253 50.4937 mo
313.769 50.4937 li
313.769 48.0098 li
312.929 48.0098 li
312.929 50.4937 li
310.445 50.4937 li
310.445 51.3335 li
312.929 51.3335 li
312.929 53.8174 li
313.769 53.8174 li
313.769 51.3335 li
316.253 51.3335 li
316.253 50.4937 li
f
387.557 44.96 mo
386.356 46.5317 385.601 48.7158 385.601 50.5996 cv
385.601 52.4956 386.356 54.6792 387.557 56.2515 cv
388.217 56.2515 li
387.16 54.5352 386.572 52.5195 386.572 50.5996 cv
386.572 48.6914 387.16 46.6636 388.217 44.96 cv
387.557 44.96 li
f
402.022 50.5034 mo
399.538 50.5034 li
399.538 48.0195 li
398.698 48.0195 li
398.698 50.5034 li
396.215 50.5034 li
396.215 51.3433 li
398.698 51.3433 li
398.698 53.8271 li
399.538 53.8271 li
399.538 51.3433 li
402.022 51.3433 li
402.022 50.5034 li
f
405.729 47.6475 mo
405.729 53.7075 li
406.786 53.7075 li
406.786 45.1997 li
406.09 45.1997 li
405.718 46.5078 405.478 46.6875 403.846 46.8916 cv
403.846 47.6475 li
405.729 47.6475 li
f
410.417 56.2515 mo
411.617 54.6792 412.373 52.4956 412.373 50.6113 cv
412.373 48.7158 411.617 46.5317 410.417 44.96 cv
409.758 44.96 li
410.813 46.6758 411.401 48.6914 411.401 50.6113 cv
411.401 52.5195 410.813 54.5474 409.758 56.2515 cv
410.417 56.2515 li
f
391.066 44.96 mo
390.07 44.96 li
390.07 53.7075 li
391.066 53.7075 li
391.066 51.2593 li
392.038 50.2993 li
394.162 53.7075 li
395.398 53.7075 li
392.83 49.5913 li
395.015 47.4194 li
393.73 47.4194 li
391.066 50.0835 li
391.066 44.96 li
f
419.842 45.9438 mo
422.71 45.9438 li
422.71 44.96 li
415.847 44.96 li
415.847 45.9438 li
418.727 45.9438 li
418.727 53.7075 li
419.842 53.7075 li
419.842 45.9438 li
f
425.232 53.8394 mo
425.227 53.2217 424.818 52.8735 424.093 52.8735 cv
423.36 52.8735 422.887 53.2515 422.887 53.8335 cv
422.887 54.3252 423.139 54.5596 423.883 54.7393 cv
424.351 54.8535 li
424.698 54.9375 424.836 55.0635 424.836 55.2915 cv
424.836 55.5854 424.542 55.7832 424.104 55.7832 cv
423.834 55.7832 423.606 55.7056 423.48 55.5732 cv
423.402 55.4834 423.366 55.3936 423.336 55.1714 cv
422.809 55.1714 li
422.832 55.8975 423.24 56.2451 424.063 56.2451 cv
424.854 56.2451 425.358 55.8555 425.358 55.2495 cv
425.358 54.7813 425.095 54.5234 424.471 54.3735 cv
423.99 54.2593 li
423.582 54.1636 423.408 54.0313 423.408 53.8096 cv
423.408 53.5215 423.666 53.3354 424.074 53.3354 cv
424.477 53.3354 424.692 53.5093 424.704 53.8394 cv
425.232 53.8394 li
f
434.762 50.5034 mo
432.278 50.5034 li
432.278 48.0195 li
431.438 48.0195 li
431.438 50.5034 li
428.954 50.5034 li
428.954 51.3433 li
431.438 51.3433 li
431.438 53.8271 li
432.278 53.8271 li
432.278 51.3433 li
434.762 51.3433 li
434.762 50.5034 li
f
174.728 45.1699 mo
173.528 46.7417 172.772 48.9258 172.772 50.8096 cv
172.772 52.7056 173.528 54.8892 174.728 56.4614 cv
175.388 56.4614 li
174.332 54.7451 173.744 52.7295 173.744 50.8096 cv
173.744 48.9014 174.332 46.8735 175.388 45.1699 cv
174.728 45.1699 li
f
186.204 50.1733 mo
183.348 50.1733 li
183.348 51.0376 li
186.204 51.0376 li
186.204 50.1733 li
f
189.912 47.8574 mo
189.912 53.9175 li
190.967 53.9175 li
190.967 45.4097 li
190.271 45.4097 li
189.899 46.7178 189.659 46.8975 188.027 47.1016 cv
188.027 47.8574 li
189.912 47.8574 li
f
194.599 56.4614 mo
195.799 54.8892 196.555 52.7056 196.555 50.8213 cv
196.555 48.9258 195.799 46.7417 194.599 45.1699 cv
193.939 45.1699 li
194.995 46.8857 195.583 48.9014 195.583 50.8213 cv
195.583 52.7295 194.995 54.7573 193.939 56.4614 cv
194.599 56.4614 li
f
178.248 45.1699 mo
177.252 45.1699 li
177.252 53.9175 li
178.248 53.9175 li
178.248 51.4692 li
179.22 50.5098 li
181.344 53.9175 li
182.58 53.9175 li
180.012 49.8018 li
182.196 47.6299 li
180.912 47.6299 li
178.248 50.2935 li
178.248 45.1699 li
f
201.693 46.1538 mo
204.562 46.1538 li
204.562 45.1699 li
197.698 45.1699 li
197.698 46.1538 li
200.578 46.1538 li
200.578 53.9175 li
201.693 53.9175 li
201.693 46.1538 li
f
207.083 54.0493 mo
207.078 53.4316 206.669 53.0835 205.944 53.0835 cv
205.211 53.0835 204.738 53.4614 204.738 54.0435 cv
204.738 54.5352 204.99 54.7695 205.733 54.9492 cv
206.202 55.0635 li
206.55 55.1475 206.688 55.2734 206.688 55.5015 cv
206.688 55.7954 206.394 55.9932 205.956 55.9932 cv
205.686 55.9932 205.458 55.9155 205.332 55.7832 cv
205.254 55.6934 205.218 55.6035 205.188 55.3813 cv
204.66 55.3813 li
204.684 56.1074 205.092 56.4551 205.914 56.4551 cv
206.706 56.4551 207.209 56.0654 207.209 55.4595 cv
207.209 54.9912 206.946 54.7334 206.322 54.5835 cv
205.842 54.4692 li
205.434 54.3735 205.26 54.2412 205.26 54.0195 cv
205.26 53.7314 205.518 53.5454 205.926 53.5454 cv
206.328 53.5454 206.543 53.7192 206.556 54.0493 cv
207.083 54.0493 li
f
216.613 50.7134 mo
214.129 50.7134 li
214.129 48.2295 li
213.29 48.2295 li
213.29 50.7134 li
210.806 50.7134 li
210.806 51.5537 li
213.29 51.5537 li
213.29 54.0371 li
214.129 54.0371 li
214.129 51.5537 li
216.613 51.5537 li
216.613 50.7134 li
f
66.7295 45.1699 mo
65.5298 46.7417 64.7734 48.9258 64.7734 50.8096 cv
64.7734 52.7056 65.5298 54.8892 66.7295 56.4614 cv
67.3896 56.4614 li
66.3335 54.7451 65.7456 52.7295 65.7456 50.8096 cv
65.7456 48.9014 66.3335 46.8735 67.3896 45.1699 cv
66.7295 45.1699 li
f
78.2036 50.1733 mo
75.3477 50.1733 li
75.3477 51.0376 li
78.2036 51.0376 li
78.2036 50.1733 li
f
84.875 52.8735 mo
80.3989 52.8735 li
80.5073 52.1772 80.8911 51.7334 81.9351 51.1216 cv
83.1353 50.4736 li
84.3228 49.8257 84.9351 48.9497 84.9351 47.9058 cv
84.9351 47.1978 84.647 46.5376 84.1431 46.0815 cv
83.6392 45.6255 83.0151 45.4097 82.2109 45.4097 cv
81.1313 45.4097 80.3271 45.7939 79.8594 46.5137 cv
79.5591 46.9697 79.4272 47.4976 79.4033 48.3613 cv
80.459 48.3613 li
80.4951 47.7856 80.5674 47.4375 80.7109 47.1616 cv
80.9873 46.6455 81.5391 46.3335 82.1753 46.3335 cv
83.1353 46.3335 83.855 47.0176 83.855 47.9297 cv
83.855 48.6016 83.459 49.1777 82.7031 49.6094 cv
81.5991 50.2334 li
79.8232 51.2412 79.3071 52.0454 79.2114 53.9175 cv
84.875 53.9175 li
84.875 52.8735 li
f
86.5986 56.4614 mo
87.7983 54.8892 88.5547 52.7056 88.5547 50.8213 cv
88.5547 48.9258 87.7983 46.7417 86.5986 45.1699 cv
85.9385 45.1699 li
86.9946 46.8857 87.5825 48.9014 87.5825 50.8213 cv
87.5825 52.7295 86.9946 54.7573 85.9385 56.4614 cv
86.5986 56.4614 li
f
70.2476 45.1699 mo
69.2515 45.1699 li
69.2515 53.9175 li
70.2476 53.9175 li
70.2476 51.4692 li
71.2197 50.5098 li
73.3433 53.9175 li
74.5791 53.9175 li
72.0112 49.8018 li
74.1953 47.6299 li
72.9116 47.6299 li
70.2476 50.2935 li
70.2476 45.1699 li
f
93.6943 46.1538 mo
96.562 46.1538 li
96.562 45.1699 li
89.6982 45.1699 li
89.6982 46.1538 li
92.5781 46.1538 li
92.5781 53.9175 li
93.6943 53.9175 li
93.6943 46.1538 li
f
99.0845 54.0493 mo
99.0781 53.4316 98.6704 53.0835 97.9443 53.0835 cv
97.2124 53.0835 96.7383 53.4614 96.7383 54.0435 cv
96.7383 54.5352 96.9902 54.7695 97.7344 54.9492 cv
98.2021 55.0635 li
98.5503 55.1475 98.6885 55.2734 98.6885 55.5015 cv
98.6885 55.7954 98.3945 55.9932 97.9565 55.9932 cv
97.6865 55.9932 97.4585 55.9155 97.3325 55.7832 cv
97.2544 55.6934 97.2183 55.6035 97.1885 55.3813 cv
96.6602 55.3813 li
96.6846 56.1074 97.0923 56.4551 97.9141 56.4551 cv
98.7061 56.4551 99.2104 56.0654 99.2104 55.4595 cv
99.2104 54.9912 98.9463 54.7334 98.3223 54.5835 cv
97.8423 54.4692 li
97.4346 54.3735 97.2603 54.2412 97.2603 54.0195 cv
97.2603 53.7314 97.5186 53.5454 97.9263 53.5454 cv
98.3281 53.5454 98.5444 53.7192 98.5562 54.0493 cv
99.0845 54.0493 li
f
108.614 50.7134 mo
106.13 50.7134 li
106.13 48.2295 li
105.29 48.2295 li
105.29 50.7134 li
102.806 50.7134 li
102.806 51.5537 li
105.29 51.5537 li
105.29 54.0371 li
106.13 54.0371 li
106.13 51.5537 li
108.614 51.5537 li
108.614 50.7134 li
f
3.05371 13.4736 mo
1.4541 15.5698 .445801 18.4819 .445801 20.9937 cv
.445801 23.5215 1.4541 26.4336 3.05371 28.5293 cv
3.93408 28.5293 li
2.52588 26.2417 1.74219 23.5537 1.74219 20.9937 cv
1.74219 18.4497 2.52588 15.7461 3.93408 13.4736 cv
3.05371 13.4736 li
f
8.76563 17.0576 mo
8.76563 25.1377 li
10.1733 25.1377 li
10.1733 13.7939 li
9.24561 13.7939 li
8.74951 15.5381 8.42969 15.7778 6.25342 16.0498 cv
6.25342 17.0576 li
8.76563 17.0576 li
f
15.0156 28.5293 mo
16.6157 26.4336 17.6235 23.5215 17.6235 21.0098 cv
17.6235 18.4819 16.6157 15.5698 15.0156 13.4736 cv
14.1357 13.4736 li
15.5435 15.7617 16.3276 18.4497 16.3276 21.0098 cv
16.3276 23.5537 15.5435 26.2573 14.1357 28.5293 cv
15.0156 28.5293 li
f
3.05371 58.0938 mo
1.4541 60.1895 .445801 63.1016 .445801 65.6133 cv
.445801 68.1411 1.4541 71.0532 3.05371 73.1489 cv
3.93408 73.1489 li
2.52588 70.8613 1.74219 68.1733 1.74219 65.6133 cv
1.74219 63.0693 2.52588 60.3657 3.93408 58.0938 cv
3.05371 58.0938 li
f
12.7173 68.3652 mo
6.74951 68.3652 li
6.89355 67.4375 7.40576 66.8452 8.79736 66.0293 cv
10.3975 65.1655 li
11.9814 64.3013 12.7974 63.1333 12.7974 61.7417 cv
12.7974 60.7974 12.4136 59.9175 11.7412 59.3096 cv
11.0693 58.7017 10.2373 58.4136 9.16553 58.4136 cv
7.72559 58.4136 6.65332 58.9258 6.02979 59.8857 cv
5.62939 60.4937 5.45361 61.1973 5.42139 62.3496 cv
6.82959 62.3496 li
6.87744 61.5815 6.97363 61.1177 7.16553 60.7495 cv
7.53369 60.0615 8.26953 59.6455 9.11768 59.6455 cv
10.3975 59.6455 11.3574 60.5576 11.3574 61.7734 cv
11.3574 62.6694 10.8296 63.4375 9.82129 64.0137 cv
8.34961 64.8452 li
5.98145 66.1895 5.29346 67.2612 5.16553 69.7573 cv
12.7173 69.7573 li
12.7173 68.3652 li
f
15.0156 73.1489 mo
16.6157 71.0532 17.6235 68.1411 17.6235 65.6294 cv
17.6235 63.1016 16.6157 60.1895 15.0156 58.0938 cv
14.1357 58.0938 li
15.5435 60.3813 16.3276 63.0693 16.3276 65.6294 cv
16.3276 68.1733 15.5435 70.8774 14.1357 73.1489 cv
15.0156 73.1489 li
f
35.252 113.827 mo
448.074 113.827 li
f
35.252 113.827 mo
448.074 113.827 li
@
447.664 111.188 mo
452.444 113.827 li
447.664 116.457 li
447.664 111.188 li
447.664 111.188 li
cp
f
0 lw
447.664 111.188 mo
452.444 113.827 li
447.664 116.457 li
447.664 111.188 li
447.664 111.188 li
cp
@
50.7046 106.867 mo
50.7046 119.677 li
f
.216 lw
50.7046 106.867 mo
50.7046 119.677 li
@
158.706 106.867 mo
158.706 119.677 li
f
158.706 106.867 mo
158.706 119.677 li
@
266.705 106.867 mo
266.705 119.677 li
f
266.705 106.867 mo
266.705 119.677 li
@
374.705 106.867 mo
374.705 119.677 li
f
374.705 106.867 mo
374.705 119.677 li
@
253.727 92.2393 mo
252.731 92.2393 li
252.731 100.987 li
253.727 100.987 li
253.727 98.5391 li
254.698 97.5791 li
256.822 100.987 li
258.058 100.987 li
255.49 96.8711 li
257.674 94.6992 li
256.39 94.6992 li
253.727 97.3633 li
253.727 92.2393 li
f
262.28 93.2236 mo
265.147 93.2236 li
265.147 92.2393 li
258.285 92.2393 li
258.285 93.2236 li
261.164 93.2236 li
261.164 100.987 li
262.28 100.987 li
262.28 93.2236 li
f
267.912 101.119 mo
267.906 100.501 267.499 100.153 266.772 100.153 cv
266.041 100.153 265.567 100.531 265.567 101.113 cv
265.567 101.605 265.819 101.839 266.563 102.02 cv
267.03 102.133 li
267.379 102.217 267.517 102.343 267.517 102.571 cv
267.517 102.865 267.223 103.063 266.785 103.063 cv
266.515 103.063 266.287 102.985 266.161 102.854 cv
266.083 102.763 266.047 102.673 266.017 102.451 cv
265.489 102.451 li
265.514 103.177 265.921 103.525 266.743 103.525 cv
267.534 103.525 268.038 103.135 268.038 102.529 cv
268.038 102.062 267.774 101.803 267.15 101.653 cv
266.671 101.539 li
266.263 101.443 266.089 101.312 266.089 101.089 cv
266.089 100.801 266.347 100.615 266.755 100.615 cv
267.156 100.615 267.373 100.789 267.385 101.119 cv
267.912 101.119 li
f
277.432 97.7832 mo
274.948 97.7832 li
274.948 95.2988 li
274.108 95.2988 li
274.108 97.7832 li
271.625 97.7832 li
271.625 98.623 li
274.108 98.623 li
274.108 101.107 li
274.948 101.107 li
274.948 98.623 li
277.432 98.623 li
277.432 97.7832 li
f
348.736 92.249 mo
347.537 93.8213 346.781 96.0049 346.781 97.8896 cv
346.781 99.7852 347.537 101.969 348.736 103.541 cv
349.396 103.541 li
348.341 101.825 347.753 99.8096 347.753 97.8896 cv
347.753 95.9814 348.341 93.9531 349.396 92.249 cv
348.736 92.249 li
f
363.213 97.793 mo
360.729 97.793 li
360.729 95.3096 li
359.889 95.3096 li
359.889 97.793 li
357.404 97.793 li
357.404 98.6328 li
359.889 98.6328 li
359.889 101.117 li
360.729 101.117 li
360.729 98.6328 li
363.213 98.6328 li
363.213 97.793 li
f
366.92 94.9375 mo
366.92 100.997 li
367.977 100.997 li
367.977 92.4893 li
367.28 92.4893 li
366.908 93.7969 366.668 93.9775 365.036 94.1816 cv
365.036 94.9375 li
366.92 94.9375 li
f
371.607 103.541 mo
372.808 101.969 373.563 99.7852 373.563 97.9014 cv
373.563 96.0049 372.808 93.8213 371.607 92.249 cv
370.947 92.249 li
372.004 93.9648 372.592 95.9814 372.592 97.9014 cv
372.592 99.8096 372.004 101.837 370.947 103.541 cv
371.607 103.541 li
f
352.257 92.249 mo
351.261 92.249 li
351.261 100.997 li
352.257 100.997 li
352.257 98.5488 li
353.229 97.5889 li
355.353 100.997 li
356.589 100.997 li
354.021 96.8809 li
356.204 94.709 li
354.921 94.709 li
352.257 97.373 li
352.257 92.249 li
f
381.032 93.2334 mo
383.9 93.2334 li
383.9 92.249 li
377.037 92.249 li
377.037 93.2334 li
379.917 93.2334 li
379.917 100.997 li
381.032 100.997 li
381.032 93.2334 li
f
386.412 101.129 mo
386.406 100.511 385.998 100.163 385.272 100.163 cv
384.541 100.163 384.066 100.541 384.066 101.123 cv
384.066 101.615 384.318 101.849 385.063 102.029 cv
385.53 102.144 li
385.879 102.228 386.017 102.354 386.017 102.581 cv
386.017 102.875 385.723 103.073 385.284 103.073 cv
385.015 103.073 384.786 102.995 384.66 102.863 cv
384.583 102.773 384.547 102.683 384.517 102.461 cv
383.988 102.461 li
384.013 103.188 384.421 103.535 385.242 103.535 cv
386.034 103.535 386.538 103.146 386.538 102.539 cv
386.538 102.071 386.274 101.813 385.65 101.663 cv
385.171 101.549 li
384.763 101.453 384.589 101.321 384.589 101.1 cv
384.589 100.812 384.847 100.625 385.255 100.625 cv
385.656 100.625 385.872 100.799 385.885 101.129 cv
386.412 101.129 li
f
395.942 97.793 mo
393.458 97.793 li
393.458 95.3096 li
392.618 95.3096 li
392.618 97.793 li
390.135 97.793 li
390.135 98.6328 li
392.618 98.6328 li
392.618 101.117 li
393.458 101.117 li
393.458 98.6328 li
395.942 98.6328 li
395.942 97.793 li
f
135.908 92.4697 mo
134.708 94.041 133.952 96.2256 133.952 98.1094 cv
133.952 100.005 134.708 102.189 135.908 103.761 cv
136.568 103.761 li
135.512 102.045 134.924 100.029 134.924 98.1094 cv
134.924 96.2012 135.512 94.1738 136.568 92.4697 cv
135.908 92.4697 li
f
147.384 97.4736 mo
144.528 97.4736 li
144.528 98.3369 li
147.384 98.3369 li
147.384 97.4736 li
f
151.092 95.1572 mo
151.092 101.217 li
152.147 101.217 li
152.147 92.709 li
151.452 92.709 li
151.08 94.0176 150.84 94.1973 149.208 94.4014 cv
149.208 95.1572 li
151.092 95.1572 li
f
155.779 103.761 mo
156.979 102.189 157.735 100.005 157.735 98.1211 cv
157.735 96.2256 156.979 94.041 155.779 92.4697 cv
155.119 92.4697 li
156.175 94.1855 156.763 96.2012 156.763 98.1211 cv
156.763 100.029 156.175 102.057 155.119 103.761 cv
155.779 103.761 li
f
139.428 92.4697 mo
138.432 92.4697 li
138.432 101.217 li
139.428 101.217 li
139.428 98.7695 li
140.4 97.8096 li
142.524 101.217 li
143.76 101.217 li
141.192 97.1016 li
143.376 94.9297 li
142.092 94.9297 li
139.428 97.5928 li
139.428 92.4697 li
f
162.874 93.4531 mo
165.742 93.4531 li
165.742 92.4697 li
158.878 92.4697 li
158.878 93.4531 li
161.758 93.4531 li
161.758 101.217 li
162.874 101.217 li
162.874 93.4531 li
f
168.264 101.35 mo
168.258 100.731 167.85 100.383 167.124 100.383 cv
166.392 100.383 165.918 100.761 165.918 101.343 cv
165.918 101.835 166.17 102.069 166.914 102.249 cv
167.382 102.363 li
167.73 102.447 167.868 102.573 167.868 102.801 cv
167.868 103.095 167.574 103.293 167.136 103.293 cv
166.866 103.293 166.638 103.215 166.512 103.083 cv
166.434 102.993 166.398 102.903 166.368 102.681 cv
165.84 102.681 li
165.864 103.407 166.272 103.755 167.094 103.755 cv
167.886 103.755 168.39 103.365 168.39 102.759 cv
168.39 102.291 168.126 102.033 167.502 101.883 cv
167.022 101.77 li
166.614 101.673 166.44 101.541 166.44 101.319 cv
166.44 101.031 166.698 100.845 167.106 100.845 cv
167.508 100.845 167.724 101.02 167.736 101.35 cv
168.264 101.35 li
f
177.793 98.0137 mo
175.31 98.0137 li
175.31 95.5293 li
174.47 95.5293 li
174.47 98.0137 li
171.986 98.0137 li
171.986 98.8535 li
174.47 98.8535 li
174.47 101.337 li
175.31 101.337 li
175.31 98.8535 li
177.793 98.8535 li
177.793 98.0137 li
f
27.9126 92.4697 mo
26.7129 94.041 25.957 96.2256 25.957 98.1094 cv
25.957 100.005 26.7129 102.189 27.9126 103.761 cv
28.5728 103.761 li
27.5166 102.045 26.9287 100.029 26.9287 98.1094 cv
26.9287 96.2012 27.5166 94.1738 28.5728 92.4697 cv
27.9126 92.4697 li
f
39.3867 97.4736 mo
36.5308 97.4736 li
36.5308 98.3369 li
39.3867 98.3369 li
39.3867 97.4736 li
f
46.0581 100.173 mo
41.5825 100.173 li
41.6904 99.4775 42.0742 99.0332 43.1182 98.4209 cv
44.3184 97.7734 li
45.5063 97.125 46.1182 96.249 46.1182 95.2051 cv
46.1182 94.4971 45.8301 93.8369 45.3262 93.3809 cv
44.8223 92.9258 44.1982 92.709 43.3945 92.709 cv
42.3145 92.709 41.5103 93.0938 41.0425 93.8135 cv
40.7422 94.2695 40.6104 94.7969 40.5864 95.6611 cv
41.6426 95.6611 li
41.6782 95.085 41.7505 94.7373 41.8945 94.4609 cv
42.1704 93.9453 42.7222 93.6338 43.3584 93.6338 cv
44.3184 93.6338 45.0381 94.3174 45.0381 95.2295 cv
45.0381 95.9014 44.6421 96.4775 43.8862 96.9092 cv
42.7822 97.5332 li
41.0063 98.541 40.4902 99.3447 40.3945 101.217 cv
46.0581 101.217 li
46.0581 100.173 li
f
47.7817 103.761 mo
48.9819 102.189 49.7378 100.005 49.7378 98.1211 cv
49.7378 96.2256 48.9819 94.041 47.7817 92.4697 cv
47.1221 92.4697 li
48.1777 94.1855 48.7656 96.2012 48.7656 98.1211 cv
48.7656 100.029 48.1777 102.057 47.1221 103.761 cv
47.7817 103.761 li
f
31.4307 92.4697 mo
30.4346 92.4697 li
30.4346 101.217 li
31.4307 101.217 li
31.4307 98.7695 li
32.4028 97.8096 li
34.5269 101.217 li
35.7627 101.217 li
33.1948 97.1016 li
35.3784 94.9297 li
34.0947 94.9297 li
31.4307 97.5928 li
31.4307 92.4697 li
f
54.8794 93.4531 mo
57.7476 93.4531 li
57.7476 92.4697 li
50.8838 92.4697 li
50.8838 93.4531 li
53.7637 93.4531 li
53.7637 101.217 li
54.8794 101.217 li
54.8794 93.4531 li
f
60.2676 101.35 mo
60.2617 100.731 59.8535 100.383 59.1274 100.383 cv
58.3955 100.383 57.9214 100.761 57.9214 101.343 cv
57.9214 101.835 58.1738 102.069 58.9175 102.249 cv
59.3857 102.363 li
59.7334 102.447 59.8716 102.573 59.8716 102.801 cv
59.8716 103.095 59.5776 103.293 59.1396 103.293 cv
58.8696 103.293 58.6416 103.215 58.5156 103.083 cv
58.4375 102.993 58.4014 102.903 58.3716 102.681 cv
57.8438 102.681 li
57.8677 103.407 58.2754 103.755 59.0977 103.755 cv
59.8896 103.755 60.3936 103.365 60.3936 102.759 cv
60.3936 102.291 60.1294 102.033 59.5054 101.883 cv
59.0254 101.77 li
58.6177 101.673 58.4434 101.541 58.4434 101.319 cv
58.4434 101.031 58.7017 100.845 59.1094 100.845 cv
59.5117 100.845 59.7275 101.02 59.7397 101.35 cv
60.2676 101.35 li
f
69.7954 98.0137 mo
67.3115 98.0137 li
67.3115 95.5293 li
66.4717 95.5293 li
66.4717 98.0137 li
63.9878 98.0137 li
63.9878 98.8535 li
66.4717 98.8535 li
66.4717 101.337 li
67.3115 101.337 li
67.3115 98.8535 li
69.7954 98.8535 li
69.7954 98.0137 li
f
2.60791 105.833 mo
1.00781 107.93 0 110.841 0 113.354 cv
0 115.881 1.00781 118.793 2.60791 120.889 cv
3.48779 120.889 li
2.08008 118.601 1.2959 115.913 1.2959 113.354 cv
1.2959 110.81 2.08008 108.105 3.48779 105.833 cv
2.60791 105.833 li
f
7.71143 112.297 mo
7.8877 112.297 li
8.47949 112.281 li
10.0313 112.281 10.8315 112.985 10.8315 114.345 cv
10.8315 115.769 9.95166 116.617 8.47949 116.617 cv
6.94336 116.617 6.19141 115.849 6.0957 114.201 cv
4.6875 114.201 li
4.75146 115.113 4.91162 115.705 5.18359 116.217 cv
5.75977 117.305 6.87939 117.865 8.43164 117.865 cv
10.7676 117.865 12.2715 116.473 12.2715 114.329 cv
12.2715 112.889 11.7114 112.089 10.3516 111.625 cv
11.4072 111.209 11.9355 110.409 11.9355 109.273 cv
11.9355 107.321 10.6396 106.153 8.47949 106.153 cv
6.19141 106.153 4.97559 107.401 4.92773 109.817 cv
6.33545 109.817 li
6.35156 109.129 6.41553 108.745 6.5918 108.394 cv
6.91162 107.77 7.61572 107.385 8.49561 107.385 cv
9.74365 107.385 10.4956 108.121 10.4956 109.321 cv
10.4956 110.121 10.2075 110.602 9.5835 110.857 cv
9.19922 111.018 8.70361 111.081 7.71143 111.097 cv
7.71143 112.297 li
f
14.5693 120.889 mo
16.1694 118.793 17.1772 115.881 17.1772 113.369 cv
17.1772 110.841 16.1694 107.93 14.5693 105.833 cv
13.6895 105.833 li
15.0977 108.121 15.8813 110.81 15.8813 113.369 cv
15.8813 115.913 15.0977 118.617 13.6895 120.889 cv
14.5693 120.889 li
f
35.252 158.486 mo
448.074 158.486 li
f
35.252 158.486 mo
448.074 158.486 li
@
447.664 155.847 mo
452.444 158.486 li
447.664 161.117 li
447.664 155.847 li
447.664 155.847 li
cp
f
0 lw
447.664 155.847 mo
452.444 158.486 li
447.664 161.117 li
447.664 155.847 li
447.664 155.847 li
cp
@
57.9077 151.517 mo
57.9077 164.337 li
f
.216 lw
57.9077 151.517 mo
57.9077 164.337 li
@
173.106 151.517 mo
173.106 164.337 li
f
173.106 151.517 mo
173.106 164.337 li
@
288.306 151.517 mo
288.306 164.337 li
f
288.306 151.517 mo
288.306 164.337 li
@
403.505 151.517 mo
403.505 164.337 li
f
403.505 151.517 mo
403.505 164.337 li
@
275.327 136.899 mo
274.331 136.899 li
274.331 145.646 li
275.327 145.646 li
275.327 143.199 li
276.299 142.239 li
278.423 145.646 li
279.659 145.646 li
277.091 141.531 li
279.275 139.359 li
277.991 139.359 li
275.327 142.023 li
275.327 136.899 li
f
283.883 137.883 mo
286.751 137.883 li
286.751 136.899 li
279.887 136.899 li
279.887 137.883 li
282.767 137.883 li
282.767 145.646 li
283.883 145.646 li
283.883 137.883 li
f
289.513 145.779 mo
289.507 145.161 289.1 144.813 288.373 144.813 cv
287.642 144.813 287.167 145.19 287.167 145.772 cv
287.167 146.265 287.419 146.499 288.163 146.679 cv
288.631 146.793 li
288.979 146.877 289.117 147.003 289.117 147.23 cv
289.117 147.524 288.823 147.723 288.385 147.723 cv
288.115 147.723 287.887 147.645 287.761 147.513 cv
287.684 147.423 287.647 147.333 287.617 147.11 cv
287.089 147.11 li
287.113 147.837 287.521 148.185 288.343 148.185 cv
289.135 148.185 289.639 147.795 289.639 147.188 cv
289.639 146.721 289.375 146.463 288.751 146.313 cv
288.271 146.199 li
287.863 146.103 287.689 145.971 287.689 145.749 cv
287.689 145.461 287.947 145.274 288.355 145.274 cv
288.757 145.274 288.973 145.449 288.985 145.779 cv
289.513 145.779 li
f
299.043 142.443 mo
296.559 142.443 li
296.559 139.959 li
295.719 139.959 li
295.719 142.443 li
293.235 142.443 li
293.235 143.283 li
295.719 143.283 li
295.719 145.767 li
296.559 145.767 li
296.559 143.283 li
299.043 143.283 li
299.043 142.443 li
f
377.536 136.419 mo
376.337 137.991 375.581 140.175 375.581 142.059 cv
375.581 143.955 376.337 146.139 377.536 147.711 cv
378.196 147.711 li
377.141 145.995 376.553 143.979 376.553 142.059 cv
376.553 140.151 377.141 138.123 378.196 136.419 cv
377.536 136.419 li
f
392.013 141.963 mo
389.528 141.963 li
389.528 139.479 li
388.688 139.479 li
388.688 141.963 li
386.204 141.963 li
386.204 142.803 li
388.688 142.803 li
388.688 145.287 li
389.528 145.287 li
389.528 142.803 li
392.013 142.803 li
392.013 141.963 li
f
395.72 139.107 mo
395.72 145.167 li
396.776 145.167 li
396.776 136.659 li
396.08 136.659 li
395.708 137.967 395.468 138.147 393.836 138.351 cv
393.836 139.107 li
395.72 139.107 li
f
400.407 147.711 mo
401.607 146.139 402.363 143.955 402.363 142.071 cv
402.363 140.175 401.607 137.991 400.407 136.419 cv
399.747 136.419 li
400.804 138.135 401.392 140.151 401.392 142.071 cv
401.392 143.979 400.804 146.007 399.747 147.711 cv
400.407 147.711 li
f
381.057 136.419 mo
380.061 136.419 li
380.061 145.167 li
381.057 145.167 li
381.057 142.719 li
382.028 141.759 li
384.152 145.167 li
385.389 145.167 li
382.82 141.051 li
385.004 138.879 li
383.721 138.879 li
381.057 141.543 li
381.057 136.419 li
f
409.832 137.403 mo
412.7 137.403 li
412.7 136.419 li
405.837 136.419 li
405.837 137.403 li
408.717 137.403 li
408.717 145.167 li
409.832 145.167 li
409.832 137.403 li
f
415.212 145.299 mo
415.206 144.681 414.798 144.333 414.072 144.333 cv
413.341 144.333 412.866 144.711 412.866 145.293 cv
412.866 145.785 413.118 146.019 413.862 146.199 cv
414.33 146.313 li
414.679 146.396 414.816 146.522 414.816 146.751 cv
414.816 147.045 414.522 147.243 414.084 147.243 cv
413.814 147.243 413.586 147.165 413.46 147.033 cv
413.383 146.942 413.347 146.853 413.316 146.631 cv
412.788 146.631 li
412.813 147.356 413.221 147.705 414.042 147.705 cv
414.834 147.705 415.338 147.314 415.338 146.709 cv
415.338 146.241 415.074 145.982 414.45 145.833 cv
413.971 145.719 li
413.563 145.623 413.389 145.491 413.389 145.269 cv
413.389 144.98 413.646 144.795 414.055 144.795 cv
414.456 144.795 414.672 144.969 414.685 145.299 cv
415.212 145.299 li
f
424.742 141.963 mo
422.258 141.963 li
422.258 139.479 li
421.418 139.479 li
421.418 141.963 li
418.935 141.963 li
418.935 142.803 li
421.418 142.803 li
421.418 145.287 li
422.258 145.287 li
422.258 142.803 li
424.742 142.803 li
424.742 141.963 li
f
150.308 137.119 mo
149.108 138.691 148.352 140.875 148.352 142.759 cv
148.352 144.655 149.108 146.839 150.308 148.411 cv
150.968 148.411 li
149.912 146.694 149.324 144.679 149.324 142.759 cv
149.324 140.851 149.912 138.823 150.968 137.119 cv
150.308 137.119 li
f
161.784 142.123 mo
158.928 142.123 li
158.928 142.987 li
161.784 142.987 li
161.784 142.123 li
f
165.492 139.807 mo
165.492 145.867 li
166.547 145.867 li
166.547 137.359 li
165.852 137.359 li
165.479 138.667 165.24 138.847 163.607 139.051 cv
163.607 139.807 li
165.492 139.807 li
f
170.179 148.411 mo
171.379 146.839 172.135 144.655 172.135 142.771 cv
172.135 140.875 171.379 138.691 170.179 137.119 cv
169.519 137.119 li
170.575 138.835 171.163 140.851 171.163 142.771 cv
171.163 144.679 170.575 146.707 169.519 148.411 cv
170.179 148.411 li
f
153.828 137.119 mo
152.832 137.119 li
152.832 145.867 li
153.828 145.867 li
153.828 143.419 li
154.8 142.459 li
156.924 145.867 li
158.16 145.867 li
155.592 141.751 li
157.776 139.579 li
156.492 139.579 li
153.828 142.243 li
153.828 137.119 li
f
177.284 138.104 mo
180.152 138.104 li
180.152 137.119 li
173.288 137.119 li
173.288 138.104 li
176.168 138.104 li
176.168 145.867 li
177.284 145.867 li
177.284 138.104 li
f
182.664 145.999 mo
182.658 145.381 182.25 145.033 181.524 145.033 cv
180.792 145.033 180.318 145.411 180.318 145.993 cv
180.318 146.484 180.57 146.719 181.314 146.898 cv
181.782 147.013 li
182.13 147.097 182.268 147.223 182.268 147.451 cv
182.268 147.745 181.974 147.942 181.536 147.942 cv
181.266 147.942 181.038 147.865 180.912 147.732 cv
180.834 147.643 180.798 147.553 180.768 147.331 cv
180.24 147.331 li
180.264 148.057 180.672 148.404 181.494 148.404 cv
182.286 148.404 182.79 148.015 182.79 147.409 cv
182.79 146.94 182.526 146.683 181.902 146.533 cv
181.422 146.419 li
181.014 146.323 180.84 146.19 180.84 145.969 cv
180.84 145.681 181.098 145.495 181.506 145.495 cv
181.908 145.495 182.124 145.669 182.136 145.999 cv
182.664 145.999 li
f
192.194 142.663 mo
189.709 142.663 li
189.709 140.179 li
188.87 140.179 li
188.87 142.663 li
186.386 142.663 li
186.386 143.503 li
188.87 143.503 li
188.87 145.986 li
189.709 145.986 li
189.709 143.503 li
192.194 143.503 li
192.194 142.663 li
f
35.1128 137.119 mo
33.9126 138.691 33.1567 140.875 33.1567 142.759 cv
33.1567 144.655 33.9126 146.839 35.1128 148.411 cv
35.7725 148.411 li
34.7168 146.694 34.1289 144.679 34.1289 142.759 cv
34.1289 140.851 34.7168 138.823 35.7725 137.119 cv
35.1128 137.119 li
f
46.5864 142.123 mo
43.7305 142.123 li
43.7305 142.987 li
46.5864 142.987 li
46.5864 142.123 li
f
53.2583 144.823 mo
48.7822 144.823 li
48.8901 144.127 49.2744 143.683 50.3184 143.071 cv
51.5181 142.423 li
52.7061 141.775 53.3184 140.899 53.3184 139.855 cv
53.3184 139.147 53.0303 138.487 52.5264 138.031 cv
52.022 137.575 51.3984 137.359 50.5942 137.359 cv
49.5142 137.359 48.7104 137.743 48.2422 138.463 cv
47.9424 138.919 47.8105 139.447 47.7861 140.311 cv
48.8423 140.311 li
48.8784 139.735 48.9502 139.387 49.0942 139.111 cv
49.3701 138.595 49.9224 138.283 50.5581 138.283 cv
51.5181 138.283 52.2383 138.967 52.2383 139.879 cv
52.2383 140.551 51.8423 141.127 51.0864 141.559 cv
49.9824 142.183 li
48.2065 143.19 47.6904 143.995 47.5942 145.867 cv
53.2583 145.867 li
53.2583 144.823 li
f
54.9819 148.411 mo
56.1816 146.839 56.9375 144.655 56.9375 142.771 cv
56.9375 140.875 56.1816 138.691 54.9819 137.119 cv
54.3218 137.119 li
55.3779 138.835 55.9658 140.851 55.9658 142.771 cv
55.9658 144.679 55.3779 146.707 54.3218 148.411 cv
54.9819 148.411 li
f
38.6309 137.119 mo
37.6348 137.119 li
37.6348 145.867 li
38.6309 145.867 li
38.6309 143.419 li
39.6025 142.459 li
41.7266 145.867 li
42.9624 145.867 li
40.3945 141.751 li
42.5786 139.579 li
41.2944 139.579 li
38.6309 142.243 li
38.6309 137.119 li
f
62.0806 138.104 mo
64.9482 138.104 li
64.9482 137.119 li
58.0845 137.119 li
58.0845 138.104 li
60.9644 138.104 li
60.9644 145.867 li
62.0806 145.867 li
62.0806 138.104 li
f
67.4678 145.999 mo
67.4614 145.381 67.0537 145.033 66.3276 145.033 cv
65.5957 145.033 65.1216 145.411 65.1216 145.993 cv
65.1216 146.484 65.3735 146.719 66.1177 146.898 cv
66.5854 147.013 li
66.9336 147.097 67.0713 147.223 67.0713 147.451 cv
67.0713 147.745 66.7773 147.942 66.3394 147.942 cv
66.0693 147.942 65.8418 147.865 65.7158 147.732 cv
65.6377 147.643 65.6016 147.553 65.5718 147.331 cv
65.0435 147.331 li
65.0674 148.057 65.4756 148.404 66.2974 148.404 cv
67.0894 148.404 67.5938 148.015 67.5938 147.409 cv
67.5938 146.94 67.3296 146.683 66.7056 146.533 cv
66.2256 146.419 li
65.8174 146.323 65.6436 146.19 65.6436 145.969 cv
65.6436 145.681 65.9014 145.495 66.3096 145.495 cv
66.7114 145.495 66.9277 145.669 66.9395 145.999 cv
67.4678 145.999 li
f
76.9951 142.663 mo
74.5112 142.663 li
74.5112 140.179 li
73.6714 140.179 li
73.6714 142.663 li
71.1875 142.663 li
71.1875 143.503 li
73.6714 143.503 li
73.6714 145.986 li
74.5112 145.986 li
74.5112 143.503 li
76.9951 143.503 li
76.9951 142.663 li
f
2.60791 150.493 mo
1.00781 152.589 0 155.501 0 158.013 cv
0 160.541 1.00781 163.453 2.60791 165.549 cv
3.48779 165.549 li
2.08008 163.261 1.2959 160.572 1.2959 158.013 cv
1.2959 155.469 2.08008 152.765 3.48779 150.493 cv
2.60791 150.493 li
f
9.40723 158.173 mo
5.85547 158.173 li
9.40723 153.213 li
9.40723 158.173 li
9.40723 159.437 mo
9.40723 162.156 li
10.8154 162.156 li
10.8154 159.437 li
12.4951 159.437 li
12.4951 158.173 li
10.8154 158.173 li
10.8154 150.813 li
9.77539 150.813 li
4.62354 157.949 li
4.62354 159.437 li
9.40723 159.437 li
f
14.5693 165.549 mo
16.1694 163.453 17.1772 160.541 17.1772 158.029 cv
17.1772 155.501 16.1694 152.589 14.5693 150.493 cv
13.6895 150.493 li
15.0977 152.781 15.8813 155.469 15.8813 158.029 cv
15.8813 160.572 15.0977 163.276 13.6895 165.549 cv
14.5693 165.549 li
f
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 42 /asteriskmath putdup 116 /tau putdef/FontBBox {-167 -299 1094 827} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/asteriskmath <1C60D8A8C9B7A73DB9DE1B3CC10299FADD46195FC955FA61D6A39043BE3AB4393B6865A5D00916485ED62E4B41B89A3D11E1C05F1F7C1B230CED470EA677014CF67F359137B95AC02C9FBF3AB828D33528054FD3D5AA26BD1C5A523B5D20989E3899217CCDA5F2D99D98A4B350348DDE67AB2F2711FFA5C41F1FAD87FC9F42579923941381774987F5F9ED5B58275A09C5461A68A4B670887DCD63A7DB3B106B69FE56E6253A808FF902B42A4B3670113AC956EC1130F412F020750E954FC83D0A4A65798924CFCE29A5B563688ECBCDDA61F076134F32F8776D262DC939198C458204B692254636CC64A35993880C86E2CAEA2A1A3DBE2E07E021F045B2B21F988018D585126745AA590398E607A28FCECE691791F0AA2522F85E936A2C289362BF211C7B6939C85631F67B03011F974B018FABE46B60E2A8AE58A09F83EC05789096306005D7ED99F529BD9209DCED66E5485E4D7B06EE4359C95D311DCE29B9753E5D48CAAA> |-/tau <1C60D8A8C9B76427D01852E70A802F53B3332ED85B4602CB20E1C6FED338814DB7751C7927CD18A1BD79AB419809A2D6B3E35B03FEB9D8110F08F384A782DA2CFCFAA8B8132D5D0B0F4FA555B564AF418641C2B838C1661FDE86D0AB01CCFD77FA3E63E826A62A552A5BBE227D526A7CE93FFE3164ADD0309D3A10C154A1CEEF8B2F995D9ECAEAF4D9C7ADE502E507822BD4A89FC14DDD4D3D9E37D7B772D3D452BFC048BD19A84F8518CBD221DF582063AA924C5662446E2CE0EBE78DB43B122D2322F9BBC5B5879F79> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RCZIJW+Symbol /Symbol findfont ct_VMDictPut/RCZIJW+Symbol*1 [42{/.notdef}rp /asteriskmath 73{/.notdef}rp /tau 139{/.notdef}rp]RCZIJW+Symbol nfRCZIJW+Symbol*1 [16 0 0 -16 0 0 ]msf75.0913 102.761 mo(t)sh183.348 102.069 mo(t)sh283.319 100.997 mo(t)sh402.898 102.069 mo(t)sh81.8608 146.719 mo(t)sh197.698 145.987 mo(t)sh303.971 146.719 mo(t)sh428.955 145.033 mo(t)sh114 54.0835 mo(t)sh121 51.1733 mo(*)sh223.5 54.3184 mo(t)sh230.5 51.4087 mo(*)sh323.351 54.1523 mo(t)sh330.351 51.2427 mo(*)sh440.665 52.8638 mo(t)sh447.664 49.9536 mo(*)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/RCZIJW+Symbol*1 uf/RCZIJW+Symbol uf/Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 17.0%%AI8_CreatorVersion: 23.0.1%%For: (Neal Patwari) ()%%Title: (SamplingTimeCorrection.eps)%%CreationDate: 3/25/19 10:14 AM%%Canvassize: 16383%AI9_DataStream%Gb!R&GC/njnc4!N!8i>?HLE_5$j6hV64uTnQkG:5J_bbKO8IV6AD+J#)cP%'cL8LE/-/tD)3%+\R?9ro)RJLE4'cae=n82P2B:9D%]fp;[+4LM3&WP1?>.07#6kNKCkk.GtJS;t8#_V[K=""dPKR@UL4?5E>M!^m%OV;3=c]N"+g;gS25PS8`_roqeXrS)>2>O^>]>c3K%?58FS*^J-HT?Wa.o:EFP]A7d)9L\D+jkpDKXpL&_2Y]T(ot*?UU";6G*gc3WlZ"^-W0fI[THF&$1b%6DTE1,V^Ve+N;0`88[#)[$%ZkG\0KoN3DQ;9\h8H3>uBG'jtr]oFt-+P%")6agcgYgRrO,AVk(W0)lHIj;u]/>$[B`@fj6!$nKO+uR?pRN`>)FBe]7^N2W2Acm:%_r1TAa0Cm(CJ"FEe!:8e8l1<G)=#RTrX51U%0Sd7oSMG3Nba73DO6Gt1d+^SJf6WqetDr?5.8JoHa]&CmLp?!i7+8V!+@#%8(d6s%2Sro'/?[u^#hZmuKV6%([N2YD;s=^8_V/rW#_71&^'JCJ(q,H:OuD5_iU_)^#V6)[6*RT2TM$2rPNpY<^>-^Fb/0nt[@D7X(\VPf%k^t5="fR+S]\]U5'D4fE5)I_f_BEhO!iT/k"LT4'nSfVZ$n$Q:k%[#Po!iFO7!*&BjDp/3@1N@8"<q#/C9g+/[X%e$"*k?$,+s_k%d:WCuLqUe6$2",RB.*mIUJ^fSbHXkAIe_O`LN!-?pt"n(D_V[O7^YQ+==P#:^Hs)G.MRK266QbI@7I#r9Jd+"^]q[0d3pO\NP\T_%)uPAcE]I5OQ\./:3VXqfK4Q_F^;[<Q#hI!Lp`@=L*CMWV(X[jhU:7?Rqqgen(uZhn"ks/E@4BhU[\`1.C_?SuARLGS-Yt`b#uh_L%$%B`uYXS$p6:-&dOC=(*-Yta>$_P9o6(Eb##X9jDgBBfM)%;/Df`$Gd,9A'^+tg]-<"lYZ;3,B\Zm"dtEjh%]''LDg"ks8H+XGQi%W7C)Pl7r&MQ@eL6HPg`+eV3CCTC<Y5*U8.LM("-Ti$U&ZgBTr?0-Vi2Hq!fR7TK^9jfJBaI>6rQ>_f-ehcRUcQ6YZ<jbPOB(I;[1%$^G-"_(r6;XCT3!_:kj<kUgTmr.Lo.I)GY$StN[a':+3Odhl60B#bD@*5[6%S!@D_<`j'gPTracZG;J.[SILm&Troq#VY0VUn$fa%[V^hD=Gk(XTVMAI4o0p^7jA[=1[9&")[$2:ruq4"7Q[WF0s[R>)d+_a38$gMc,r0sJ$:gY6gRA,HC<kMf+3reQBSO2`sn>8Q<k=[%Jr=Ai]r\Modgu;0rqUs*%JL\;K2Wrka8JI,1r`o74lQC7J)N*Xc2C*2,0WFeM6OK7beHgU^#AsbJ(ZCLc2C*21rana4lQC7It[t#%c2C*24K!["T>SBqT;Z,EDtY"D$ejbOj8qUumfe*_6o'mD*^1+t_tctOkQATjSe1f/hnd(s)>o06@F)_-n.#4%hgf'Z:Bj"V919Cs%KFbo<0F.j3c?fU4CfCMrBAa"k:%fU/M]`"71G!EGK>A7pW=>Tb^+c8q6)SE(U"YSpN=f#\[l<c4,+Ql\0T-B,5Yhu)fN*Oe3<F3K%=G&^E!>Yd;LF@]!+N8/4+QY/hkZVCYIo-a'cTt4^B-qZY"5k]MF.1YcK'ipfgA#gD(8A5[plKN^ZYVe5:KUefn)u^M_4rGl98MGT%^F\Lqs#L%;JH[;S.)81D#ZE(-k[jY,)aG^^H1in+2jX2LT_+oWBt>2("Y^:28d%osW4%4O9L(8NoFh<?EX7sse,[WoIUgS-aeL6U%ZQ)mc:s&D<HK#=M(9tB3Zj?FWnNZ:dmXM+iVmf>1hc-)/ZWh2qitf@AgC<t86#E1=1-G;CRD'(cHpbT,TlGX^Uh)-rj'5nmL)H&Z%/0USEol*]&ZGsOe,_;r>NAVIV)TuG/)S]*1Ye#k7Nj1Xh(HuQJ*';_S]u?:*g4?Fp=Stu:OFCb6+AG.gaKrB"`@"B;+cXQX5mW$Z%X,l?NX(V4="k@-oZ,#Tq<[XR1NcYqdM7<d>8(dY+)*VIK**0*omuXEe+DsY1#PaJ%ap"\-=a6J!LUHq]QIGX0R[<utIj]n9lSXX]%/5(gi+Be&YJE=[O`$NnO-u82Ia4E>q?WN)T1^.VIX!q_Ro/)(Ya3`(E")ia]=&=AjXh`3n[%(L*($%jJs'kA:XT>&b1c!6s7cX@`%h1.<dqXeF=A"OWKGqV7S"?BcJNUjf=q<qHk)C*`s8/g,XaGajL*m`hRB2LK\:k,ft#3d,WP7kG5j05a`+m"Z!##F9uc]2V5+]uqL%1cdA2egRb4%-f#+BL\GH)pRlan1C`dZiXaF*g/nLBSLi$[DKGYN,\AY1T0DtT&H:2/Jlo[A9kChR4hQVY97_f[LD']A*au6A=f&1%k''kQbM:muoKMPYhO$Lk&'0%GpP]l"XI!=LGoo@21=F'VYH`6aDi>)'U-;"/an?S"dHl6*e2?m-gmS03,H]$j-;6(`BKXaBH1AtL%opV4_$(n+CBFN5>)24P'O[_P!:hHdPC$.YPF1lj^I#OI\R8Q_<4Bin1H$h&2T?Jk1bXC7abKYdCe1adLP'C#J=kl8oRCB,-foa.D%eMoNZG0q.X4iZ0uCjDmR4e.e[[[NJ,2#\Y9Q7GLuY\uMuiah/BjG4`]%+faq)#$bO>>26+4qd^&4XsM(M>E:@PCqX-TOFS"J[+U^%nt@%%Z@HOY1h1Ocb_r%lAMpaueNIUqJN]"*Pe>>'rd$<]DZTMi>pc"KAkC:fkI(6[5CZ^"g>Ucc"[:>a[93dEf4K$Gc*-:K'$DC8%0c%2r(]d+`Eo[FZr:b#D\3Z6mEfT"I^=.#S`8S5THt`FTp[=5,&GtR4^*^57OF'a]Ih=BWm*8:k"9mZKh&-R4G3:3jFLb`<mK,R4%*XMN+@C_sBmQ+QGj6iLRi2?oV6Z_:O,rI]#Ao$BJ2pR[Sol1oFKEY,t2)T7Q<@)liM,VqN!l%-7QFnur;jf3H?K3A0=V?uGH"G)r%=V?j;6q*08k`IBqE?@tfVtbX7;!obTO<E<l^i/uH5Yu7KMEN\FWu^WuEP3\/mN#%g%dXsK:h,,rVrKYm&k/u/!GGF+K\ZO"QLi)3%IA$'Y!EXs0LkZR(f9SNmM4$G(E7ai"I)"$u*pqP!rFWT'EeW/\Iu(4REtgjiS<[UaP14SC!)Uij!P`RBrT(JC5M-#sGg9^s4VE+o%a=6rZekQ&u=lUIt/!-pq"CHcgVcpDa#s.gNN;4'-26e;8CLVJFIN_Gtlh,9'>JB"R'>g;+SWR?6NVQLlP>F`W;a?M8f[,+]5mAm;%J[.KO9_oS"*'KfEs&q_i3AKp>o>0\GN5AGQ(60)#;bE+8'A`:6)P"f1>Cm&8iW1aFG5r.6K`XU82)ih#pmsGW8H/ZY%h%s<#9om^%B6YV(i-iooaXE[8.j3E-dIT,#>g'$3AQ5Ug$IsFkfQPkDM(U:*jb)fl=&[aMqu+sfX,T/LK23mDmhC>1i=gN&THT:a[)Td=DWa!%%goU&+!K9Bd9<?n^*7WGZ$M<=`n7C,&+#cS]q[-Z(oh/I_'t+bg/g\QF,IE!EY2au@R0RWl3Ed6c]VEV7hm$1h*U61;rp0p8LH":*%L99#Gp:EW^M;KPl#!YHBj`UjHs6te&W*khR!^J+G3:''.6fX/NiRe3Aqln#je)bE.#./=4j^%V@,,`Hf)#6f)nGm\K!$@'/lPj;n%CGjs^cj^1?*%+p.2!i5+TY`o%("%h!:TP):f&mJr_?gFs^Vk:jBRKml/A)2Hau"JkeaahlgBb$g!VudK,\gY0n4dHC=<GA[,"3Ps%jmA#V=>Efq9PAc<AV!_T0/;#.a$8L;<GS:0[fPN>hVQPomo()?^>)j+_-q,L,.-P[W(I#"s'Dk!-Y=X3iMrZNL$`6cRb[GKU2lUZ%2:hO<VmQ*f'=d<?9Q1F\Y_N;d$PJ4R'bC[d^Oo_h0:!RiFG0e/=-jM!Jbg)`TUu7qqjXB^-\US=OBB$+J>?F87$OCR=2\OQ&Ar(N%h?TI7`oVYjWm6+BJ>6\]-JEsbbbq2qg(UtM:2.&aEPKkD892t+'tcU#+S1tL$HrHfi+UIP[e26IZB2rA'G+cs:^9t_Ih^M6NYEQ(%o)B&W*"K%Zg-f.?UsMZF5N1Y;]<7VgMq5[efq6WaT,_OCU<k^Hh6$p)!>qaj8kH9]qemG_s6=X+L^hcAk/\tg(@C/Q5]Ah02`nP2%9A<e24+\O?CruAW?kCW*r-?EK<1^=gkRH=HFSGs8@ZA"*"_K+[6Q=KV5/8.g+4l:A<U5+Q2h]bUEOV8R0L`994PIBd_qQm+e\:##%5tg6XK`f^VQt8YCD]fr*C-A^r39lJ-HspqI'F7).oFha[(CKqhO_?EO\+rEThEWd]NI$1_J&pqe5egkelinm-it(qT!l"S_7t5<f%*c4XK1%].Wi:1#E6PBJo4>crR2-M]ocbNo!]mrCRCG2upJHHDb3(a`tA,P7CM)VQa*.7WbF1.L=1!qh`-Xp5IY3FRg!6=QQ1LAE3%DNQ'F#JEIq&-VV)0TQ5Wd6ef0%'Al&3ok"9h!Ar%AFS36FqJ]Y&,k7XF_?7L!2H=U%;BHgLDLda3.S'Kf1R(lH\\PiLKBKu*h_hq%4V7W5:e<AG03`M4,FK_VXh,#*YtW4r,m"UI\J9E)p+`D@];5lunqXU?('1L4b7:.>75Y+N%'=M?V)EBWOP1H[I90eaWbVd"'ll_s%@,,\.l74k@,l%X`r3HFlj-4Ka+OkE?]FhSYL8&Wdl9>a;!UtB2-4A`X;8a68@G/u@Kcc(74,/q7drmtP$`E]<T[DHukX#T6re7P:%Cg$O\02l`r[,J"=R"C@uo@t3:ktT-'(!H\PC_MS*RLPTD`%V'3+hb:C>N#I[B]#8KXGEjE[]q,#eGXU"hQ,:T<W0MIa(n#$i*Yim%s%<GWp6Y'<%ZC=QV&2+/!ZX^NoAA)/s#E)um;ZfQ6?<.*%^k<k+!2;LQN&++rr4ZEpTqX7LM,ZInhA_"Q]qI8](ff.b;F<6*e5H8%'!h[4,Z3%6kB6d9)EA?;T(9!#CL=6TIkR^TKpjnT"ol1Do7hk"?m$'`0!*)4%Jh`cDF)(')E#cL9E'.i(QMg:d6FY<c@<GHB,Q49%>4kB[X8`#mfE/DmCm.A(6I:"=s)hfO9NhC4&iRZ/T*!d2?94g)dUALuE>g^o`%*ARErdR^;'>AJ?2/&&;?pn#AG1@Xlr8d*U)?B6%&D9q!StQ',[,bQs[=_>R]lJhKHF_L"88)]9UP4%!8Chmeq"ub*MsgtU11fg^?F(@>#\jm-K=@a$%F%G2Fdf!04@?;<SJrNB2MWN>%O>\)=1,5L-$&F=p\'R^@r4.eUOC.F"C]$s;VjNPZ%*FW&S=419\_ZXn!r1&=c2$.$<[0FV/J_eTlJpi?&aKq[69&Zt)WZ>RM5B*U%;'hT!lVUs0-fTW$cP"tZf#6Xb3mJ?AQtYUI\KnL-BWe(R5p&d271@>'UMuV1Z"*nLCUH@npa!-]Mc)*'(JDVVDQ\1Y''@`MEir^9%8XO)uckCM7L#HGOVK9o^p@85k/:/RBL4n*CS?0fl!<As_,"+kpg)[m06Xdab*7o;R=fA"=EN5gmj1(.Olp0Oar=0)/BCZ:([%%39%s,%7S\cE7`0R&>&%eQb.5$kCY#?D(_r"8r80KUb*q"?@ghr[1M4JsrdO\a@J<p*i^Wk3G5YOV"5eS-*_@_+[>Zs7A=n9eWk1nK<K%oNj1&FokGQJ'daU?dQ]N5KJQtZ!X$<]JS5cfU*!$,H+I(*d41iQ0[oXHU_6Thp.:%cU!3=Z#UD2(a^Lc-)TiD=mLM_%t`D\$1hje%AOmLUJaT&fkebDgU!_G'?q``dA+D#C(D_U"n+/;@3F$EM[%!7WVN?DhpX8-`TZYS8._ir(q-O&nfTP#8U0V[$8HLA"AJsG5#>L5A%5b([uftbde:h>oZBWC,r&.XTmM8[Yu2Q(5pr*dJ.7%]5J[`7k[@bi0*)84:Kha^ZHMcJTpr&I*n&-\#!EER:"?P$Sfq'^E-p8n.H%*4n1OKcNe`'*%<'E.nT7$hILe#`9r;hiF+Z%DJ#Z3a#CaPGF2s_&Fl>P-a8=UD#'_!DmOr,,r+g+_2S-aSrDe:!jZegJ'?;!X,[r%*=GZK*MD$n#hFU'r`(Rn=KYHD$d+^e0h-gOh^7D"&9`RsFK>K>jKOfs&fu&0!>V\R.u4@rcdldQl)UOtlumn%3[Dm0Q9Ha@_I@o=%f,Ki&[=gW[>]:XXHnPPXA=5\u%>B8dbr7-hYX=3q3LfQS8p@k69Xue.!3Yjh>&!N[:[g7#qFbB[<bR+@6P())d^,N%@h/FIl+GUj%=")pW4&aYJ`Gs1\K4+is2(q':$[DugE4MO%+qn3XDXW0had1TJPt1h<fIuDl*g,ESXFqbM5s_da,Yim-EhNaj29J5k7_XJI5a#g(%:M:;3lF&G-il`&>f_3?+FS5?W0>N6gOnq5riLm98p64<YnjgEJW6AeaB-[e$NW]tKeW0ZCo+^]c-tOD#gWrSGIZKH+;JIHraNN9F%bn9kmAgiPZm2,7O,!nE&Mm/41Zapi??r<F#WJoE<1bA?>?lnN3=Os+/&Rle,GjLTfW)Lj=$;!;N9ZB'"Qg\SnOI6icC2=(WQe)#"%VIWl*!nFn1<,2DbP%;nI#;?S+X?]Ae'IYBJ?c6-Q0?-Xu/L_Ig&p'S$AV=UE,(8#XS6L5d+iRq^qK0tV*3rJJTa*T-0Z[HZJ#T%8%/k?>DDF_smP?FlZakUua6"$A=7B8G#iY7!%3_77cQJ*XC%Ui10d;B<gA$'SHdS2's0H`;S5<==(5:d>3a2[$7Yp#kbak^:V4=>=d%;PbuBf*+FgUM>oPNDpXUU,]/#)]'I2,S(97OtTC$.:>(S[hFHeCW!L(/6u?3V<nq+i:u790QVYGgAQ?Xe#NAiGJX942";Oq),r0C%PKf_b]M8M3Tk#dbS:3G1(ht#Md'=>1"];&\i7fiq=\i<78(?dnpi@MM)%sZC0AA:7;'KZ"+kKP"cG(WCI(N.-aRP0]:3m!"a#sHn%q(2HchjI#*jBsYe_cG8RDd+^`a:Dm)Uj#p5`g.m<ZsPD/^b+EGjQYj?mBsfA#>;lI.V_aEX9rGFQ@rQdIScr7@<jd/$&mZMU(#Gf%K'Ah-n5>`XfTP(\6B:$]EF*8`6B*CP;hPHS0KOi)VbHGS.GBS-d?u[B#67f!K<X?-6;4?<Y=4.[?,jhsYr;Rt;$4/[EjmAN6Je5A%?0s5XlS!e:C'1+!4K*LN>pK@NDb#.`:1s6+-jFMU"fm]O?2o2/M7CBYNnbXO0MNAj"F[)JUK>+<S3+>n#=GAZ/!hKs497kZ^'ph&%V@S$Js(m_UDiPXKWUA!-WT%M%Rr<F&R*K+pkE`VnrtOaa$6_bfh(9shJQ/`IBs+;3j!9QuI'ndX)[I9CSpgSc5Bh@Ddd\uW/Y-kI%p?@"EkLLL!nZ%UY$b[Oco2;o`:'?ArDY]fmjBXD0r!ZSJ3WSrlH-@*5^D@FVT4'YImW;ttA9AEok-2';6\ZhO%m9Nk5AP=IA'E7]%04RR]:Z:LgghV@dAi_qR:ECt">\od&XKZ+o[WcTTH&(pG=c1[r`^hlnq]=:Kq:VtocE>X^\(E7D391k6GHZN;hkp=i>Q%8D;W^/p%"%_;3^?/cJph'BIQ`"D#ef":/b-[^o/Y_25T,ol0k`<\H.85=f95Y=Y`=j,ahdk'I3kk"GS@OR>LncQTHSI)2P6nsThj3uQXL^Za%]cK*RVNt$8Z/sT\1qPZCbYH=[H-B7BVI)m/2'%0L^sa@b]jWt.SX;A0k??X]hL%L?_dW:gk0HkfZIcgJGu"u!q3QL?YUsZ<_L913%)I)@Z39X^fmFgK@&D;39YsBrY</p-I3FV+f*7<[coLo!)A4VGrjHi$WRsr;'A&FB4S(noJK9@CI!HuRTW#obl+eOqNPr7W57'ehS%HFuU4/ap[m-;8'%V]_9:I.9WmTo3TCT!?!LTYK6F=G$@7kSG_IGg91]7_jBR?Q"[fS&_*o(*(&9CAuGmks$QTe">5F\gL8V"*jKT%OMLu*ARA18$onC%QKK#76j2^d6!ZB5U04$7p8L=@4nLPPFRhZir6/IB/`=/7.2s1LS'cu\Xdc<QZAnd`^&1V)%V'R>0cLsO7YmK$%U$6o4jL+`fJ[\;nbQ%3)\`HW.*M72-F"B8VGl\#2hr/Ni8oj\NmGCVa;m4n)=Pc*@+Ps>]7^<PNs0-Q%mAV0+M].fg7IYE3F3nP\%08JS5dmT_fnU^(`2bM,BC4hXIcQ+j^_Y_hBpO+DeGn9V:p<t4IpeG4B+<<@q4\J8Z`-irm/AG]JN^/bk>3q;,QU"dMI!Vb-1SYa>%/MRS/0)gi5AeeCePN][VXA<107#6pFTjoTF?l%5:RTkGKX+J%M_Dk*j"(4A\%FZq'TnK;ZT\>budgXg_Hr8OOj-+@2'7T]K`I6)]%Xa:-%qI7;*(e:F6,e>0L3K5cBWD2bF_^)#QCiutFU6[FR.p!^DB40(#HlcWL:ck#66NaYQeo<5_I.u<X`G_ZoaL)D_C,3[6q-Z0$%En5TE_Jsio4U6s'n,D1sZ9O-/-G/..a@p7:p&mW[lmDeFJqJID@4#X^,L`)5bb3\:PRZ<H$`#AVq3ec-!n<A@U]h.>[h>aY!J8Iu%j2]U>k;T?t^[pL$U7^Zg-[T8^;l8+@=@[hkc318s\;:2niSKbOSj[a5fe'Hsd;._*p@jj^kOSi#,s5c+oo+q8bO]YERqY9/JL"G0%iAi$ABV2u!I,!]Cr=!B+M'88Z*nML%p@h4?GoP"UV\>ns$P`F)!A.,*A\IQQ;5Sd."Ltp_@A(ZVK2%f'`([,=puBgd8>PO]D7DHm%>J0""DT6VC4VaV`kIec=2%@;H4YK7mZ\KC<;I5,)QT@9&E]#[CXsEr[rld]/R%l1[5==h<Y6j)MUY78N*.4&@^bQ3D((NCs/`5c?%=+E^PFCFr#Y;)WibJHTL*#sV8iY-o7T86:7C;f?\OI?AJd]'bpRLkI@DC0*P,V%RteN32&S-HuATg=K;`0)Z@9)h#iCGT'f[HT_l%pmu@mMIRr<S0ebdEBB4?:Fp2.r&eCZLq4)g^9F@X](Ul=&9S)-"kA1JiaC6[T_TjDa"uO$mO&J1KXiKs6X$cIaidtA8>a.m+<mVu%T1CM`k*H_i=g<L2X/B!<U*@]1q?;uAF(RS1[aHCUA]HUYAluPq`Dk5U4YcFDED4kURO9g5Lm4!ig^,d"Bb=7S0K89I,]gXFkg^q+%[<-E0M2]ALM4Z24S<O6k;YgPQp1^b_ZW^L<BU7+PU`hNL-D^_,VO`J(F^g0<j>;UQ[\RVRKd'i=Sc4Ar&">iu%mSp)VOoHhkuG/o%g.ZU=V*FSA-]D_N$g,TW(&P-C@[PI'!j`_[=+m.3SPR%Aafj-@6[,,+IZ;d0am.K2VD=`'&Nho2h&3r[@IM\5%.M5h%Ll-GIdXS?%OQk@F><fYY:>fu7%-aA:'$W"gXnR4>nse`"-p&V.X_keDDLYMn@)9"p)m9g2Sb=(5YFbD8iV^\dnQWKZq>m,5hQAPPFPPQ2_rp+V%NSa#HSgS?.&nbE79BkOTjVYm;@@rZCcZS7e&\p8X^27tOOY^O>SH3sCJ8.j-?#+k#+C2c\!nM\er>t,iKkg`AV)t4]'s7jQopmAX%$(HZSAqBFJ[Gj<5aP'(JQp0^P=,_S"p6)8s=H6/sW;h?m(:5=2qGX6:HmK^e!sI1p[[I-!AXg]uJMr:WWX)8eM=6AL@\4'/>l!qd%)!BNU4:B4iLAdNW.GS-/4.1E(!lQ+<:*c>L+`^<]ib("\ZCM1b0tRq?5A9@)Sg2>1s6#%JomCaj,f&na-=BY[!kpZ)`LVGtNS<ED%=!?4rN0BDY,7RSq[+B"RW'11R:0OX.0AY/I),IYM,65&NJI>5fmsScg/O";35k&I*pAWDBRd1#b5J*rKJKrU1"\o.F"s&?"m)o((%j'J7/h%Q8qefNI<0*34UPf48h:Y,nF)#G6*$s6qb"JaCXN,Bh1Z5c[.O%=LnIE=AdBeWa"2QmO_a+5toHu8VNYKafFs7dHQP9s(M%FW<>&eX^J]gt)j)KUE^C,2A7!X>-;7&kc0QU)Sp=qC*=KglmVF6glYjR721.*pi_U>KR/1=c_1^h<P2lnF;d#`[f?`Mb`3^[ER"3%=M^,soIhN7Ap"6,]'9Ct`\H;$fr9[6,HG\_>O#!3`a@JB^M,XG(A@G79RbA2>0_EIq(.%nEop^WgGb;#F,A9ZP,RGUr!ItR)nis^%`^J.'0Fi/<r;*ssU[mX1&HYHUE!=?dDRj,/?rXu<dIOpaIWH]h._L-MfVT/&h!F7t"7r@pVMiC*&KS+O1$bKPaA`B#.I+q9b3LlK%h*`9bn6,D!:JZ9,\WQtf7SZjJFJ1r"MOsL5K/)B?6nj!<2;HlmX5sLMgKWCuckmA7f5>,$(k!8d!:b,9qD\:_3R(ZaPM?2@)gX7@%:.39EcC#Kgme<R)L7pKu#OT,Zo6#0c/>[=#[VH96DH&B]n/$nt=+*14[RhGgS=-c=Z$SYj!DBd+e6bFlC]OaRhiLU/\u'k#Zi%lK%HZ-&\e(0n!=rf]o/;hI,0UuEoV\J#f5nhDI4(%ucg7Y^uU5K$=S7kP-+6f/ag=XJS)WYO]?eKS_acV(X==pn"EuOq_,r%?]J4rB(%n_$if+b;HM-ILDY@(1i%r94[aeS^WM9)"neLD/f"ki0-*FJrY#+N_H[b:.[Iep5C[`<6;&1r%HNg=jkh(0d5s2.4im10B!%Z:QoJ%:bHG5(un!Sj&;pRcPCu#`9X-AET50QU>oplf6MaHE00NpTG`C=9KS%>Mjo@D%*SUR)Wj_N%!s[pe/$,e8VQ#Y\^t(>-'A^Lon(V?%!42L1"Ze[BbHhZr:`^E\Dh"Z>dL.01IGb1eZP!U.A&"j.IU*D'7PN;J?Nsebf)@";9Dqd##^2l4fd=n<PRPBWJO3Ec-bF&/k4WEP%YsK`WcgLRo2a^`bP,=bs,Ljj"9R&OFc-N-Am_V&*0T#QBrLqFU0^jK#1?>0I!uqs]bK4"`IsuFV"/8\)Ss1Lm6[gHbM68Uf:*prt%d:VDe5AT]'N/U^>6Z'qqjYF_6Q:oP.V5IsE3>6P=1=ATH[\%ZF;oZ(1rkP95BOZTX*U=C1FC[n$kd]\6(?!Qmke7*re6&Yd.5LLJ%:_L`iD.?@rM^:'lr4^2VViL<M79S9\0RXU*a,_\*Rrs`RfZDL`1%/jOSa"emc\cA*K9&buO)8s^d`Z@7raqhtRb`MI:V_GNg:\WC%^0+JM!BrS;ojb`.[GU-fA#tcr4rLst('hV-9g'@VQ^=Qj9OFiEBIUp6(80gl7UW6=h"b*.!m[BM[c*4]np^@>1h+$gRPK72nhZGL%8I0,HbaNT'>haPAEjM"&)a95\!f_gd%)a>'$[[3s=aGJ3eKS?o)@9e\6pi@,46aHI:LN4MV*+-4kOK;OLpoL/pk#ZcdEXb&lme(R%B!FgW<4iaCU>etGm`kTZS"3`Z'?Qer58IBX#^i,QH!L".*Uf\42c.QuSWtO$']*m^F<R+"0?i%1S<NSIF^(49[fEb`AX-Yh3>6;^%0[L&W7Y].2/CIW#k:7-)&/JY:H02B#h%+,GN_--`U^G$]oo#?uT7ZO'!uStID8tU/@8.kDhk%\q5R$cDddEGRll_uf(IE^Q*2M3Y%_BEDpfUlO-?[1?,Zd(8:%]>q4=+XSr%)Ko:YjD_h74[Mj-)aa8q&tPtam.!Nf=Ps`"4,(+DqZ6K`h%jODo"4@6g-sNN>$82_>kBf%4IHsf4ldXVh^N=iXc=d/q==uR`Di5g6UTeRkU<MDBpHWV`c%hVV&e[mCh#4$\,@\mfg6;e5RhDnJrB&5J47;OM"_;N]%IQ1puPI)%Q`PaH=Est80p`SdNU_\6T2)IB/)LOI")H)@4#hnCF0C;]2a*kePPb)&V]:8rKM?d$1p$lDTtIt'L00$^B\>`)B^H91*>r%Y_f,-5%-;rV@i6o(JZb/8E3H',JNtX7s#.1pPj^V'bDJ1O5lK$HJ&8KBu-8OH&GuFdHE8R.0$.sR"-U'U)PZ[UA[_/)2j0UL6$]W.CqXm>4%^trs==F(I1]RB-?0?\9iG'[jd5X1nG`2E&+p.1pDBfjb9?fndK*t'ZjKum1Vb!_aP4Z!F3,4P``d?_iX<mtc]f,aQ/iDctE>C9-;%d)4;0'2AL.^/@Pd:Q*3OC;:n.E)Ro#+*N4g)/e.k50**pB_hB;QucoP9PY[8$^<@EQJPj'o_HXf+,ITR]9?-km&GKo4kpnq[i-J>%R=!6*K->Z[EVs'rP/"F,n:GJk=9=sGdWj29-e60#,Y!j^)5j3;Z9P8)qE2H8!"^p0L"fN]!NbhIe!H7+DT8R&8LNZ<D2mo9l0T2B%hVYc7?Og3kRYQd5IZ9E@p[G\C].M76Drf\73WZf:pmpf'k5h=6R(8c9d.(C7AilUQ:V'7#n]SD8k<RlF$N\m$0ODMSJ:ReI:i"<#%pD1kQ5L\kO3um^`X7T1&[!^==KIe:5^\_Drg3NB0:Z?N;Mi#m+b*j!7]PZo),TMG/2A:(p+["3d["TR%-\FsMo5*SD(1%"Y;qXa>%?7E_PdeNn6_'^A)W<\UhnI`h=j:C`dh1Zpq<eup^_UmP:$P\VB+Ar%ue?+5u0H-gGIEKFHXG8c<R"VQWCs?^#L:?9A*I?`)BQOp3%q_cS+`;/Z2i#G/Ifg+H`jRrNCb;%=bnp=U)[t:NLJT#?*c;h_3`-6fBHNrMA**YShLWb7"-YOkeZs+('S;eKoIl"Q):S%=P3nG0B%q&Wo7dstRN=a78@j5!#lg+S87LJF:H$2r1X@GE:73R&tfr!j0kdZb5DZOrAp-ll6;5-j'%'ujKf"oS8<OkHUR%IDh)oYJB5R=EW/%4</Vtm*SnI>VEKOZ+'-<["Z:4'+p$=UFfe7F3sg"bd.?RTDVf>-tX<rg0,2LNpMIg4UOZLh#YMlB4%#O9)qrC[!R[R$Qi0lGouh&%J?ffHbIbJDS]0XiC&EIEV]CZ3I;aE-YR3E%,qM_Gjd4s^\!;-Wl#aMR1"ploNc]nad[ta892V?\NRW$X4f]I#rqNNh8+f#+;kVW4%a6MnVFG\O3s,GM5`s$')<d4TCql`b-rQa_N2R?_fZb5M<S/eUGlMko)!#D+Y9f:+#nE#LY5Cml5S?KaF@hX7R,K4Jf.+7aT(@Z`+%h&H>s_&'GGr`T#fP[E@p3;kZ!O2OudB,q`T]ME#+kCii&M)>/mnAV,WYS3Eqj(AS1=eF[!%a_Rp=2k9TgL)1QX(YbOqS>,2/$*"V%A#SFB5A<H:?qPY2_&'#9IZ*:nl50Hd_Oo,jGOj>e^Yn#p)U/$n@uC7W[j;A0$O&KEH_=2jci8TjZ!.4=pZR/qGg*\qeWe=NFZUP1%cL2gQR]Oa=G\n<6`_WiM\@9DDY8mLJ1s9QE_RjA&oBdEJDW/d*rA@s]kp,?dmWi%:rX2,P8r#_dbB^&H*5).U3bR$WfHfj#IqXf1%PO;o4H/0@eH+)6bHH:I16ikjUoT7Dm&cE9j#*3+V1X21<n9D?ObN`TAGNpFBVVL10%F`agD73@Ts6$H+>KdT6>FF&!A]beDL&e$i%igTmrg%3>9F2:8Yfo"J/d!'XJRl]!4K4U>r8fZ>AO>@0/fDMU^oa=a_r!;HHE]k,:9]/sm;@EuMWYZRT@=+]*]nZG\a2u*r\lUO"%SNV7k_@24.0/;%DR3$m-fmG,PE;51rmkZLfHbSpjbT7%.5.k/52)V$i8p-f\*(OD7)J5WiJ*^<N[/!#6b4L#=g7MXUNFRO&L^rD5%co5;3jsg\e,uA.*Jo=]6GUY#q$9;]FD!.]\T<6Y,i\!ZJq(F>;s6:"nY>](Q:Gt94[.L-Bjnf'$ZW'\t9>);fSU.0:XL=g/B754*%e_+D/)_L)l^Od*BLp[ZM0;(,CM!*Ylhmp/tdqKkSYFJFtFXE[91lUZ-Nr5sGa_)^]N+"D^:!`JTOF;2o;q+rJlOTPocmEnD9&-8L%",C1Fk^E,GcHj@gc8BcKFmf(r=m+HpRQBn$9^)D/_irAqm"TUJ;rU4^EYuN4@IK$#7FF'./rBg)\l`&.V2J+rTSIX8VLDX69YT#!%WS[5OQem&U\noTVfB#1),@/,R4mB2jDd$3tmQPdTqTbb730+q_'fV.pY:7(`f._p$]&kuYe@!K-J?J3`lfrf:+2.*%F;/icUM&MK%ks""9@GP"+rMf\^"<G'nYLV2uhf_f,fecj^/P,f4>F@T"h'P&TeWFuU;>30:s6:((?V.FOj%$dkQ`]LH=bB:a=hJnMp0>b8GOCIJ%H;>!2li#\o7UspQIpt)-aK+!gO2n]$qP5!)kgS&>=.`^(g3W+d'$uu#jgDi!=fUfRdoo#o=uWqem\/7[%m0j;B4e9tO4q1-I_5]K%BCW9'^[)"%)oHQlh_cThJE:2,L(*o:ojf`[;@A,"3URiVm81p_oa`7$TZM+26oOhsOSFj^%-c?h]-74N;E'io*m@IJYFZ2_cXsu>%q0@-%"pV-]0T>Gl#/#Lc#%HHG(k-iI?niP-Xk^dt2eD,IqKcoMA9R%r:\M!OilMk;r&b.*h9AmjF7f?oXR(%)\\-Pl<:X[l:GmJ`%psa?NT:bt_=RkY)h.o.30uM&\XB&IdXhOPMVqn'11@!jh@*9B]Dm*09rFcDthCH;tL(5*51%B!N)RH#<gK7];(WKY?fkP>Y?"r=a%Is<buX]N9Wl-D+qr#'oAN4[bRA("*AJB>Hm2GGgQAnMI(ol3p3iVbI,QPk_$BI\a_'iXL:[5E)#Nb?gfZT'l%Sn5\o-\<G;D8,Ho%*M(cqfsL30btc.SAe+Hf/p"ZCs"n@=AADHQ\#8B.B/4&d0.f9Wf5XYDcU%`GGuH;Ub_K1Z"n\EIq5gp4B$iP1-lRtGSpqph9*'sc%=_^2P=utEHan#7a:Fst]?.H7+H:!ob[\C7"Zc'fIcIj/fE4).AVS;aVC[j?u[l.KlWV,X)f=-3m\r(Wuli8TfhfU2X1Zj2S2OE[G%?jdG8^U@)jYd0Pl:P>ia,&u@f,ee*T2?%;o/VbFV"$-4^>HRLjh%q5)p39.n[cbCg1]+3t^UElPDj29omu@%5>/Xu:kZ_JTd:!n1%Z47sWIWZp+jG0M7a-Mb^A8cDqL(1n-o'J(i2WIfpWS_l":8]g\GD9VQN&1)%gNQ]L1XaqaIeoVmTDb4"j_?B;a8*?fA^>hT>TqR@%m7K$T!/mo+Zh.P:C?!?h=1T^0qIR9^lX0Pr\$OU']-C6Ad%*7a^>/D6_=)jA^3mJB+9pZ:NN]V-@`]lXriT\k8Hj+Xo5\L]4M?$S%mhn(_6-g>)obu#>WlF8q^09@LkI,Nl/`WFk[nDI(hQ]"0HFK_?cY*/]Aph=*Ze^rn$Ys)qpGMHRfj$u'P\>i#^K#p>Dp>c#r_UE,%mEYsN]Db8Z$XD$A;qh7MSOWbXIbgbR#2G!(4n+sIRfY5F]0>^rHTD:c_:(TPpHS%tp6G"VN:t0c?nn!(#.s<72)oU$4i(K\/KD(L%ZDg[=qcsP;=a)sWBsgI)n_18YrC.$hYjF4X$:h3sGY;B5X7@%o-%2i`PTju'r=mO/[<b'#.$\t<8hM'=]I2aCO_#j;'/e:g^8R*k%1nn,OD\m7+(5_66nH?jY,iOR4Q@id#L?WhGB;LKj!O::rQC[2$n1^F`CGHsP'sW!IDr/Mrq-c-EmD#%K#Mdd(GV"SW,+\U6-5qe6%3Is[aXbkrgqtIEQ297p.D,]cl/&%B5O*XTekM8eXT6(bt<:W%6*[Y5E[W6E\?3@m5gb!`IPgc%)V38%30NI"1)^ubJjAXP<O/Cb+%U-"nPqp"B6`McF*2lg4RpGH2er:n;f;j\'WRJsi`bP[at"`Q+r5M9`A\B.cp*\.&P/K1oVC'&dgSEn_fcXhLSA?L>?]]<\b@P@cR%G+@^4p"+WkV=&BcL]'Xg^\b1A$Z8m`=ia'KejB+0QROJ&RfR-hs6R##HP+5'M,b?2f+7bQ/nTMa#+^m[@bLSbYS;l48Zhc'[o+MJ%[#us$)q:n[[O<Co)r#[FG'#4UElMkm.<e!'\aiP'8A/,d^=S\s@BdMR4,`(@U.6IZQMSY9o)/L;X0`-p$M<HN:pi]i61oNabA*!d%[Q.iu/p\U(260g1X!O+c>clI\qJ&7J\F.lgShFD+Tu+ic5A5:ih'>2UF]T$1fCN>j?i<?AFOYdJ.s&V;^^Z9DlLWXF*PN"Xh/IOR%7PI`tX@Fj3NNkLMLTE(c]A[J#r'0.@0B,a72Qtr'[[SsngI6=%h#=<XG9*7Re)#q';Me-nAuU":LY91QS+I-FlpiAQI;c$Q?)eQF%on$PshHk&]XS$2&_GB'XD$Mo;IV(e0p>7)aI@lrS$ZD`enE6ok\&@1dX4h)ls*b:co#'m?0`:E/hKAU6p)[F;;st_sN-sLsXORjM%CiB3Lpuc!+e$!c^e+u2SIHHL3pWq1U/ihDj?,42p`a<69@COpm%a!!Wr"["7L9J2VIJ1&WgU\V2[p']7/`,u1o!YcP>6F!IGAc_P%I=HYb-MUMbr/%?"]fuFeDRAqD\^;D;>E-Y42siKBP\o3E6s^BeNH*D'HTrifV2S2;Nqq#.3Uoqp:%,tl"C=2VU@J/Q-.]VOCZ[;K%:1j1ugMsZjV>YJMcX39qgSWAG[3p))IrcQ91u+SW@_JM7A`2#U?T,O$O6-)C$EVRG:h*E&Bn+hq5J)4:Gni3=VlO,f'41'UG5+*q%BL^R*UR0Wsh_rSN3mlf#^3nSVeng23[fs,4F$"AgSk2H)FWb$`r][k0-PJS6Vf(-Eg8"*WC"L%3N5(MDAFR'8`q>SAmin^;CY5CO%[W$5)29qotLR($`#\CsF]NRO=Z2%_n=](c+Hf:?d&)O-Zg=m.;nOoYm_M#Nj*ZO5)o-9S!"4a2&+^n#Ona<!AZOJuh5q\]Zp`_hW%$9o)m`Gm]jileaHOUE.#CQci(IrE`Nhj*;Hb0)P>>>:VGkjqB:H6H4T^6:-)-@'5E-s+Z5B,'k!]qSR!LiY`;$XQ6RJJjIF"7tTc%JAV=kcV7iMl^0-&HOVW:c)XtrWcSCl@86ERXH?_-ZCo8J+iV`W,!04=H'SS4@?kA^'%-tFquIiMg,Y_b.X.Nt>H'tA2m>cDGNP*"%C,oLl:7p*f!=CXH9"XBQ#`S*7AM5@9bLULc8ns,EK>B'`&eA3MI2p.NjS$rPV_29;4ECd8LNgc"Xeube5_A_YbP5(^MNCf4<LsrI%9AUH9=)g9tb_T,?\?65NQ#:V?JPYht,T0S(QU*(""85jFb_.1\pn<TF+d<HN@V8NW$7Kg??tuT8a'C?`:7PeZ0bXaRam>I2H$Ffm%3\-.rjha:f'"))s*`Bo,7C!.("1A`hkSmr\<_n!r!8^bc49]gXB1nMFiNQ.G/(jh,:=6^&'0Nl9SlZ;mkO9KQ[<BY!V"EVQ8s>6Z%kXhB+V>b^D-*`Ts4MD(Ml9Bg,:Q0Wnibp]O&=V4$:;..)SXu'9[?p,=PpP\"Ps(ZCVDtK*RCdi-a%o0EU8%;%.95Ki'a8/QJchu)%'^kIN&%YRoHf<Tn+i-gJ'37BG!3I**K4-A74WVdn=m4QEHoo:rA]r)KU]B<>:1m@F(1>X+iDmsS"efL&^=%Tn&e;Rfp?r0iea@F%%D?lP'p_W=4Bn$QK_oLO]*peI2/hQR9+@tuN"SRU5C3O&2Bu,0fT^baO7c<G(EXPYMjrnbY!O>YS/RY+B5XH"q6G'%S'umXsr!to[%)dYY?S=mE9ItSUAn$V7oSj)_-",!gp6+7p:Fl\KK^YEUcgD.B7e"p6g:T3B8;_,Z("j`<rOZU+;m(5&,Q+KjkG]P)D!-Ft\4N<)'%VkF9Hs$Um9f:ED"L[D(tf^3\5CJK4kEU^ka^-JD1o:K>G:Z(@PEIY!0aQ@-_ii6O&4l^MUAb,KEB7FfQ(-:c%SV,*FR)Z(G/:LbT%Il474-]:#!$s,?$<.S$I46\2B^SDtq&[W44TX)Ui]iOO`.qN"UI@FTSh"tJ.qV<Sa(]%:/Q$2WZM:f%0MrrpgWJ/>/:O+1fXEA#f%kD&)@^@:Z0a1\oTGT5/oXA&o`e]ff:3kpdUP0Q72).?`=dgr"eLUD8jdbY"S%[a+Vmu6ut/Uj5a!dOn,-u4bFlB@*98g1JL>1JPl%%F\f1T<_IKnb5XmSM7X)F.d5%P1R(2e(+lmIFXEaYFu.d>+b!p)P`s%F\bm)I>@ZHGEb8Y5hj.o`e__',M8^Qq]])gcd_$PR9Jdh%;FAbo!FSEX9GdU"27dK?,A:>X(l8+0J&$]r)UohhKh+G-@I:BMNO0Q%$HC4q/kMjG:Tmb:.?n?D=rM*g=Xb8cOX>/cC@=#XdRY>6%c[ajgZ\ad\m@=7EhX%1$V:l9gEFH].K7Yr.^u3IiH#,?0Uj?hqH4%-_0J-S)XWFRmcc[F?)2sPu-6n<<gJ]rAG=>%'(50-[9Uj48%f:+%<5C`/6K=#&FMqI?V+4a@/.?MMg6.i(;C?U"qD#n=PkIp0W#X$^ZG(;D7Sr(ls!g?%k>hAWR&Q2eq&R(_$1)YEo8?ka"CC^.d%OmY"m^Dt["JGar<Sk-=JTssC5@1sr@PWF8?NE/^;@jm&\K1-/>&Q0MTe#Q:3*Yk#2)AilGfW`kgCoJK1a,MTnY:YU<kW"0CO_JUP%?mb%#\kGb>DJHq%4@,dO1\N^]>:Q/oeH"%eN^g$'o$CFTf`?_Ii3\<%L>(0X%j<NPXtW.7hp\1^7j0:;<+#LXCQ.5;Tc)k:nrVF=%e5@&rH8WiVA<;7B4ma)kkE++^KUpIjS=c&qiAa@PD3%S7=er6nV3e8'dN"A0T(sr^h:AUbfUe/%&P8e3WgAr=g+BmoCCVeT0`g!c%Vml8qAWWdj]s%EZ7M9E"27CUN"ZFOPF6LfSoeYMDeiQoHUp'IecW`SAP=.Go\=+C8cn@_mRtfbk-AN<,N1.KfBr(F/Q28SgF&GOp%^D)-e+doc.9"P#&Vi$SqqEn+>BN!?brt0cPm:V'KDMVN3NggVGqFkU^ijO<j>#,RT<R`@aBhY,PCQM$N1FFb#+]9,aT>)3c;Psf"%`X!8HeYW."KJ7p7]g#GLT4AWZ9j%f5&USX<XDUKuLPON?JA'O:4^NG`JOnTn`l+m]lZIr_VB:=&4,T.ubES8X)Jcp;/M2+O7T4n.%l;)Q'<=Z"J#hj%gfE]G=%>`SV`o,II8cNsIQ2sn@R<GG_j)*CcoI$HlAg?G(\,,neccG;<O16h$.=^%^12kE/0>;?AUu$\E^`5CF%p*gO08nj[@GT.!":L<hq9Pj?t`K$M3Uu$!gE.(gq9"fql?TK/NhW0#c\ouc&9@s&pVTdd^]Ma25m%rT?4N"2T*]tX,8\>Rn?IR#k%=lsR4eqf$,:<Bu-f68l0PPQ73*34CW:44RWH13_&lJ`n>Us.SHV3ajIdo(*-a/W9Hs+sokASRPOUKjbh.K-]@_1%uXI]N+qf@Jqo%5:Y:ta!BNVrG;CY[nl/Rk*L1mLkt]X_6=MdiD*]b+if>G%pH]DCQEpkX?MknMnf(Zoo:^Qa"cT@'g(XFKQQULB=KYqPkC2XNW&"H%B@4DiUu##!o;LnL2_>f`1"Z5J?aa3XAiK4]qg?>C2LF9,S<nVMr/Oor`e<cLHctRhGlMTfV>E0@H_9(r'0H%0e7^pI8L:..V]T)h%!>hr%41Ss3=kAW&/Dp_'YKi8KoqCR(L<a@#BDJbQiO9#10ipB+ZSDTjd+^%/P\9QT>QJTnBc8(Kfj0MPboZWNgQ?Z&J81W$\9Yi$%E%dj(<aanN$c(S<$hYjCpR.Wm:<(t4,5JQRdbooGs(-hQSafWo`@5R@.C@*/ZiTJ?NE-[k*rC!#,5#?s:gF8S0T3F>pkV0'o@k0#%Hmp0il@SRtMa_B"6L(J2dagC;2Gu=.L5qlWdc+HOi#s1VT`)fAD_p5/+e>&q"qIUq^@&`+k'b"#_,/j/dRXImJNQgn2YW#hC5dNE%"5cBK.I\[8mkC%pMCTf$H=DJO?eAE5,*>;$m?+OkHQ=<+)P`t-AWs&o]aeFcd-0_49Ll`:VlIni%>8E]bEUN.T62V+;TI2-aO:p/%c!5XPnb@?$@qp$dlreB/MPM>Ab<c$/9J_FbltOBSlRfp4RY1E,H$J9e-9`,_ZimgKZ=*h"dJT,:W5)V?3h2Gi=f*3Ze-M_n\edck%#X8_F"?&FF0%pEkq8do"fcLV<nfn^9g.Nb#7c"BsN1@R5MU=:)RD3PMVR`VW"X)Li&i:Nk%k%hf7t[M:IVM1*SfIW#49hBdDh-b`%"8k!lJB6-XOb>\@7FYY$.#oR?p?A57&3hINSquLY,M])>M<XY&Mslj&ZnLOC<+Xeh3C^K>rkRF^Z9:bQT0Llle1UEdUW1@_nqTL-%KJl&0@GIa(/G8sCCi=$8]NOS6ZP7r_/dT'YNO[H]o$#=mDc]LG-Wdshd#phDnL&DBHHo1Qh9GJ\d4i%NI_8aU);tE:`@R[0po7ub%fSW[)iA7t',<3);6M7"-U0MVa'tf7Z^3B_<QY'X1@Ub9O$/QC\lNcCI4JR\_m1/p]_%4,KnZDjTk_b>QQ5Prgfr"S;ig&g%9fpU/%W,\GabH*Uq0dK8FLVQDc;6*Hu(anq4<YO:=Bf.qjm"Ei@RKf<uR)3Lm-."?D@474Y&(,?aKXNqVS!(b:?]H^/`bo5//7s0oS#)T%%TlKQIfrb<+kPA!_ljORilIZqiEpP$iiss[BJ(9Q@V,<"X]Wj-=Q]?Y"I5$*2Q!0Jh_HC%qgRT6-Y=%7RUBTm)[_t_Voeip(0_^1+%5G-C>qj!ZFa1bnfp-&6rh+1&e,%60sFp[L)-!-5"W(TDC/u>L^eZ,2bA.-DY=e&8]QYf2us%\J=XX]p.1fs><.WW2LH9*#BJG?BE%R9?bBmY`>Zoa5ad7un"@%cCP.j@Dma@hp,\ICTRt9fcrdR$IQ0e&g(u-'M)Ps&#\nb0N]N4i!q,]V'j/NDTk`97FoM]%Al[)OR8C%?e%]0<HfP*KUVU0NX7SsQ&UIG1-Z9/bJ"FU6H?J:LJ$Mpl^4FO9(F-N6$)N(>%p,X0.ECB)M*GkD(CjhT(j>$EaJ;GO4hYjNcKZ7%m`@i=.,k]nl;PkHokkkp)aRGSl0cP\D&>R9/]k[s.7fC6(#<uZ`=iiX0hRRK8IMI?6u6)a`03j3?Jl\f)&rITP#G?RD%sM*-V$gu%V\$=F&'9$S?6jIZ6edq)iAq)s6&dXAE/V"[N0O1#)'H^(djpWX\Upd7'`_TFK&T#V#:TZ"51?q=^23[EZ"?]6b;GWCara$[_PMLs%\L#S?qL$3Z_YYaT.LpVGc+nWs16.Ec:]=;dbe3e'>5=sqX;%%EeI\'iH[maRQkd8d=Z\gcn)qUA!;F2I2+A<epZ:Ve$U)F.6qEPO%$,B;b;Plq:Ico%BrhgSA'O5[9<J4mi7.r^uqu"I5CmsIcn-7o!ST.dh/`.,rfXuHbr<dZpbHY7ioQ!nMUI-d`)5Zph7=PD@0h-mL%,O.Us:S\?Yi\c6J$Lo%+,kE@`f^JY8>m;M.Rd:WTdM9#9/\ugo)Ij[8Gf)\WUCU7WoZ44-WNq31_Rk\E)Y=DcZ)]4g=RuRRV';K5%DijQm;o_U]BR[K8)XU=CNIJ8EJs%Z:l'8SHmfis"X3e2D^`L+I0pdKGCeX(Me]HILO?;FejrpEM.uYp*>:k$WrXI5S\$h06V`a6>%OpmTEh<P_.q!OA]1OiD(D7g2WF/onV;m[;5Mi?TqJU-\6aZ7/_oMLTC<g6Uqf.KdC)O58pNo[UtcthVtS@_96%HUMDArh')2/l%7%p%.#h2D,1\>Tpap&f%MZ(>E'#1;^L[iR:<!0L/HR]&Bd^a:(ENJJS;[C!fF_NDIiUGjD;=-/\WR)N?\6$&s/09gYUtDq&G5&J?cU%*h^pS/+IBIPnq"DR/EZhVh?mA<feFXhu/iRbggIomiD:2=cIU\f^I[qd6t5I)UA:"Xo"Kn<uT@TG3LRF+V%d:,=B6^?upSrec9V$%Jf?+#Z6$A\ktp)'3SB],.;%K<-Z,SP>utlj:u69del-af<@u=FmZ^_W>\mZIRK^JPXEnG(/%>3ZJDIa4JN$hHB#\EC4RlVa'Y*8?%Y"ll>KHk3P>t'amplI'=1c=iiTO?m[+rpE@UMQ*O<tf7T=%</L@b"<K*DGfd3#hS[[dR?BrVYd>_OE\Pk[Rnc^ppq:[?G076NBfF%qkuIjZCV4"G'D.V#C;2N\pkL]h\acScXQjbm<]TUIkJBV(@0/tpJOh4<hBL7os:@_>R3.pY-7ZhSdi6@&8heuLuq$MGC'!5QUG^Q%dbC8X>Y*2+r680q2@S:4"1l4,Ec_UiaVq&aX)H?f\6r16[<-tY!FVo3U^Ba2J-oV?.OaRc+ih%C"]aY1q+]s1='@`j6\,_Qb=8We%Dl484,X4iYL$oh5QY9iK8N:Ddj_7:9Sh)rXNV<cTRaTJ=8Ul44hFfNB8i;5OqmOp;BX]Prp+&/2d%E4ckH&.c"p-mAYVI?=0fAK3%\Wm2(:XY_N0?7H<?ns&ucK/*ZI*5+bXcp<oF%SiWQ9h\l>]</E@R-I"J2W*Si8^HS@VIuZiRoc!Ql/uU3?uh3C^(n@\`Nf1\e?6M%)0Ge8TmLhDPV_O=N;SbW3opc2R;B^?F6MtJ)0Dcm_)l`%A<8PaFI^m*?OiWI"s'$^G[CrO/5eN]:,Z>GarEJ($p(a_p&5plj`3%R%p^oN.U4Fi;TOX^8GN[?C8(2_f*Bbl*jNn2l,g3+!m:<>9\NTHQR6^#olUd7qoJTCmV2a6U@uH4l.5&QWm^fqdP2@smfb(56dL5j"%\7RD)r#/q[Hsrq@>!@eLC]q;CbQ>CNAMTWY"eUH`Hj[Y/O(f^.?^*A0e@3bHBtUBV\nEfg,tX8fNu,Z@$7*`hb_\*c0#We#l'd0U%'"NG=4,5I8:gL[J7+UDq.U4&RQ>)ddYA0EXKr/-6h)/r1h1Rj5D[6cG8FP@Hj+?j-%F7\YR-Z/<o3Y[?3,)%$(km*<^2&&B%=t1*%q,tR_j-P<'[pT6/[:g@GWA#cnr$Itnlec5_8s2q&]k/GPp0u09VH9R\_E:#i.?'UAHVAT7)qe_aTej['U&@)I1+gWq&7)tY[>N$Q%p<.'!C!P'&7!W/^LI^IrNVt0B4n,KGfhICI4,fRj='X*EJZ(s$7>@U2VR.`Q%u?D+"+TSs<W*`qm/iU1"+N`\hcBP\#/_1$Hl$j5%/dMPtGC#B5#N5]H-!9u)bY5POf\*G(HT:_E_/$T=A+E89=#Z;Gd;Im00^p$Yc8I^(P%#_ZAriptA`onJ$&n4IQ]#'Sb*NcmO9-P&%3)Z0**A@9!0Y.do-ac^.k(9p`(>;c-p*<?e?Zr)$>r]CV,)E^j][t$n1Qtrp_iqE+\a+V+Ht>_&kE/P[]/94qAgm$/L[:+0@MF[4%/2MP6.U6G<P3#TQI,p,M.5ifc,CRK.fHmmLbEoMD=dEEZjPbQ7:"Ved<J%":@Y1+Hlc<^,adO'ug1,XYEDiip`D%4sCj<1OmcG0.%aXl.3F>KPb_E/qR&FP+9(P,5IEQTPHrX2D4].,#"5a)/Y=\L9^mYZgZ_X;L\8T>(_M9kT\H!g9>poj]H]"?nLWJS]l]G:DD]@:0:%7V$`k\&c)hS!U`318h_g]G:&:=^,nY)1$L^qD>Pu,;R,P_<C>n)hcm$['PRIA4Gj\r4K'T1?WY+a;>ZV3GO^u!,k3(,[&qUM=g<h%%lMqf?/@NC``V(t*g)YRl?XPYPG*S?jG*k\Fqr]$ZPoUmfHY(`Zh;=4EnpSuX%8d$VD`&-osrT'"c7'396kY=lt$n":p"!1?Ve+c%7!"l'VXW[V,'7jrr#o'ld<i/NQ+#rYbQbCeWucLt;;RGSS*9(EaDO[t<'K*63<*LZiN>:mm)FF_ZX(qbmX'%>goWY;YKM]bhq.VD%I(74-$XUu2';#O[]0GefHoTu#-sfBuU\!GtE>USYma:iLb,5A).N_D1R1UgUeafSb\2.JcAm#AY;XR_]j7:/Cj]8G='1j9$XN%\J%ZR><[Qc*`N^O(HV4]F`tG=&<[_]ET5`sOJQ,BBBZVM;h(%)TQ'@?jWJN8K#k#QD"ulRE+W,h!(`X9&-*.']!A;qN]46d[$@NqU8K%GXt;'rP1l;mN.+:ceaA<F0<PoLLK._E,.K`B8m"B5@><<Fq6SBR"f[%(gci@BfPhs6O!lZ#]Drn#/O0Z%[T4N96Qd^"=?6?k0dsW%B2NCBg+.!5>nk2.cRqn!.NE2fOkP:Q7dB1*"#EgUYfC=NIf;MR,Lrh*4sD3df@Lulo\IKF;ul*1]nu=!<1PLZOW&N>l&(F!ouB=i%Ks]/!p!Ek0iR$(i2]4pSi./Ko)MTuiKoStGfA`^F8a3M#Vo!/nII7&".\&oAr!--YDN.k,QO9YEYIlA#N]VlL8VWF+bkIsNM5(D-%1/2[XKp.=RWS;S$k>0VU_Q0&da*ZbLM/,n?(YWAOLE3;t'@$a>A(e0n<<SC,0]>=YGM"V0^$q-B)\s5bg#tG_>La@H_U\mXjX2(D%A$Dn&DAJ+r>GXaWU8&@M!tt]MU0HY'`E@/(G^/p:$g6EP?9@O<A?,n!lZr-Xafi@fXS\it1$/q`908cO[l_ps[ljl.'cWgA3JY:r%@T/mZWR%@(L^s1MilO??A@L/)58WXM!63lUD<MEIr:#so"Y:P7I152"h;2Zum,6-9?K(1=.+ujTX2uIn);qpV6b-a:$Q4+L^JnF*%A2hDQ<u*6t<-p6aMe*W8fSPdI)F5GUWA"L7^2!Lt<1N:Z0?@DAA_70f$5n#5%!Tf;ojF%Q6O%8G?js^1^Z@9<7S:d?:Eb"Z`MVU"%KTps.T<Z,3iGqIn$FthnQ(C+d6D9;Dmn,D2T?r,mlo-7-mq@&kX"*;YH)/U![KoKO^2:-6$AeBmGpmW1-YW)o+>uV`$TLh-9K8a.%PkNm>gi=q!-?%'1XXJ)/XV'[FDK*1Sg@HjV<TBZD^P)%=`B@;n7--&f-WRFtKANTud$s*l8.qPoErSjSlD&<2LS!=l%8#!sr"],*%/mfeM8!67Sme0<7jP+m-n!i%E\sGt!Gh7I\VI-uKKHZ189C;HMj4',+o$VgZ;VPK\\:@<tdX,I^h$n@k)m\^=UMpagVGhV$bh^ro%;DCJrG^2\8SQ%5tD4-I:/n7QA[(e8`:+DT*ir$&CZg"8NWS[l]2Oj-3)>WQ63iR6?1fljrRnbI,ch[I!b,1BFV,O_0kIPIjWE;7L%]fn9B:-.k:dFiWIX.g-LVN]0!P<<^]Y&$.u>WOl<l1SpS.H=AOdX,UbSQ,WGG=12Y9d]p`nP8%IZg"9,7NS*pVj:ieA^^rN1#&KF%_m.Bf2NQ.\P?LG<]=I_1CcX!FE*_h8flZBW3aRg9dFiV>X!N-dkqUk5(VJ?)A^`*2N'&Y\m_\nmTPQY<B!AaU4YE4!3Krc+flU+m%V"B(_pH*mS9:k,_5jj*+q#qF!AV-:EMXSEo3Rf?=WR_i_BTAm2ES#V];Rb1*`aNbrY>3BS:rfJl2qsqoM;o4e-Y-A6@A-F!nd!Q*%Zr1&Q$:G1k;QU9YhCa#c4@tZ'mnp`^:Tp'[Z5Y6'1lML.#dpF/ONAg@La:QC2_W#s6"6>VV8sXF`@bD;GP<t=VfT#jRH-;5F!l%@%S=9-0/$?FHcK%li8>lG\E7t33r/9u\D\.!7h;qjQ'[r:G??:<6UA/chF[&b9`Ch$'h0mNgX^SBf#:u(uAN.]==m\4N]?8%^/5iaM%WoVdT>EhD%@[=WIH$0p&HSJXuP[<I&M0*M#gJO3]$KjOp8)VoDd])!uX"dr%0U1J5Tg$4FFR:*J1'Vhh3=1EfaXV5]C2D2eM&I>p%M=0_H.(T!lR',S_og/i=DQ*9hG!iYZ\JqQNG.(>41!&ga#+o.LTiK!mHl!cVj1q)><se&MHqr6cU>alh!bj&\\m$@Wq!u]_)OS[c%g=&V-MM\aX,DsmiR@9_4B5.%:!^^;*_t=e:oT!ehbbo2g3,e5JA`XG2P@CBZIBQ7iW.D?g(%7e"cQk/XP4un+pJ?(;2r1<Kb'VbM%L->*Y2]26Zj[9<<@t26kI8?tck%!1iY;q_,5Ge.PeS6#J%JcOWpK3t,;1*/[`:kN`GnH*NJ>c"L:qsjTD(jXH,(o^c6=u,/#lFdB%\>)1pKfe]DF2Qg.pJtXL_ju2;ircIJ3o+b!s%RcRL6%dmnfEs\Uj0r926E$+g7+_$U`r%a`Z+@,msB2Ia072RE2WD/F1=g'+c0M&%m2D/EX89b<>X),K$d7o&]9HEUlc8Q>!u4QZS,)i0`7iOEfu%j539LXb\LEsn3[4^AGsGgjKHf(4,jU@oL*M1#gfY7'OtkWHVZ-8a%m8?MLVcD,_X&EIE^-*gGL!JnJc\rR70jRJp),X;GenGmuQc?s^j:uPol5*UDrTu>/Z-]Fs;k(e&Jn%]mqb;Mc9_>tIM+KH(&(:r6%nr!7c,UPd>Gd"uLqZt/q@F!ss1CS=WpZ5>C<;C//-,ZtDjR"*fGpD-3p7qog1[F/hZ(1-3>GV+/.KCrsmQM"93NbAD86'Q8RN,E!%rXF".$Z^G!hLF?+]HiQ/nh+K:?e/lm`A?@==jK^h"(r0jgt9[sKo\qa,B=K`netA_?7-I/jPR4.7q9cX(T;GQ'^E?lZE?bOQZZBf%2U;#VSTp*/+aHb'8TYJIGIRR5cA,'V4u>`_Msd%=#%*Stq/H'&Ub8!e(L5UO#p%.>ahi]_q:r`u*h0`POa=6,[OHhcAC).s=^pCG%^Ma:O7;%j?<.#3\be?:boqP25*eOQ5MeZKDpJ5^i9hhCChd6+(4Fe^ihh^`kj4Yu*]ABN`+%hrN)d^*!D3#!Es2[r*(9+9*/>dGY%$!F&Bj$*%fI$8EJVssO[PX-3:#qdkF,AhHld>Vn7LF,@grJcs3fNIZ9Q]!A\j74]bX/[9HX:8-hR3nsX$)<\)\CbeLG5%20S2`)X%gF7!/[.@%Zj)-S-O_XWO.F$*ZH-oY0'bM)SPbd3;8<R99#=Mk*'h1Bl$!=d"\XDP(YIq&5F%%@R@@#]#VP<BE2m[nmYM36WO8pUk%H1Htp^^E4\faj&LGp9)<o7jqAq5a4'>p)^*1kjsY2:Jb_V%qk/STG"@mc<EHf9&H@jDW:6,C7Z0`X:7]M`b4V*]S<e>P?&u;n`T?%/RQZ]]q3N/;nIo7(YgLem]VK]%TTT7Iha$/aoe++H%15.X)S(nd'1i-Q`S`0COJuhRC@CIn;(SI@1JsaI'JT9$Nqfk91r!,9XJME%lm'JPZad`Lgh*r4B'_TC`^cnY_.l^I<Y5b['_fhJiL7a)lg"\<e`77QOq$(N3$sTaTT^N%)[M=f:L0'h8#/9;Bi/;Z]Io<tEY,?!%h/b1&QfL.3\)g^tg(uDu`X56LjM.(S$/'A0<*81.P0WbMh2r$meG&O5S=HE$T*fi%+s%Kta6$NlT6nkqJXo&_F+,CsIJ(D2C?[cj%f.$d4Gkpec*4pI1O8;>'dt7#IR.ui:]/URf"a61a/7T^Kj5oDS5d`V&lHUQ8"ejB;PkA?_AHAgU!S#nD_j4!qSO*hEl%HsDZ2iG;%!,@JeA-&^T!S"(4AD&M![5ic]:6k^^.PKoaC@94G<1<uGI,nM<!7g33EpK!HT!MISXJaf*j\pLNgO5FZSSlXIO']sVMCSOZ0'-$E%OmQSDnm0[RO1CKNA%^q.]N[&N'1LmZ6^RAch2hKd9DMQB?[9\gI"J9u,cVdXPTd'`<L"K(FK=;iB1&6Xot*/HlX=En4lBY];q!!*%S$(L_.t=b[(&O6`\CXO'k@_:#h/G9:jLp#b;'@Aar0D^.Us]hic\B$q?GB-rr0Vj0U]Wrb;F&h.rV-.;ATE'U(Lg":n+BW9c_N:%%&^XOff2&qkK)7(e\CZcdj:O>$aPH0[gn:toW]/f#-gi>C;pB6of2$\4g%edt6LJ*DIO(D1KWMobn+BU]`@<c(E3JpZme'NH8bFH-%.GsHhm-:22K"gVY5LHV_dB.llgrK/>SG+Q&oi$GtfKJ@\^.Sh`RKq[7Vk!N7bXfGG?9dOUrOCT"m^q(H0FZ9Fooh@jjJI;&Pa<S>%)6%i9lR-#:&Xj9J;0i&PI``V4:Dp-UhWr5EDb8jOa$8bPSpUF#)+^B6s+#IpjSBSHlM$D;pb&]ZX1OG]hGZO3p[R(3pRlK+hc8>L%$MXBG0+gkF[_:X+5NQ,J,YsoEiEeaZgc!boZI2_>cTj";pYY;7]\^le7<$klIQVL@\C%eAa*6nt%@R+gmQO<7GcT`8p[P6SV3Ohp%35=)6WiPoJ)Wh(pqC1=e#;_)UEN`_InQ*CTZdN_JF/3@5Q@&R@l(YlVqbD"fme+1JmoAJ_IVS<2HU.G<iiR[]h8a`?q]sOSBD;8Y%Sd[9beW7\dhska1]me,5qFR<"G5]+'b1jQ'Ze.G8qC-?)&k#7Y\C^2N?Ndk7.@gjE-Kg6!fC.;#j`U=oWV.k2]%<"d8X,ZVDqmL#%G-@Ni7.>'o\bBDpA]#'gH,RCF.V@`Hh!<"!jS=[mclTgt?9dQM^h=Lqs'@oi*4u)S5;"TgC&pgW]Css*rKJZ7q(0hWme'MM*2#Gq%%Cj]\LMB)*A2Gs0n+[Hb/*28<Y2",,QTnPlX-cf&=aB&@0PsZ,dR#_/XkoEJ_qq]XLV.<>I(BlB:(q#6THa;A\'PdW\SjOPL\7Te%])P"[hK,fV-!D,!!q$(g,Yu"O1FbC7@Leb/j)ST/IJ2?DcF&/j40#<mB3,+.E38TqrTpqS*`O,i7MrblMmplF%VYb'n5(2YND+db%Hn[W<3d3`9FuN]!Z`0]Q>I-Qn]H>o+=Ho!W0<`(!1:$S"@Us3OiTuic2qcuo7o+UcNILd(BRB++Q_-(eU[;E,LIUlR+1=BeIXAQq%jj(n:A\%DIo@MG]lK=^6O1maOg4-C_HhYk8[i6"@Dr7]k:&M>erc@PdrmZp'5Gqg=r]V<M1d6)-(ge5mo&Jbkg!T$;QQ$Sk[eHCh%PuDnIkC6c!fT&.SIKrjo*\P[m+.7MiEHaf(hs4(ofM<9Xok7bt>(?Hd4kdFB@jg!?\+A_NnE[s8iL_dp@n1%X4+#cXLs<;ss0Xb-%X4V^>.iFJV[qP/Crq>jFoBiU+m(JHY@8F)?(We>$5Pi(i@XVs;rRTE!rON0.kp&0rr9IedYkfhpo]=3&?\aQs1Z6p,Z^j0Va6rWi%cb&&Aam5_Jmp@S_oTr):5MEV1p?p>ZXe`UY2k-h16ZGi(en4L?li-r:VUgg2XDc@B*.E<!bOj&7U;>\J*2KKt-Mb:nm18tmWD6QF%lZ0\H>5C)%@3H_^]Db/F6_eGCQ@D&'SGbU]3`RMRZcd-1EtQ1!H[G;3PK,aXS(YEEWA;/pY[1X_pgN:WmAl_^;n]h*[:Zd0.I&h+%nSF`a/)sR/e"_EDa#CK9eCpD&Rk%k'cRRAd]oV(&p:pPUUY4hfB(Xj&&(Aqmqd2.Dn^eTi0uLb\^qB@#>J0Id8l$LD*,iSQ-H8k=%RjJg>:Rp(s&,^Kd9)]-+Ie\i-Ul.%k(U&l`:<QH'[@9,4XhUEOGpiI\B(>KPNU;iqXSYb6U!qE`GL_Jjk(f5L^$<MBHl*d0T:Vtl%eYcaFDa*(T<.0Q@+(hZmI;p?P-=j#hA,FFGl??/a0Q)C#9lIfC1t*:Sj6'[chp#>eOR>M1=?99Jfs^$-[2F>[c"K!.K.-o.pJ\=h%a+Ke7I(9Gl)/"Gd#<`0rT<3(&#Eb71=8SK]jI^VJr>.,PQmpGLmeYH"h+-@3I!n+/?hHfF<uoKESsq$p\5l#/s(HLk\t"#OGU%N\%Xbi3KR>.DmL$;gFQLeV)=i1=Disj$%F<<5PN2U?l*o3?4EoSjCJ!0.Ljf^n-)etgdnRt=pQRB6=;D0'gfKNKMoBb/B)SPd]T+Bi7%et5[g(T(7mDc%0qB!>LC^=Z<fm8s&NV=phd'5`6qoC@m#m*]Y_n))iko]MH+Uh5Fl0,?S-Mk9".kdUNXaSb_c57d/6mj=W-f_.Wj%<qGb!LO\B;SCia1C@19W:$uSrZ'T[\7TRT3DQm75_rZ@9oAn?urD21KGIBs^eZP@^'m*][I!!sZY.rZq],Zn2g%sp`o6T!7q/uW]%Ok%J'DnJd2:TNs!<cG<tH[;pG?Hp0Ka04)rqcEKX*^5$1#!TISZhTJWod75kX>+R(J,daDfC[mn-,;n-gPGe'o]`P_!GQhVL.8$0%n9d.*ncrXbj7Cg%+9&@D]\[o.I.$[@+613sQRDWblnb/K0!@^Wa#@=@J"PW^5CNM<]Q@\&atI!R-6$$M981#T:K3`el2;]I)pc8n%R9NsGroPVtrH>"rqt8,1ld0S\IRhe1n&VfcZo82Nh&5bV#e-$nV)>_]&-h_CH'9*Wmc%U4Dk<,gCeAg5,(j0IilrY\U;Lnjp))EL%Ae_cRLPERhs.96Z972i3$4d/ErFqT\^F4JU>Z`ub\MY>&HZp5fY532c>.o@U7g+p#WhR6eE]I1g8$a/D-J]0J9mOL*I,)`#@AC]e%^d2Tb#L/lYY.XY?oFXXc!@PMLYVA&sd)_hmpAX&^]+4bbQ=5PKgg@&Q\spb+FUYg?U"A/@?d-h_a*oWYnU-:A[3Vc'WS@$;C"8#D%nQcJ+nS)llgf_ThLNi0:Y8ftsA"YRT`/Or.\%OX2?QU.iGF-3M":*K<nqU5_bQhEM=P5osC?*LF*?#['?CcAP'JJ:t/C-.[?%;57%_9);Jkr2+*OG<dOPBmTFn_oLWqf5ASQk).lf\n:ND<B5<I/WR(0h=`K\%dX`f_MQBjC:sWjSAH5K7c%p\p/'4,'JHJp?V\E2>ut2%ci()'U_,0Smb-2^S7O%YI=LR[[1[?Jj.mm5<akagqVBHNm<JI'+`j(/V6aP'TX'.?^CS);?$*fcq"e0;)]':WeGC1'%INX_k*q1p%XM!H;'3d8.&o3IIIebfa8)a"+eG8t83Q-$PoPAf`li-,4rOoVSWMX=CVYQB7:'7)=c?(,%Ed?W7ScF("T>trQ9Lk`)5Kb=19hE\k%D8'J/!s@?"nJBsAZ1AD6neF<_VS6oLW4gMIM41%5$p+1[GXiek0!`6%q3[`S74^'lrG+nAqtmT7?[qe-Y'<ji^-?o#5N,$#T@le!%rqYYrF@X$4L#@53Vl$r\YFOkVke$&%K/+P:n)7/dBC715qhmY_]ijcBSjT8YDfB*uV+`RBD60h*qVB6;c0uCk5YnP4p.2D\;[`GJ%7,Bjk2ou`FW*?lp4LLUW>e"buNc&d6667rBdJ\\T[IO'j%f&o!o8iW`<1DV[@,0bWpmmC<m(@jg^Y`8VJ!NU%p%j^EkJYW9\WQ-S%Dmnm-GW7JOi6$1kI5E^c'[QA8+%E-r52V#>5&kg,4Yf1kDN%39dtUIB0A%B8hjWPZ7SOVh[9)\/#a\W8jPnnjGAH(O^]0aN\+k(3%iU5.S)ukl#DS=8300T.fIV&'3_KsQ!A?(*nA6;\1B>9E)Ql`o`cBGDY?,(iEq4@Uir3:OW]Dcu"oBO]dd_3sc\!J/>-J)9_4ZIa9%QMT"Ml`jIM<B.Yai[Q:bqjh?:_YIem0JpB;l2&`,F7IE<*k&f_2RMFQ[ep"7,<e`R_N>0GL$4o'AAkK:Eaj7-;tlerQrh\_lM'Ce%pD9O4Vs1h"cMX^7F0#Fa#A;WbD^Q?>]__2B[J01HiQA'&htQ3Y3ukfe$T,#KeT5'k\T)HbakOqFQ7+OTX<>S5@1'FQ'Rc42AH=\%%(YR?Lm>$U@CEL;DIiBJZYdSiWWu;m^r3\An[(:DLoa&!i>.1f*XF>jHo'eT;EibUD/ff&Il-O-sp<S*B$ZiC[<F2)^s)WVLjGd6K%e@KMq$la+/Re%p,>spL*;7lLT)tV[NQKn?S1WS^oVm=^lZ)]fRVLSR"-6(bF\"&oeFpFXO%`pmVND*,!K%EaM:QN^61N,`0^@oBJ%^HZt^^Q&T4@/S<0dTi]AKCeeAN7^on^:O/GLs8'\\G5^AXf_9*^E8N<^!#hlkt:=*k:d_)Y12\/\D%m5m^-9AitL&5*%S9/J&J<M%1AUae/$=2L4[Zq'ZYM8$Vq4sFVREhjfEKoR#Gs+2m`m6"cS!*Sn]@+H:g2L`4]duP["NGclplK$m6X`4Bu9s>>95m'bg=AUElgVY%\hK.-\=g9BM9FQK`jo6-@^Z[Iq88KZ?DQ2E/ar*Y:&g.fQhDNfXKO6MV72egJ'<nS^0(F6>+UB_5<]!kA*rdYhS$;2pZC2pTD/('%.i2h/IpZE/\"b%IQWMZ3qT7s@T?m,XbJ!!+W?,92g_f[5Nk5plZe%b<jq5Hn@(e(fk-M*YCK"SIHs(dnoGP1#NK<2[2sc%T9E&_u%iV)"&pLCnE(E]f-Ocs_=_<?s3/(>*:?J\[d"+*4KB$nY0mVCFI8c3nR42CBi]Qr%%SN,?.AMHuL<;MQ,2Z-7Pp3JZiJYTt\M`5O'%H[(9:#??T6VfWNiZ%M`Q%W_Z2hGoffIQ:_S4RKenT(^Op7<HPaW%"9)L`.8F\GgHQp+XklkAMcl1:'qo4sPir/5)LOk4]gl)'?[J%K'^/KZ^lJjqNi5r/@sqsUrqitgrdgpNm)B(C`g4X_Wg1F+9%cAGHpWtT6l"dD@,9aZ'P./AVc2D47^^e2eRTsKETu\L>[?a]f>n9%iQfk`qP4@9oCNXo)6M4js04Tig;!J-MuJ<UBefZZZ*Q7Ae'6DY]=%)\k@_;qAer[A,-1aSZEjCFm/*j6?9WOS-GfQIaqmNjKk/pU%B0LIMi;D,[_-qe!q^]sZ'BKVSqTS]%U>L-NS9a-h*4p4Rg?P`hNK%0"^fTN&Q`*4[NLjFiSfPe`(TY<&D%bHE0uE@/D*t(2,-Q'*%GA-UgguLd]Fs_*I-K7(WO*/.sPDJP[3-HY.)UMmojMdIQh.EUi*uI$o^%tRSV7/69ojW;gA?)9'O%d=eE1?kI)k$]rcYNCRp3SlK%3OqH=hS#&.GFo4+WN6[e*gsQEmU"Q=GDr0oP2.nUjo$t5'S"0LhaOY._9[U+9D*lpnccC6iu:4D7X5ao`q86'7/(J9q@!.-4(<TQ%58MVE05AE6NHTYa\_,-G5Ba$'`*`/QSnu(trF7/kp)O(:mlq?7+"nnc`?8;:YPcLHQHIS<A_8JBj""J,?;;J5i8?;A,]3aT7*sih%RQWG-Xj105,G(s@O2"c1jKCe>ie+@YgFjG"592k5q=se2`lH?WS>K6HXDl>`6,2o.o$u1K-i^jDUt<[`-<K-F[.+Z`$e."KE7ebY%\P=NZV=h=TqNL5<rV->6TJ62`7.u\sHMt1-;1/CZp08%*[#=[cMna<&VnDS*d`)*pjkmRmq_I`/0Aa[cr8!9tCThIP03u4q4)"Z_%?G*C,o9V,EMgW)1`QPYng:+*\mtIb/#sD;NR!H-F4.$jM,kZ44<oI7C=_.Z^SCpZl<eUA5ps`[kZcKYU>E@?!35p,l+L_g7AZWbn%43qYEW`L81-1sUdGAPHGf+%7fZo,e\T=t-:)ER*T(]&;bj#6XKjOW`bAY2.(BJLoY^>!`t?Vc0Q[tY`V[pIVf4<!QMQ<N)Wa-qK*%`f0/=KB8V;9&j[Hc0'n-0O]J*rn!tEh7"n5/>AY8U%9?g"3Dg=c)IZlcYI39Eq.iDHU/)&L+s>>rXY352SS[dh]N:uV_EdNj5=@r%3ph'BU2T[rlu8@opgLYfpMIRWQffSXB%K_7]u/sfQPEML);i("n<J<L-.uu+hQr2rjM_%Ve>[X:ajJ;t6<ChuA:f4;bH(;^RTM('%;p6C9`q:LZ'B2)t"NbJ."C03\<eh4/a/3aW*^-M5iDoI\rk,mF*C?fbicKr#L_h.lO%Y3J&)mK(]n&P<4*',p9KLV7'#RsL3W`5V%=)`Y7if<\;aEh1eY5Ime"!3Qs6l(XNHf+0%kWc(m"T.r]ep,R0?YO9rRW[rB&&P8%0LU8<"tmIfbjBTq6?5lI^4o*F"S;QR-dP?r%Aq9VW2PrfVE;nqI[pb`NSF7kCj[i%d\]?[&l1X/gi99:@D3uU5ZQN7`!+YPi%5.sA(iNmF0slqRS4)2n9tWS!HPdR#]F]i9Ddm:!%J2Tla][u(52"C.h+e!1[%o?a^AEC)*YqYq>],P4"ZopeZ.o/TM6i5^i:;k<c(f=e>S3u+6ZnlQXf2ro-Y!1R?R\G6QKU\p&&$rKm%D?]jI%G:p*:>"+8+HE#U?m^oOYr7b'E9qjsL^M2J8$3M"*'<=ARQ,I?Xju.E^^q6@ST>ajj&fB?TBO)d7`JJ94g5%PUGm%H4P>;[%S[aEr)Ct,2nAJ(*7;I^V6pAL,)A7>$M3mDALrj/3E^1h@`4./?/!4Zh`K1%HU]S+f4]kP@$QhfDn3,h9?U6S?VXI5QMt,"p-rj=F%-I]JSNZ'G-R+.E*nDl)M933TY16;XfI*lYopXiT1K\-T&Lip0'bJT&hB53;p*>88*eRJ$*4Z&^r^VmYEf[\!4.4j.Hc+LU&/1cdJ%e4RHD>^?-sal4sY.XeXDbFh<$F3<PsRDk"]j8Nq+20J!rZ+@K4bqW^(26-c_ZBe2,p7n6Jm(0TaH'8f_Ipg^&N4NHr$3/JSQMft"%]8t#(kg%u\"^r=ZK==#BDJ*U_l9$IdcrZr;C3qSI5&tMX-:mO;NoKAgd7+i]o-3%-]F_e@G^I'*ahcMr9P?StYWXWs1@.^Fr)s$F%f]IR#dY735;WV`VrG$+cE@OI#^TC2`C?3.MG>6NNL3gA&=!*Gj*+Ep]le_6XGj4Xc&lX54N,J*e07l%T@Pp;tCVI?GGi@ls.ft*H%3;[i.I@1Dt3kE"eAF\+%c6M];/r#aA`r*Ik41lOJh+m-6V-]IPhhaOU5MS+B3'JC3)f)$N\iD5*a"0!@8K8Q;Z4;h*4W\+H#<j-j%Y$Wj]m#<iM8ti?cg+a`\*-Y+=e$_XLPJs(CB=ah#jf5%amH>u;Q&SQaG.IR_Ll->2m8'3No&F@SHXkT4hPm,h?hG_152bh-T2`f[%#Lnr'._1m/pipZ4Y%A7@G2=n-P$(m[j0[$+nZ%hnH.g(5jbHWUI*uiZCkMFakA,-RCB!MCM:jPSnlqbUeRK=U2>d(Gq_a[FR1Z'Z%WN"JpfC(9hU*hM&8l`.j^Rbns-%5`uah^SNSE]m$o`./TAo"6Q]57CRU`Rh:$r8q99-!%USWT<XD^f``*H?PgnY@[=q!,r+Yaa$$%NpVJgZ.\@$rN/MYe(5P_9R_LTO3Xa'R9M\+]p1PM&rlWle9$XPJs9MH^S`t+2t$ic2PLs5;sk[964q=-Mq(+rhjpoPh2Li@pFb$J%!ZO.tJUiHB,s>AIW`^45<I(ljkZZB%g?KCl><P=mjP;\YeCEDN0&SIO=^MiS<1S!(>Ih^ca`-9$M:S:&!ij[=7(c*^O[b=dj^r3e%-^K`2fAuTWIorhPAF@?nL#$K$"3@r/G([)EZ<k<3Or;?3\(.*g4[3\BUYl%&#a"3)&C$N1]73K`eKnh&D_6OtDdfj6X_I_)c)0uR%>@9t>?^"aVlm=3&IH_-oh,9!-q:O2@o!*1C$b$&SoB<4SL[!$&P@bQk_uhe[qC/98-&Nh3^-jUp$i@<-=19O.KiE#AC*EHG2VTR<%/[AtU+j&!%YfW_m&`<ROQB((O_GKgpfrrlZ\(0?uWME81Z`+j%7;79@'-=1nq__Ta3]0(oAYMV*6QLj?0k%SM1Q/$McK^#qb(C/S%](o>6c`2dnXoH]"T:Gm^@J<.\p"2#J'rd,1B8Cu98\4>09[p^Eg:TXC=tc;0`O'd4'7CkZ`f7!Kc;u[F;3G;.FS?!)gqU.!Y@[e1%oX%.r)F+t0OseafWfeK:m\$TUZj;h,OCfm//?qt=7'/6O++rfUCOP=O`t[&d*,UcfKiLjMk4NFR%R1r;K&lI[p&S/*^:_)343u/W%%fG;^Z'2K!gUpA.i69MArtgJ6;i<KHG%9nt.tjFk<\CN!//T\b="@X#T]::h_[,QX/A9e3I7i?9Y=g#.!Hr:0e`Duh<]?Y02iIV/%oJ\TFqK,ujm_V!/6eX2+0G)QE*r7mR-Q7g(1_6\mgXSR]bX9*$SSfM&(m;$+i]57NP@`4r5Wkrikh24K)i3Z6%u$'e2\=;L*mtR?%"p=Ccjrq>lS\[QRVg6pNmHJ(&T$ofdR`!qj`3Yhd;mgo'Y[4pYLmTLaFa!@q+?/8$"7_oDiR$6d`,hB&^uVg=M!$T*794Rj&C5&3%%ZR(%5WkriBO4+h)i3Z6%kF[HAg!\o4?ReQY^q&)H"b(0"6SRhkii:\YIT:,R>8N6njETMSE?NE$J=#s4K!HaF>a6kSE?Ndb3fJn%3R'p_fGP+9F..lk`Qhj6T$og'o]0loi]59$`[kC(6r,@pY>'3p%p;QM2\>dk3>4.ZcY4HKDg;NhnXSa8l!N,s5Wkri#S(nk"7_oD%U"N(O"7_oDiR$eV%)arhLI\gho?d5;>i,?dD&u`k3A0fMaCr#n0K*P=1#(,V`=$m0D0=&Z>rg2g.^n""@T(&e-3rdV;2>8*p>ShK%qK+XdR2n8"U<fP)3cNA4T0nTP=k@X?7%/G]_0.S!RXJ7.F_tu4d+DRcU!Domc_%[]IuU]a)J)$f2J\To+X(!cF&c"r4M/Rj\9C\L%%<]k;UrBR=VVNii124"j`)]V096eVj\S;rbh;p5<@cj2AM"8$G.N;aiotk;M>XUaBTU\WPM2S@2*L'Lg\[mTCg-I_F+1n1lg-I`A%I[CMAVh^&:mbTs,3>IV7`RN?Hb%^5`mA-=/#cT;(s6-ALrct`pJNg,NNm=mf[sjt*Q"jV=`_=U&bF,q`F)51XGbZ_Hq-9mN4o%uc%D*6Oer)ap2B;V9Mp#ZfMlDM2=HI.^VBbHJN>)jD'fD4Tb<Sr#c8Q*Z(\Z]+W*7?Nir&>fq0CC_]Pq"H+D)sM"3H6o(X2$'.nD\FF%-S(ok(BD'tg%1-?`BVDS9cNcF0,.K/ZJ1VM>XhuCa_k&.;n@ptRZlR)oYXp'>g:B.;mB[^+g0s<D7%G$4?]iZFR//d3SgQ1n_b&>%C//rA[d,<eRU.rAYH?Rm:+S.e9TG#nni&TG%m9E$4T09ff0skRmnfYVdcki"fCuc<Zc[YXDqpgS]h&ZI^=+rR\m>J6P:6'<De,uD%A_K<f46lp!$q\l-B_%(&C9n`4,EGq<EU%"'rrt%ZhY5>2j4<l06T!H17#UH$.d)e248B28-9t^VaZO?X%KCbF9L7S'pWC[,eZT]b%o4IN:?M-Gjp92-of0YJe0RrCg^K+*d@t3fE^K++1*o)8(<PMR0>>^rXqPmmQV^Kc1/jCdSfj/Ij8M,snrgYB>E+@.$cgZr\]CLQ)%DB8YNm)jFd5dq5P;NYE)$Zt_(No@9(/eI6ti>k;Hrl"rp3quIh9(H:D0)HYV3e(Edd&k2IL<SYjA6]aq\q?;4<bI?rQ[IBMB6qU3%q-j78I7fd2b6gX#Q9J#$qXH4uQh-5'T'X4&>kU76j("EFMoOar#\eVDZJNRM[sX.Uq8W4Tms_GorGAqt^>8I/L-SEWY]TWd[f$(e%h@hQJD+mQec2OM4C49_s?nW_^TNuC4'S![k;hu:j>j8d`>bA.raj#"NdplbA<dd=_RNK]0Pue!YVOF-cVlH?1GFC[YVr-Q8pXqX7%K7-2ST$XLjAU4+'Uj,CRRLPrLSr?_[Tm*B'+$M&PL+%Jol[SbGo@fpQbH!O6el`Al7iC]'F5\;Bq-\69U\*F+.A#o/X+K\FbNGtL%5(-LWbq^:V/1gC#ei%8Lf]'/!Yf#lnGTt&F1aK73q$9j=)MU`S`(WK]n@3HlH=C=Q7SSWX2u47hAY@T>_jVP0M9Y^_%B;Pj3"NH9%<NB7tJ)A$7ET?_Miq(Tn5M*WP^%cQ=?"tI^7do&TqXpI>Mq46!q^-KboJgPC?s^o)[!4K=].cHO@1r(9=bl"_+u6J2rhQP"U@ajE%X<7?hY's!e&8O37fZsGL*V&O2>k3fQ0DCC'qFNO`0^CYtLZ91j,LRX*<khqHf'Bep;R_u/=d'MCm@mnda6]YUp%ig+[;LA?iZ=0R%2?'rZN3)c]Wd`Aj\@\@Hr[nMYk/$o+Vn8%"X&I!UqYJq%VhGjK^CScVj5+%\MsjXTVI,FQkABI!pqa)gEC2QuYEktlaJ:md#]9/[%DOP$;XooeKEM\PTN(NbPC14J,q+_*>TlE)(4Y=919S[mV[Q*j3[YJ5S9oHsqPe+EE]%52WpC*L>SXu#\M2t)91jZe)5NW(8-,Ut.%s+jkrZfL%goD(enBjY'S3R@P3DTR)RfgAU.%$P_FM*Jd@I'R-WI""/WqBNK%<<gVAI*Za_\%`5`+'J>.[Q5.Jo%P\?oljDn2#O]8%^[cfDS4XYo<KCFl/#."`L]6c?:gOjhE01pTnEe%WrJua.%_mJlqL*U7kf2!9d[!d,^45p_Ie`Hnj,a6'pZdh<56i:FruRaNSm?ZL%ZF*].Wuq(cI/#Z`D*"fK\1hEZCA#I=3,a[_&Z_PHNGk:f+5V=YqC1-hDu4&lilt]U6IPKi]4kHF9n3!8L%UOS,?'*S*jHI6lGuY@%=.<:Hk0mT,&^lo=H]]>]\2j.urC?i<N]q\@*J]FA\+Z,bJ*u)u]Mflr(Rm@Up""W*8=lt)^3UBn^0'9@]RFY\f"PNW_rY$J&s%/V%R<$!Ef-)eLiq^,:k'ZpVo9&R2pK+l>g\fA,p;ah,?!hN8FY9Y!qq\,u0,C96e:"M*Usf-U#Hpfspp"&8WTunM<q'eBn]k3`4M4iP%5*DQ:Bj=%L*<;;Sm&)3JRcO+*m6Y]>Z-jlJZaPJa_qA3j!c@m@G5.\gf5q^T(a#Ak+6Fmh"Le#9m\]lcLfs"=[IXQoepEAe%7(%F%X$8G=hj>(bH_NOl`o<3_@htYBF7,%\RJL$*J5<re2RZn4qMfh6SO-8PNVi(^'.rQ'g3iq4Zi`Sf,KR7R)#(LO.Z_X)5EhC4mVhh&%aD1/;+%?Z)<48Y!rT@cpd*)0T\\Eu:]a:acm;C$?@[7aO_hlcf]n,tVO)H@/XaJ7Amk+9lX$m+:j_Db!ghM+OfV3H8@)Ri,U%*k,%cTgEQW'Q\EDU#:74h6%%h9))^cHi?-9Ac?J2<j4hPAaP6RJ8kKs1FN,O5jDrB\r47p2kFcn"J)$+B%qT)I40]Bm%;j`)eD`#tOu.%dcO5[+&@h7&KpY.^"U0GWR-P4%J]Xma(Gg7>:ZLIgIrp[At!W_hqm[621$MNL.:!scUjrSeE$u1ie8cGS'J`p0s`q<roWmaceld7%XP[8Urb7T!Y\'(U'UCYonfN#iIfFf'Y(XQ<Z\a[V?d=NKa1@Tabti,YDGQ[m)XID$3L8P_K=na`m)?eQJ+_:Sd:;D02]&&5/m.7Y%$?#FMaStu2f?rnY"8[[kRA]i=C1"pJlg--l:`__FUKehM[T_IfpuVWBgh+1BHi1*E[i$6Tr,q\:iPMg[=gL5qX5gUjGk\frm!Bg%%%A?eS+c+Cop+rMo8;;p:Suo]8r_X?B:Mr`e"l+-EOB^"fleBE"<Ed\,Qj."ni@aR^YEZa-lNW)\ASpJ=CU>o\:U_P:p>lDOX*!sd%mBr=^lkR2#_b4,f9s#:CAJqo;o<$]rgGaUM/Zq^,HJbY:1Y9(L<$p%HNM8.Nc,TIBSdgtd2s("p'b/PRN3(?eUIE`U64RaQTUj/-%<7uFX[^dQhpL\NEiDXmt<2h%m12tU2giu;)8`,C[%0Rs$r\N*gXr)T"P0UKcTh<+`X+YdYeZOROG]Vik<)p+Wg3PX4)][dom1#.>%r%5=J!gQUTdFFG=WCCY^n#]TT:`oH7r+QQ>mGe!)p!"gp-'-%qLC?$(koJ"gBHl?r'S#CJ^RM?SLO5G<oS]16TeU6)Z^s7&>B@DR%)H<_Yrcr]\:N\-d3dsoUk^7e`ND<Ceo=.,`,daRDkL>o8FOkT=:9)'Q@O8+q&\L5bpY6?Om9"]<'.Y_"]TFGSmE9gELVV+qHO+PY%LEJIZllj#T*W]<j49CsBK1B<(\TnJLDsl,1&ARS4U/A&cI-(AHq8L#cqp/9HQ;KKZ'W`Ui4M=qar5S\fMj/RRXNX2l02s[W"<3jf%_!,uc2g0[oTSSd9GkJ-&IrsOa]KPU8^kl%$Z$1<+D1)7eEQdrkj3-s`eJb*\]\4F$5LO\1A%:":)Pp+Z_)#$arS8Q.@LoQQg)f8(%c\le1qet4?WiCs0oeu7,*JW1m*8j8$JAH]!pHK^iH5i(")FH'Wr;&-%^mEq%`+E#ncJ/-fkFBIj`DGCj0lm+^S4"=j&$NJDFq<j=%U<U<^qh$9)ql7N(h8X3)p",ZD#N4H^5`k/]37_9_mbY.*ELkpHD$1`X]\3B\GJBZ.+Pn#?-h]-J,%oQJpHP@HX=CDsfuDur\P@ig%]76tgN8e2L]m@7Xejlq/+\'JCIX0E_@W1^%>_`r;n)LV#:?%KqHoZrI\2>-!EmdPGICiT%q>%_m^[$o5k@7bD^UeBTTLAcn%8n[4%Fmu%t5Q5[Y@2lc?[$J18,N%h??5oAna//"KG2f60DXAe<=O8MWk&35Nf&'L]IeS=O/!h[uT0LZF"1E>UICir.=iS&TbJJptdYo5+%O]pB#qOb-tJ$G\_f>%6)DLBH-d.0s`eGS!t-Zd%.r8:Vn$.s?Pbi]X6O(*/8o=(S8*uZboq3@A&X0Lp9hjSCcb;VU<\I\F6A!T()%FgQ.hG&tB3cFgD;h>#?aR83_lf;C!)eA%G-mf(g.rr=W/*\-t5hs?qni"u,(l`o>>KEH\40)e/&rVa5W3^7tfcihuRTT\17Q/',5%CYXuoc[T6<5G'@aD`"W#q_.!_]8s\F@duUQC-53/n(R2QI5(-F/8'!1<LsZtB5"Zp,89fOM)B`h\]BT/nQOc--Z0_2b$nk/EU;`G%eZB@k7\"hr\Z/s[Fn</Os7WH]YMJqE_q!C)YJ#9=etZol^3`Xf/`Q4^O!Fc75J:%IfsLKCc^.iSGI@0/G!CCGA-dOeh]C&[pZ%%p%F5Vu6Si[JT\!PLhW;HCMC,d.O?Li"Vil6a4,Oo!u:ORH]Q`Cnmm3"LD?X2"XTRXHM:YWY]qg%Qsg:+$Oqb<kEe0<fIhCJ?LLY>2.%?Y069r[76ePQ$$B4uk?I,C_aqjmMuW];+@i>`Q#&4j'PS)cJ26OBEg6SG),R6J%TQ8[&'#'CNEjrXX@5cbE2b2j-*iL/WN6ErUI)%WK%s>l'\C[QH[dqe;UjHYB4XhZYWtFBANd2<)4\4S#;Bo-s?Oh["r.?ou):!r3dF(h8BJWN`Q1*BOWIrT&%ZG]3t1M_rVc)<[Fd%%RC%FVQ-l4Ian(G-$HDHNK5jmEOhJSeMTC&En#>HmL^=0f09N^jh>VSpR[ud6VDg<=0YVjHi\9oKqDIo?IF\DmWqi4D3FsL=R-g.1%jll`i&)G%F>=uS7qu3;b$op.*MVgPmq"rB5!i0b$5CWV.IJa!CIQSTJ_rcFnr%J)>QbuE3_`CN^O-IE8hA[@LfO6Wl]`!7,)I?Sd%)LX]ZFSL4Uli-@V5JFlsr86Hnrp'=8m3c,=_fN`X&)Q:VD@DS98^Ua-j3n,Q5i6%=D`J7*n+m"QLQ=fPnGhnc7D1f4F01T6s$%qg%XJ)!BV(*.LX#*J4,*CbNpm*3e/]on#nXD:38Xc\88l_B1ZPe`#IOH,;rpdbua)1bD%t=19_^ZS=48eYl2#Mo_GW;Kud`\C60;Bdb%FWM&@C!nLUSS65RC/k`c%,pro<%"\:<=rYg+/V90No;$cp-*Fl4fu#Gs-%&W0&h9RIkGT[O8dGPj-4,$'dY>,3_n^7A,<j),W[Q"%TleE\`i<+)M,L1qFB58VJT4_h/;^YL$OhugHRcqAOu/0h6A8hPB'KHfkqClKs)SEbo_1%+AH`VXi.]`C9=*S&dlj@GU,(_<;;`jM%R&'*1V+umrabi4ZQc\T7<r<c5%!-H4($0^<6q)'K50SM%VO+[L^Nl]%L=t$<f27ss3Y/C?KDA<hoQ""1(XFpu,L2n!i+Mg)>bM]"%?_6L.XnZh+Bp!B..$"@i`5)Vc62o=H]o;X``Ucc4Eq1K:0l%g60AH[*0@05ff)%DPZQp=lEBq(U<#iPi+6GdNdE>\_hkYN<pEGkL%3m6M>:S>MbEN]AQW*F?5K)e:D4.sr?bXmbf)!dt&oeJ."%OG'If`<F$]dUk'<#N_jR=o!j091$W\K"+"9F,==Z-MsJaGWsIX7?Au%(It4.`]EKQ*9eH@&<!W.6gS;(a=_/HfOGhr+W*ngPsB]AdQ#g`O:3U]MOW-n*!/sM1+mN^EKT4eAX4*&kYMU+/l3]@E5]ee>776T%,U&8Z(ZV\6%RHG%C3`Uq^aYZ1E=NsZnq:YZU9_l0fA',U[H>'EbM8\:$\J7IHVpbm&-[;n>_Y^>H3k^7>R_*1=\&bpdn*/bi^.+E%;AgibXPtMOAN'e:LEm*sCO9k=bQ(9/:ISI83,T@pM9bZ#fE@?>9\RCO;'sp2)f_A@^rFg.SuDnB&&Dd>@Yr7&U+?q0[O((YMA55T%(/`ct-866T#hT7<%st<,9E8Y:]m#%tkJAZ[=\jZD1mgE3L+@k(QXXT26`>SHE/Idje5:Kp7YVOR>R%WmhdEU3(pir*?"'TUZKO;>%9-+*"=&lLs6&IQk<q].N`,nC8)(\L#("dOJ8(\DuA-PfpD[!mP.;gN2R=ugXA\1BnX!kid7dk31oOYX'XAfV0=%QjRTZA8ob7#p]%/n?D=kUM.c@AjWn/[-d+(*Go+JHle@Ym1s:JDVhoc82sCS:$>I/E8i5p@m"L])<,j.nEL8?C#:6QKFiZbNn6=EVhcc)N5N[EJ>EH%I-cVP-G?o'h:Bto?@Z!o3%=8f=N9S:bmA=l.@CS=<fu[r5=XF"U'seM#<rZN#'u2p]R=sS#tu'pkq4Z-bIfBf1&)J#<XD64(jV_;%W.8%_=ha(8@(A9$0:?QhA4i!W^gKI'ASf#-?!r1Hg0ktL(O_\ZFI3-1'$tNB*))k<.@>CH3F5ZS0J#kPb^`M$ed:CRN-W=?F!,1[%P/3:uMR\ue=f*;Ul&HG`l`#goFo*;`UZlt^4uq[ZK&A/R`W<OC":htA4kr2F4aBj9?q=,lJEL#?#WU'2/?KA3MoKu[p^@<G9>QoV%O>^lkYJOephGs\oU*r<kFI].`,p\OGE1A1J,+WHS\^WC0(d"^a*gREb)Z!G82;"pHK+-"[#jf&1j"XVR-"P@?'M?GQ_)Qp/!E!h$%'cZsN@.G#sGEG>RrrfotV30"oAo(9S-9t/8HgCe!:C891/hkYCTOB71N2hPp#8?\_'L%kologDUBb%6]k6eA((p4(c=<<+d_kC_Q%<_/K"([l>_!iJC3'`/#m3l0d7U.N3JPT?u8,P23T]at/R*4l6D"[B?"%"JHjKu93uG"5+<;((`4dls!=$rpHOA6;qrhI/a$"]:NH%KiN2=qCoC[Bd.pAEu,#qI0f6Hp)%<qcniukg-_W'4c9+BLMI?hKW9T$-.*ar_E5aO=;fbUiOW!UPDXL=@/"&4GhMP9]8"k$@%&cD%'*tg/p]HmI:_!\B)OpI*cl2\'Pge3gr4<-]&&ABn8;ars)YaNKU?DmCbltKB6++O7V$46qN\CLPnb1fC`h.$p#Rh)u(6i\**1H"5%4W6'^)JiGB2(*;3C1n\cJtiC5DjFpjZ`b;64ojOjQ9IuHnG"MJb:\9/4pNB-!D<SO^gaUq5rfU=5;08Dlb%-bdt@]U@Jc](_`_6%%hM2C(fn4"\*e,J1A_Q%"0-sE/A&/<#P>L/0Q50s;C1TH";3o+e`kB;[Lt9.Ci+#tk:1F&(!.pb@A:H("@gX'P"_AklZm7*nkoX-P%BlN]C@=2Y>heO$qcs2.NmK-<;e4F-I/Pnd,2F[lOJJ^GGG!VG=HNVi.H)2*%\I[.*QkK!uDNu13NqcSR+_qb]"k'q"dieou?li6f%_)fJoM1m\WQ:+qAQ(`'qCN1d?$'QWrmpHG>kT`#M"DA*D9#?-hK*)G0.U42Tn2)Vs(C"mtd`q>6g%<&f1-&'-f*FW,;20UV4_ii&%pP/f(@,@=c/'DW,Tct%N&j$tqoqI&N9YOC<d7s3hl_Q=G%SH.9OZ@BSOOLej\P=n+0P-Y?8kttuMA*hcY]SnLngtEE.lIV:iO%ea%^qOf9A'u&\QT\Af&F`4q(.FF-6En8m)TaW+S+gAl5VGj<b*Bp$>88BKH#b>*pp4/:!B\+c5^>h;_FY=g^od5):`YJQU%*J!YA3<d%BW,N>XAkdJ*3li7R&.TJ'%q43`1h%iQi+_rLS0EQ%]j&r"^N8tF;_pmEuI7I<MHA38daiAO;i1K?3kiTd&D"%8RA#>'mVJ:li!^F%QNK;n."h.!';D93J0@m(A3"%k10%k;gV^mI?HtHF5m40]4UU[,`m)n:COAr-EA*JW#`FUnhig@XVEr0Z#jr>hM_ET'\-eb9!]*kX%6H!C8`ap\8%LDP8"_O!f#=*%CMU#M=E_=/mlka;eF4R";gj4VmCr0GK#.K7<b(g#8)InkVS6/Q=Ylr')`*pZ1O$\(#IAu3U;1d+3%M5#!:D<5Cp`#CiCl#co=\1Cq-0K64&lW*O-CAaO//2gK)dg*:D,bm4*Z4N(=^e<lYp_IHAVQFF;(ZHlYhJND[65"o2o(frh#C5S9%`rWG292-E/C`1c.$B@!E")pBA`eOh9\IIRJ=l)d)7^^"'J4b(O/K88(1OLVV(J/T4!TW8a!#*.14sYYFC7a5b`]'n"0J3/6,+6B5%"%/eF;n6fVKA=:<J>ggNTt"VVUH6d?h%Ek\<XPW]9#d+rRiUC():]m\Q;R%#KFT<+0q<fg>1_<h+MLG7K=!1E!l1PUW&!-%Um<aZ%;o>WA#2AiFC7[TGU/_5jb,FIZ-jb<JNk&l]Uui+&@)+eEhVE.oU^k1bk47c(/,5[`&#jgi=^bR0^.Fl-e-4m>2W0"Ig4ouROA^It%$$`RND,(6@bbSr(;s].N]7C*(`nP\RR%QH6_U+NPU.PQsKbG`sK<%BOd$7OTO@t5UTrt6%Rp7t/j<15l+ahbeKCOVT[h;JUH2@p;%:*M8-"&'EpYjfnOncN8<ma9!j[EWDNJ>6TaZ\8CWpE2eLp0cTPa'6Z93UQ2[+<OCmA&3hmV"*#8Ql>+/OjcYH0fVpCS9bWcf)Ose%ap"DWYmm8'MW@P:Bhf8h@ZFmAji/i6m:4m-%?5fd9YaX$p=]Zs1frVB]>-8Iku*-pYhh@7-Cb@$dE'M=kaeu3`.26'.&;r&9%bn[%!LUU:?n0gCZ1Ciq#-tJW7'B/b#!+f*[pa<d@$6\A*4?9L>e#$3W%^k#`9Tdt[L?..@)rCAq?*7qN0U2(r=$-,onC5HDcl_iD?dlE%bIPTRD[c6:FPD?YT[dJ772/1InPtk`8C7uYWK<$'^`FZ,>7['0d#3_eZ*m(=oeI.3rkP+-$`7iMar&-,,0+@:)>)BFrYrZ`#kA%N%CTgt`=JlpaUTb!;io'_QN(U<DgUJV>14Xpl.\T(k`^HN<g.$d,_ucM:3%ca,TNbj+&#_E"d%CdI[1_7$/4U?]e:t2o#Gj8s-FJ84%BFR90K2bK9W.6W/"K$OcNIh_[&^V/`Gk>Sd%n;b24')Yf_8$qbW[B^\bFuK.@e\!,JS,%<ME#1'L5f=;N`KRAAhOQIJM<,-b.n-8%Vom^s>XlX[V(,HCD5.:8)PK$#,D-!O=:uqQm6go2YY3bp'mMFr.e.6)GIVnmm#M3!K4YD5FG:6@qA_$-/XI"S.&8QFh3gV6c#eC#%AtB'MSVu:o@JU04(a!25dWj<AF+T39j-3IENrrb*[S-LF"KW7(AXm0seHjnYMqFV)g.NUc,Zr"m4AtqseYG@gfJ<X?h3)u]<G_?`%[L32XRc6)dAuJV^&HXLUkR!'.3(X2p]KHHO!=,Z<Y!Iup").La$lZQ?1dF<XWKI3_"hm=m<)69ui2Ufn@Y'=aNm`ds5rWR=QcrLG%FFYKj'3Nn:Are=Fj:D,%!Y(CU]U5\.k8[_"KFs8A/'D$fHS$TQ/0i^Q>.--f%uoI!i4g[5\d^KaGkbDFg'q<u@"Y_,<OR$A+2YML%"#+T*em"!/)ghGgBP:sPMa%F)>H`7d\A1'h$h3h`MEbdJ;b>RCXD;L:`aihbP!4Qf_!k_o[C3a[c[Xp@-D6!`HHX;ha_1j0+dORY%hghPJ&:b)>69%_r<Ld`kiU2<DO$67QJ)S;Pr>0`Frrj[+)!<s<H,rYT0;*"<Ia)0qrehtprrO*eV6RL".2\)H_%XX=[>el>FC9bE%g)^Y5-?(R@=a&2K]fdA]i54tKg+Ed6-jA^:252K(SI[_*1,9hdU$Ub8/dr^aj2+^3<.^kZFC?FK1#:SggP(2O#!:oe3lBWp@JDOj%$fb4I-&R=JdnEi>0$@@Ng_0o[WJ]o2L`5_sSgbb3nQ6(bSc/plHKF)L!oqTAAb8fLg<H=6KCSKOhg60,O;e:X#)+AdX&3VS*6G9S%_.=Ho!Y/.a00kRP:EhMLWkk_YY1#@glOY)3_-u]GB0'ZL8;*eGMEh.G>!1"pgq=$7pQpGZl66jX>_IdFI^$^P,(eLgRsis7j:LaT%F:O'A9OB\O*DAij.<8).M2%V]Zr04US.uM,_oL4S(3_9Q'S$JUfn7,GAI\%Y?O?D#1)!qpmag8k?J'+@="/>e@AOfT!n5jlD3\\/%@+*o^1i/h_JG?O3$>REL__;eqcpWh_m"ach!n3TrX6)c$Zq-R3Q%BRJL2M,FJB=`i\9ncJ)_`(+)P"t4N-BgRIHO;#&N22I_R]FO%=5j?<j&?<$?nK`Q;]El;EDu3e'6am^KNo8#dm0;7[eYhj:hm"[0ILhCV2Z%?Z',2H;9nnNJ8$#u^VfT`+[_:+MCKMLfHLbE1'A$8%jrBT>-UWq#$Wn/^0KH;1>2+_s6\%#/SrDE+6pgrdJ>7A4n5tj_)+,2OIn@N(REG7VG7NgNG$U>hAa8,^'0Zn/H7nuqY?<<hXIla&%B[qkDCs.HFo*oUaj?;WGbU?<e('7b/e>nfAcY+V&RAkcH@0J!>o+mC@(URTP'U+)Y;jZGV-G25Bh$K)PM!*3AJ2q18.<FYiX9L$H%f("^G3H4b@TGElIc4[CcT`.>Z6I5]8:*rWu`ITIC0h-)GPRGU]dbMS,Z=Yd,;eqR$+L!]CPDre`LC"tnemmiI,JBiS9`&(H0RQ):%(d)8T#(uuWJL46>*Z2(%&JpGO_Qs>(<Zg)cf+n@q6j$NP:(E!_M90BaMK0VZ8tfn"q4%i?0QTj"hmr8p;1gG=VYL.P&(3eeIL!eK%r/;[8OA/ch1c(L&>,9aAr!P`!=>_r7L+B)(dgs83Se:_,f.:u/<lb0m+0beb06??aPnUV/9E7)c*Hm#(kJC@j.7?s?*m;c+PGiq-%6H:6ks%:SEq(+@.L:Mg]XWMeL;>Zu629:Pe9+5_VT%*;]+(0tV@7m>MfkEf4IFU"199?"mV0Y$>eGLM#6e7rF*XDE_!aGA+g<ue1%&5VifG%1Y[kT],C<R,j!W:BlN.t/sVg`WCec:lJFW;)'Sg.GXaXtDEBilANKb/)LoiQ6(Ls0_0aX/8HmioI,D^(q,he+>q'1ruGj%)$bJA:'r4JLC!tk;Rq+lXcp\ka]TA8V>1+QB!i#:O#+n.j+im_1;IR*O4lb^K(3<.2T(u!iEISX^<57?!l2M4\YVjb)Da\&_Z^i/%3^^g'k=\AbL7j/8nt%H>o6:n$JUFD[PR*u2*$R1=2EX(eA[.8QaG-+&XVheGb$:Yd%JM7X(qWIg(AB:e'Z?&a:^56(4>[497%&<<%))h._;Ys7\qW]i^QLT'RZ!t'NYqL<gnUWV7cUC)Rf+Kp"h8I[aMpe[0k%#`5R^*RF="=,QF$o:RALNM27F&eiF20WFOe=j2,Pc1C%ii3Qb.o.od<]ShaDZl41"Geb`<QIBt*YhAVE#Jf*2Ck>rXpncY2DRQ^-=E%ceEM(6RM1M2#."q&Xu+F++E4bS=;*`//-t$L>3DRc%jtfmb95M0i/#bA^/U0;"i\.ZMET32`91t7r@3Dj"bnuS.)6ZpG,"NX/.%gZKL(c0POIA)umK*sD8o8g*$p(h)P+H`=-"[k9PKt0;%`\Em4Z5b)$#^Y;GET?]Q7kT;;lppSO$"Vtc/hedMKeg\J$BH_!OUX/2gb)E.>U:\S-3a!,PMDRV(t?op,sX]qZ!bZEktq\MlhpgI%%&a3)1/c#-)$*u?I<!4@HkT>/V>p]I@tVre@EeY!fIp&0XTmCCk8o.l.=!$<C5',$:G;6]@`5#WocGPXq/agF!9GG5HZ#EG"83gp%-f>WF%:0?3C`ak*.hAMZ4a8LIlp#Cr!EJ=4HSe?%%Q-9L_J2RG^A[62"E5k@(n7Xti91C*>C\n.gB<JXSr86//>R-q.EDdLF@0M?%$/h;'8r:;`)tk9j7+$0.6'Z0GQQ*:3I0e^3oO%`uU,4G\(.a:Coga9]!=R80Bj6+Fjn+qO=9Z"<NAhh_fo1XrR=Kg=,$TDmr)%E%%9W<j-U/j;Z9gDr>?go44l\'es%Ht_)7c:8u.l\U!*5c7NOaJB-2B`3_nghF7k//%UJbt$u:l\m)qs2%RRKd*?=ueK#ZNEl$5J/"[%JI*3F.TKl&8nPAkJl2V'(&Kr/'iP_qT@r4"@)8[IQ?cn;*h(kFnCb.(!\c4"i@grXGPq.2S<5N'mMrJTcH)E2,#.?)LUIpg#hV>f%(S.n4`Q!<+J&`U$9;)('B\S(:B(Eh,dCVoZi/DU-J?3,B4<"i&d46ul\5\;CSm<+bC"[^H\[oS$2P?dk.kCDKS(bp&QtdeSN/^co%W`f+<i8LgBdh`ji-!!Mn8tE8-kLIlQFp;NZY"[>s;2fRsnhO/(k04g,DZKhda&]\UG7-Z(=BV?h_O>[R7Rip[4?]eK0,e#E^R7!u%^)UAd77"#g4:Ma_p8EnuGdc<;n@5^A;Y`1G1W:L.3m`Ft[]sjF0RdE'?BpopF7$m;%86i!Xc3G:'9S:ROI75BJbkA[1<beoK[t,p%;9j-Mb-GN.1RiDqKG.clk4CnefXD1L-WYEnWoS_=.hE8kQ:J!70AW"nLlLV\@uXTP_qE7N#]kDT"e*GB;7\]J_,6RVce""7]7P&Z%MHp?k#QdPk)];M?a+r&Q<=J1KnI&SnRH6?&_1^E+MUoTM`$<tO(:?ht*Y+E3Qc@H.gYqa$Ot[\)18BA1lA-6/"M0Y-in?e-Zn/3W%"CIZ'U'^rUbT';m`0iNJ_hq&TVBbuhh_O[',j`&J!_D^<P(4#t'8.)^9,(uKS=91kK9-Z%/ihGF;lW]<`QV8dJfXW)jH?2@@/:'3%W"2ps(8eYHE7AL].)RVR<*.&4A*I*_eWrfn=PPM,^ssB5m@:Eq%b:mmc)Pt<E"Wu)AOaI@_iR`U`O;jc3E+S=Z(n+Fm7od<a^JrH%`%!SNZN+ib'$9?Q>>P?VQ93"B@LIpQGmVr?;TZ0)8oTqGkf(QWkXMO66@ap&S6P;`NLcE]Ot`t1U0^e&KdT%)@9'itGUb[.&8dOW%@Wtc:c5NBB!O9RZ1,(#<g0E;-3E^H\J>6WX1#XOSI1+NoXDUJT#--?X?6.CAA:]#hQ6u;[TL&AbSqS)5),TG-AU(eZ[i(s)d$n2R%pJ=V7-8a;7'5<]N(do;I>]Gu&''8i?Dbs7#+TgEh@+lNg\!"2Ym;F/@?ClJ.7a[61\tn9DM<4)qiU+PXC-D4)?5<2eUtZ'm1V<f4%/IN42U>ZOq:<D=VD_pEUBR""tM%to^iN5uaP_pV5JR/?g!a'YM<'?-J(u>9!cg^X:6Dm.WK?5SsSqJ^M^>U)_Bc5c\@+KV_*:ocD%bbN(d`eEpkjurqB`-Rg)4[5ml-rS4g%(_Rj4(*=)RUK/C;J4*WF3F%_^j&?Al.Bd=)GOU7Xc@[0"cbC]KCq=sZnBAL1.q^'L2j#r%YT`qmfOgZro4rio]O6R#WV^2bo"2[?nAF!h(RUlSmBsR!mg'oYjqbnOFr,"_s0tG:q3Lr^G3H`1=euk%!>Xf\fUBZ.&Zj2edgV##%8jj)j1X@@"_"-!c]#"<FI6.B-IiSK'[giRe+)BndZ81'bM'*%S^l98[s(T**o.BcFm4I9Md>.Nn:\D#Zr,6aFn5nh)r241R3=Ggf%C\R]VoO7aJ1VKk9s%PV0Kp3p0j7+LWV5A]RaqAD;clD^\"?A8Q5jlP^"#,,9[Me20>bj;[-Q#rqWUga<"/B"G5:U(()cs);jUX^U%.aM=dUdme`XGWO'k)tt:ZM)7m@)RAOdOI[^e&Epg9>q=W$VAK#M>0'P(+^bJ-4*bU<hhC,MY#80`$#t9k:hcq^;,DoQU)Jg-<S'O%Tu7l4Q"7lL`]'l/_Du=51LV\Af!:.jCW#d30S+S;!b<U#@4V1uK(8#5!`K-sgNl2u_$'2LgNs_RJ$*ouG$8BBk:C0-<=\RXD@C+"%?pfo_+IfJcUZq].p1uk7M3ORNc^;jTjO7fRF@_@VGcY?4Wb!1'2AV\k@HpT($lU\XTtL_k'%?I-W7B1YUpfDi+U,(P&.6Ea@Y5Td%4=qE4bZ;g1mhrI!X,:5P)/iAUC3oDM-G*[l:@4#G"B->a1,f-hI?>aC)O7/`;3D7p3#G\3=pGJ*.b]d=1YB#?LLA.,S98A'espQH%Q)4-S&$p?fNSMZ:)2-p`Y]2Hh;GK.RK9N8UZt'kA4#0[R,rEf&ABrLHHd3NhmmEI*a"4W^j-nddhC,J6RoJMf+QBup5pE4&05;KI%g@u&cei:j;#rG9@%:UtALo="\!n4Z\c6G9X`8jkG>='GLm2/FZFLab.46?uB.Z4oslbck!M-*n0[m^tb0RX$:@hjiA9PV/m)"VEm%,%[XAcT`D,XHPAm2S;UXQB)eTDfu`gKAZ(hV%e[<^+d#d?ig9/aQK'$>XFlE8u,UD7NOsh<E0V<4%fqc8?E7uCu/E'b3FMMn^=Z_%8LLmE_:n7Pj>2%G*^e@be=1l"Zq-@Ec/XUKp6eaaa:u3]H;(3:CBZFL'j+gg?O[3)5m(_e#7M@ib6JgK5pVDT1qC<.89tQ]1%<8$%8?ofL=JdNo^rAEsaCJipAh;QSHtjJ*dfqKf0(U'(],D.X+CkUsmj?b![^&e7e2S./JGk_CE^^AiN-`5@1H1T!=bVRg_ptX[[V2[;%=:Y`(jl[M.-V3g,&(1u=Ya,Z9hE76r)UoC"L_GddEDgn3nY[k(=bJ$&>i;/\Z<lZ7*,R-?DlO9i8^BQ6(ioAZI4Bb3M0At@5eJ,@%&(-0)JtZ8Beu=okhli_uB4N#j*%J;M.9=-89HeSQ\P,aBVL^1b,!q5#.N6Q'!t]`2M4@O'V(@!2H1\OjLs/uq<l0)`Rm:`*f%\q&%Q\3GC'K2\XdkGKhIpP/sBu0H'<1&1<:1+G'O\',,;R*;KAUt_lMg5\=j<@eF6oMV$!"mkg#K,b^qV>Q3>6p61;E/:bTX\,&h6\hS%s7AB2e\)[1nCg<5S+Sgf@=6d,])W6M7ptXX[UK"U(_CKqfdcos=B(mdZ4`>,FSQN>?ikDs,>Q5&V$hHuOf8%3[08P,F*3$W@t^^h%/<r3-pF\0!>lJ#NJarHZ>D7)jislF.d3)q"!>t0\kJ:!;_4ZZ[J@M#,8\m7%>l0pA0X)<",G&/F>cNTV&):rI&;7Hnq>Tb"e<&F8%M<0\cO9,k*rZp$o#Vh1Q-1+5Y6,EC\cnN989QX(SG]lncDP))TftrAUSP6f9l++BM"DF<4MkM,X6=,O@(/h,*#<5f,ZGF>5g_Rp'%R%FVF_gj.5=0L6l=;h<VZXIbi*\6tC'At6,!Gs@-haUYio,.nU.25Y770rLJ(h[LpZ^%VGX]Ohu9oo,G&:lE[0Ps;GX[Gi;B_p0P%:_R-gq[#fQ;_QggUPWY+j)j+0?:^TP4n]56YV/`+CZ+hIQiO[BF*3)VY\ID)bqV+1&u_/`F-d7pd7NC59l4;U.EJCK/mL"c=4/Qi%'7s(ZW`#1d-OZJ5&]&PA^)[G:,b%bI;tu,#TH]7$(Br9S6D2OBdb;**%)I18B-m8KMKJ];\U%1*CPNX.>Fo/_eA]*LFsV[A9ZL>S%C2Ll\6SSMYZgo)pY+g"qkrZ_+F0WRpjGpBa[(=$U0$N's(DqWSQEcQC-*X.$0i<sqNR_ODA31,,SHE8Y;Rqdi)2JtbK9M*Eet/SE%KX#^?d73j?lsuugdr#tXLb62Q2e3;J7CsgQ)*>pA-eTS18`B]\%Y9p*:Fo=93$!aH].LJX<p&p[@^4TAQO(WsYhg7.[aRZJV*7MP%ia@FIq%02HF8q1:Wu44eP+D<C+qHg`d->JU8]b.h9q@^aMIBGkL['dI>WHc7M)(Q/94M&KQLQIoBkn#i8c#GZDM95Ph/*e:((UTh%K;#`n$7/)4'=I+B+phsd'sf;"MG,4;F]7!*jplr\DL$M@'J3n'U8n)++dc8lg#BSr?p#U2;-+5KFujb:C$21*-`q\_d7mT,r%bdH%0dOrB.pAfED081O%]\l<F[\?A1jbUGB\*_mW1P=D'c-JB"_60i0I9Th_h",^U/bk6B4@[7MHnCTb,Eg_X>9PtQQF1NR3GjP!.0:]%^u9Wm,]"V0H^-(G4Z5b!CEo._&<0.m##RK"k&D)LQ*!Xa##H)C;[^NPj'8Df<R0D>s-'-.TW'MROP%1?^COMQ/`TA\d@g+V%'0!Z%8h3OFpQ/D^U':Y6+K]#%G_r`+Qr=OtXIsA@YsY9%N1Ijq&^Z;%]q&D]/Y#h_&),fDNbbV?416<Ve_tmb@XuS\$&t+!e_#sl_p4IO%E?^(W8UDSBXR][Sg%9^u<\=ef`R<!cG)]:FHSSSn')Lo0HG0h%JFRGEQ8VA?l329]n`Pd',8Lri;02p1/@3,c?!ocf0sL7%0S-dg%(XW7/?q]cAmTC?XCO\\m%-(&]iZsk:C3635;!>8<c5O#<AeDX1cbheTZ!#(/=,`W[DM#\M)*AEqj?cWpr)d]aGq^\8HYVk<X'pK(%'T-:XBpRK^F)O;$FHE.UgTcTQ_g2#L_cgP&.)-5?QZI]d!Ukpeo*-QEa+S_VhM\lZ<ef3Y*e90F:Xu9dq>c'e[m<VUnNhc\ZjV@$%1jX^)8X7'SD5M`4q].<B<*,eA3NdrjA\h@o-0!F*e@LLi_@2)A<C#:]r;[*jb,msIbBs%@Fb0([>*l7,XA2u#Gn7+s+SikMkie%l%XU[8qU\Te?Zc#kBk%p3J!X6)m[1Q%P?uV"qN7aMFD.+R0=jk-pW!^AFDe.OWGp#,tR5@/\AlCG$eJ+6"XK)F)c)*,o,%nCQ7S-ME%S&LM2pKY_L6ii[+ZfuZn5?#f:g0IhqN>$+?$mUcF(6pK:$BcHE1?t0.A$rqE:#8'eeC4^`LiF_@%"+F#X796MYq'`W!Lf/9#XtMW%ZqiJ]atP(l.ql8SGY^#7'DL;*[6PC6!f27-C(n)^&D1tAUs3ScAS>d2;:f@Jp(CbjVr"Zj(O;'Y.uN-4jU-j&%*.0TUE)<S%jjP[%hHZUZf\nGT>t"RoWK,(*I9>]Q@@la4#btR%,9908)BQHZ8>]hla+<`j0<MV1^j9t7pf@."e4%^7M)*pK1Ce(+^F2es%f.9Pe4eC8%/<ZtHN%J+N-NrIHSLts[IiURmqK9>0MCe'!P;G-M(6#812@;F*.Ucj4Of>:_I$f?g-9s?5;fEP@FkUqjn`S'<*o3bD0/i2)'=]`7%mp0?!\^jLRZ_CSKM)IfVGZR'_0U*#C`[e5T`_7&t[K5M6[!V"Lb1=#KP587,+>hu7JZ24@5-k^7C5NXCPu1hl@1_9Dcj1aF^j8rF%+&#5mBiXf@#N0K)1mFOX!0aYc790=V@Q'k`Pce7"3E+^PjDq5ADVKt3_n.,4e;-W4e2NO<DO%3$7Bgc@e<(i$JRKf,P_[u+^]l3P%+Y>'G0Xee4P,A33N'Rb:,g>]#,ZZ1qC[kdhXtCH8O3B",<YnoJP!DECTiLc1\O+$dBkARD8<s8^F+o5MMF+(gI:RKtBgU=c&>_Y1%$km$L"W,r[G7(Ri\_73e;L5\/g.>/.b;Yg</.TbIA`cnKbqaf(=dIgRn.JMq\?\HTiX(#\:lFTET`H"J4%NS$on]C]frmsTP3!u'%77?.@1/Jhuk`W`%Ze2Pq(Zn)PqkNM"WKX#Q=?Hu.UNGm+!)YL9e`Lt.+>i\HW[q_La+K4Oa/[9I'g*r02Unl7PW/[o-^<O$?\*bQ%VUcWaX58>8Dm*Qfohq=%!g5S\W:BEdRa>&7<WQIFVc(%m.g?0U>80gJ`tCLI':=f2.%BZ[%Zps',jd=o?;Z/I)Zb0&97a4@7[quk%qIht2P%*e\R+mOm!L?`R=FUnQ!K'+n&=:Qg)Fkt_.9"B[qVC;_q]0plE-uhe;9X)Vo1E<=Y4._<pa*:T3d?lDfmK09#c<7u*4\uD%;EVt+l2ddqLQ(L(j3P]"ZY3b@?!st0mFCIX.fsd7JYAE)f)]X&]m##6biRYL(Dq)ZlU*.1<%DS(h;b96i^,Kp;AR_^ApiLSJ?35W%*Tpj3^6oUanGE@hR$PkTYG?#Yq>9]IIk[62liW_/)[0XGE\9)=J!=^Nh=cYD/NN,U])6Ek;@,Skp?]W&CaOWXD5W3)+5ajqrLQaG%F&"Y^U(UP1hKOi2#LujL\*XHL=%*,/F*RoNl2hW<Mm,qcFFG3u.k+mJ_eQ'p<O:=KW>\B<$`5R2(q&X$/hjA6Q.r#C_h8#!>1H<9%I6iae-B)"5+@Hd5:le4)Ld2Z%!&QQ-9M#aYRAJH'W9fCE@8+o]DnE!^_k&u5Bb6_6]KGeUc9_ldZ,?6U:CZH^<<@7^J:LqEk33Ff%gpJTq&:g`"E,H@Zg_Ehe57+iu3]&,a_8[X\lhX'VO@^ENbAh3P-J)6b!oRG0f)THp&d$4+/NBddhjFV<=>DDt3qT0NYqNMG<3.!<%EP,/)$+d9T,S3"WKeI:<3&]>9cc7&-2XS5SQ)Dig#Gi@T*A[[=MB-c'+df9.UfCcB(640#NU.Mh7+H:U0N"NH>Ze#7l/$!4V&i<!%M?&IK=V/;f'Hn+jd9tas146B7YfB5bE%WGP`#93h#-?6QGS5!=[b]*5>=m@*:[1k6('^cD'J6S>"S#oCWlVpK#m;?'F@A=a"QW[\%m4mflKLj!&KpE2V0BLoV_P"C?#V0h46@o5o7^0QN_*Jo-masj"r.nj$oV_lZ'hn'LEms30>@FjZqbWUb6qetdY-JMt5YB$rMhPVb%(Jr7T-n/C1""[a2>!43)DBP-q&93qMXP?rSXBaZ0!L5Wl0WVl+hko9AECeFD5Fm]N?H_8N^6ab)-K&,jOKp@oO(i@OguJJb/OaN>%Zn>J@8U;JqEtnmeg009@&l3T=p(NOY/4^IR3HXrDI+`3@"]aZ^'Akgm[GZX7(R,VqoKGZNcQ5balgRs'nrNY%$)gCm?F*KM901j9%J%CZ>+m#u%mh;MX]'9G/c[uOsV`.[)(sbDrFoCZ*ULAqlIoN[7[<&9>CV[_jBh\P?UPqbML4)^7FY75hi#h&?I!\D"^?IXBV2uh>%M5mS^!>p=TSqH\-qf;@iZB>6+/r8>-OKsrQRj[??OsL-jIK1WY1^,+M>dR>T&LK1HIFZ\'9M/4>%46%$hTiaKK\W>#TS.nXWVi'R%HW4DDU@'bgp5UWBCK&HqNQAL.a!OcM*ils'%B+[K-t+5<C3;*^$57%8!,.$o2Vk,/!7*eHKGe`i.VV^OD-drW(s7AUPY7ibK-Sbj%-IR+!nk_17-Snt+chEG4":VSnaS).!Ej/!=fl>b,)MDca7tWJtc;?pHV0,#BH,0)%(C6f;D&5*phK+\i-=aMGfDIKc$=kM:67NiK%^/61^GFKaBSnh<PKF48Ig=rc-K1.&XaE\_/Y#.M6G%`OO>Qq19I%s)\N1R&L#,L],'c8E0FZ`4<2p.O*+IQ6+rRtRP3S%dee:;J%%QNR5clOM&9.+G>m.\Y;bN<ULfhe3"ejW!;Rb(PfWY.j%kDcG'h-9s#8Q3Vi5gbJRuo1@h\NXD5n<BnOVGE0ftj*ndqS[R3lNWpY1%cHuX9J9-t4;rA9"^m=G-q_dL71^fGb[Xc$Z*As`Ma?Eg\82\PiMSAO!22m.NS)mZ:C<JV`3[Y_m?fZ#<cbtq1@CtV?<D7:hX"pFn%GFT3'Gs)l_chr^VFn=f"':=[9R]p_*ggumtJapC3J[rA-G[=0qlQ&4l1UXE["%^3Xb+`LP$FPk7/g^<HXU5Hs9S+Z:FpJ;;)g97a%2J-XS7E))8*5l2uqc"(R[)BfE&h+_-[N'h=HW=Dg0t[T2&p5(YZ&hm=m&pNF@TlE[GhCnJ+t`%XgWkIccLMJS(k<m>*F@GRr?7h$%$7(PQdQ6SO'CIY*,glZ3.Tj/Jb2M("h-;MVc8sJ7!'knK5"%CRbl'ugfHIciZ@DjSg6];+iIV4BBX#C!aIU[RkhTb5=(efZ"CP+c%8CKJr7d=h*AWK+i?rO%E5]hV"R&CIfiEAtY#*L7jD:mj_6("1=A"`LaSG(C(A[=`e+BWb#10_Cqg74h:H-.@Deh+U9"Zd;TFL*,g%k)t+Jf"pu?*$10.?.fr;S4mg*mc3->O?@&-#<]KkgE)*9d#^N+Bi->RD(5iWAA+uUKTTI>QkmO7.r!DD^E"EjpqDAl("RGlKQ++g%jB^)3J$<#r(Tbhp4R/cU%>&H9<mt^q8cZZaYn,;-=FVKiGt?B33Y[>ImJ,JuoNMfH?"LTUgLb/>OR"B>WK+b7W?OY-q&GSMd7T5h%d^oG[&C>!^dZp4Pq]"P,;;&#J+]KN\PsdIKCA$!3:*d5D.a9WfG2"\o[N"=%\Zm=-+g/tq;IPTE_p&GU2sc1D9B9:0;U0O1^r^6M%=HUjjni,%3^C]FB_['=ORMh,?;l/5(4l=$lU[U&0StQT"j4I'5V".sjKIL$E_qAFb9mkj".qGM1THHY@SK]sf+tT_W?AYIM./?u5%]1-nr(1!_K`K]egp0H$j>]mq1doDRcP?+5V5gjaQX3,cbXHS#Y)on=t];V=%C*a?9ibau]C[o0g@V\Nlr?2\<Culpb3/d5V`EerS%/5c\k4g?Yqa`&\BJ-2!EOaNHkoY3e:rEcqeKY^Vg2&LRj)@$j7ZPTOuF?SAb"V<@C>Yp.rL*0Dto8l*@S7r1k*4,qX,88B*USQ?9%/h&C+$3^=B;H[7B2sj%nk@1dTg*%htmhpES(tQ<<gn7YX6:-a#Xr#c].\;%(Un#LAfI$eJXQb-c@rQ8ePnJn2R)bXCJg2iaK<KQl%<_Ws5-<;6>Ea(Va@5L!i_t5%:;dl)CBZ/1N>Hln7d3/o=!se*BCjWHIO4;Yo'9<]4E!q\j20#4GE]s(f3B-(e`pTOP2lQ::kp-c`%8/3_DP.Bd:.,<@liC[L`-.5bX$;CLE@tJ9,_LuHk!">LD,<Ag48TeR"#?7:^#\ABk/8!U0*A$ss"2o0#[6gEqZ`)2624>@%-aKie%%1IN9mG93o:I6OT%ips?5X&2oG/Ibt<?XGOk6+Q^\?1NPNl+gAQMbsk=g1rj_9^r4XJPP)LMXg!4)iTO#1aPU+UtM!l[76^/M;GW%arjn#_/^;5Ua<SMFgS![^DgMaq&5/EK7(@fdZ,L+Y4mLN41-AH!5dKr#LXCDr^&%32/pZNm!1hsoC\'k0A.)OAt6GZaWHO!VJB2"%aN@PC#*2cpb?O^Krq/V0Qa,Vd>3MDtNJJ<-Ca!E>%opXhR)7,T45X.ub-"Q&=Y=u?r\3tG\hlpVYC>b9SO!0hQ0\IjcJic.\>JGL%%mAM)+(iJf0[$bD](&&dL@G8'8!AFjg+I*]J$[(9/8kF-7UQCdkem=rVg;K=rgTa:'+#qF,M+n$YXBSq5<[Q?>4UQ%F.Gq#HC\O\%=J?>tT:Y=Z/bs>EC+PFVmU]F67Lg..`4\OXjKW1.JZ88&_=Rg`dMkSYYDXi+fUf)N8D/We?Wc39eG5&_,G:!4(D7K8VKX2LP,tCU%_d9*h;A;r1/E[I9KjV)@EG=0q"_"316=!tD/f7;fjNZE%0uP9rYY3Fmd$,3(,1i.%XTs#I`6r+X%2FP1?UVg^W.h?N'aF3r@3&=i%N8[=\MD8"E1hS))/^5l#$loB3#pn3QO7?WS+dg'Ao/2?-^o#%B8!q(s&c5HQ<O(a_0S/P)DnQ7/580*>&)u;sgCD9Pgs7hn3\]IE%5L&=JELm;J:h1e(L'bYY[oI9e63,Rod3Soj.YlkkhnFMpIGqXd*mFpLC$ZTPKn_TjJpErOK`F?%1XpgQmNa<GqY`DWJcdNB>K0H,%J-&1pp+?gbJH2_aDh0@1SOi6J't-9L_XBIrg;r!71Ll1qQ.kjMWA1"WRB>):0/,-<Rknc/B?&&e?'_Wh*?e=Jq`<9)7j&tBk#MY"%#9a_>;g'0ebZ[+G`NE5F]5j3L'Um)s0MPnpeu:<4R'Vp7\!@D4*OE[2d!62b!`R'^/"=<k*(:\9SJa)5X<_7J]%G$\&V=:&[B&40%CPCuV7Iq.I.*^2\K[H/716'28@=q0t`,nTX,p>[X)m2ea:ll]Sbla$'&XMgACJ/dtXE4k7k8MKh0SXMAClJg+Yp(i033`@Z1AFgh%km!7XJOjf_'NHiIhJ-4IaqRM=+RC*Mcp$XSTi#j]\VjaHYZXP_*34Z&.3D`p9?#m_!2b^5Jjkkt@<\f+*gX/i^1BYRfNmXV=pUh3%/F2^X1^6:k[!g=YGK@6X>EM#`(lH&-C-u?91dg_1dsG5*dQ.^f2n)oYfd`.+S$>@K't"uD"Mc_`e9%8).r8sP0Ft'2E,ADaX"Raj%KKt'M<ZT3("Yu+f3*oN*_H\44!\pLJ9NGO8Z3)4u;P=_=h_qhBJLDAKX%at[5u,+C$7?WrT/+WGc$,0I:uj8##=-b$?p];q:#^]*%[KrH8dgs9.Be&6XA1S-Vr_$fYB"Pk^k(7?@;cP+^GCkAq<@;;r<Q^f3'+CA7CA5f5"o$j[-88Nu0"SjnHX@kXE8Hrs/o?dcd7fu4%ae3lO\9!rTd9t[&-q^+0h!$0M$-\sZ##(!VC4@O,cancs&.rFHMl;ZKnmNf^NKlo6pVg?-/u#YY).Bs=kJ1uVldF5TVj*dK-Dr&/%k>:q-I5r&+;)r\e,'TB2mt)mi6eRD*S^Vdu1an)d=8c[:%hRH6)hb1_"b]Z/8UD=KhhEK>CAA>9RqZ6eIYTEh6qA0,8^:n"ec]9Y%1;'@,-#qVu7u.=[[JUe656SmFAgY[=:2pDdm85;60/CKr]>4X4i\PA%XkT9KSR=u<4>G;'3BU@j(jR9G@CgGtn"!ka\\,Q<!ora?%[gEu]--A*j'mhEF^/Q0W?t]uX<1]t+aB=bGecb1:_$"aOiA=aH6]7ZgK+N^P>1hKXoa;t`gEM%mXb+tCSD&-m2\oPl)gqu*BMIiN%"A+tO*fBS6;$G/AV)BDH#W$ENr=2=F#>F@oj]UX5>24dk$O/_&_6+EWcaR#>/W8rM)5$SI&-\7M$Q$B!'q]oA2B2?jij!NB566M%%PjC'LVY&T*S]=Pd;\V)]@`U^c#3Blf%(7YOWXD#^o)Jh2DLm%+fNX&3A@f-*4,[Ns0*-oLl5^6Z8.HJm&Sb:!hJGj,/4p>9k10;)%-g/<j`9,=o!J2bmOU6ti%#s4kN&WJYOD#,kmiuBr[B$*REQh=VFYlX&-I?_JBG55T/dELa2N0!$DPS#/\;"64X]p_U?V,%&$FH]+%=BS7S(1kN8R7lhF?O(#P4.pV\jebL@Hji\>*+luE<eGVPGf9X08/[\=jgrJ>MY&8sb\@-T++agG$J>I'_q7rdDD;&pCeN"Q(`^3l%lZ[sNm`XA\kn*hVldEWp;2f+lKd]A,dUnGS__KV*"]q9\UGK$d`%OJ4CJ*KQ+NC]t@J^*uEi+e2Vs<oEfO35L[ZO9Rp*&)OK9_]H%<[WlKlJ,'cUQE%(SoQ8*Z4[s0+;%71"S^Bl\]m5X$r+,R\%t%WLhZ/9Q1cXRY:[c2bY.;X!QQh"`n8[!X7fMlUCu;&8/*"MApd!\%<nc-u>&GdO$3@a3]8.i:ZiqPY1h);DfdO,us2@LXoU#b)=F*H)FCT/l[<OC<G8km:D?qTm$b%tCUrBrE[J[F@dO^jQ;P/@CZY0-t%PM3bA7YtP=^lhH/96Kb:79Grcq]Q*#=Q=ErV.eo8Jq`VjHS)B7^llXcWAZpabbOK)3lIo>`FW0oOhqRZEQbW^bu.V5?2Qp,;9-H=%)pSH]MJVjJ#LYQp">0lWlHG>X*g3S&.mbMMTbiRM%4Ir"1EK0CD'r`l:J0s1\f=ocp'RLgJk8R9V8+4Z[^m-(/0s?;8sr_ie:L5<%M+uC(rI!=kbGMV.&/;<J(Hiq#au'kP_I-c@cCMb6oJ8b"Er+K6$%$\Mc6F"=a60*H[k3Q7Ui5OEMMZ8m7*_13a2Xco6#/DcTmU75%5!\?V'Q$L:2FPjg[Fu!X!%-)ZCX4NqNUsL`nr]c'Pb*,(Pg"ca/YQ;"XL'9IJtj%<McEf\3/*_Ck,Q'%"IX=G'6-,E^#+C!S*h?!%Vq7l=*AS[W/_Pf[-@X<Do3m$a0NX4#MDK+uI_*AjF(HY'foR.V93K;10EFPbS#[3]D]!eImfX;kX*kdi?p_l.B&jg`,A+@IfK<?6%<F<gHiWiR,)^&.17VV^SPKKH^(pir2fFc04SgDoO4pE9D/l@f5Ln*RGU8#f0hB**?j>:_R]RsXB,nu3gNMVD@f\6ltlE[ujh7Q];%^<a#fMK:JZ5l,LL.;PA;,hGgO@"l%573O01U$@6BF_+@89kS_O,-^)c%*u$Y+3CUqiNIohDR9+DHT1?hgHYXo"V3GTR(0M#X@f]C%"X9;9\eG^,H(hJ1X/;R39KrN0D:^pl9pmbTXtDF->ZeC5,oSTol/&m<Z=M@"&138jR^soJZ>$DL!=ifFYZ9HfL5AT8,@.c3;m?I&%<IXNVR&F.,f5teFhP^XM5XUF(7aGCSG:]\0WmnhY"!QiQj>oI<Ji.mIVZYo+I@/U5oM7\7F2WG>L)j9b?]/06`)L'"@Q%rP-d.n1%q7&s!o@aPq6-Am$8h.8MT.s?WgE7PunWr/(WV0X"_u^L=`Yd.R`"#TO-Xns-dK[Bhmh:,X<dQ1s>>aIYKmOj`C_%_s@h5H]AA"1h%;)+Fm[O&H]r<,+>Bif*R"j9epMn!(25tR3FD`r>M_eIUa4:`c(Cu/Ef@$j$-EF%Z[_N\jt$1[1&?g+.9X0N^C$^.Ldg:W_BhrDLO%d_DW[%D3el7tq1_CIuWI"iDHlCJgI=@b0V!ge0`BNQc(#r^YLZYZrRZdOJH+@Jm06)`["+M2m,nEW&9+l!c9B$37&HCIG#J;ItsO%j,=l6_t6;M!M[\mhiXt\d1I]Z=2]9)e@$ZfV&N+d_V/5_!92>C,@nY!79(sof#4)/0k.h1>)n\i1jRWtaCsgtqB*U9@0m,rXj:eW%I&7hY*$H#Q;T6YTks9i[q%O:nZ$EXK6!1iIGKl,+6(s]iB75LX#\fWWV,jbX+:RbBW1,D1Qq$=$b"IZnPajilGt7d;dXc8`l]'?p%7qO;[EO'8'bJl_GjmYhZ!*3.r=abkCR6=Ti^.H?I(n=UJAKGX,K=>Q4-N"%FCr3R>0Eh>N-G`h?irUo6W"OqnP:S@RUs-_rXj.37%6YVH`b,nnj<I37]eUoR-a2H-AQ!OcU_F";>#7b8s=G0,W7*J7tAdPaD,D,ob\;*j`O#Bp#Zh(EtSha_\eq9-N9I>lW3!PH7g5.'d%V+Y1CAfA)kNEf%KiuJ06M&g>gShj7oY*u%35)`ni9Zr?8Q4u0eGZqDjT"+7u-F)T4jfK0K"?mLRTIi0,o%,>la+LTT=O=rk9!*ip%-k*R5>s+N8\#^GM'nAj.Dlg[UrLk?-/[+7?R=S::l*H[E<_&u'>QU3m*_2nV:bab+>RLo,=gQ4TSCo:Z9Osd_ga*"EOW(s,qoZa:%0us[^@Zq',*g@(X0q?D];$L&?JB2DRjc].@<nPoR+h$*<;hIiL?Z:g!,KXmFPpTM6S"YiJ1Il^qKej3(Qp"B2%5:Xt'\8r^b@@cJ%3B7<#<>pERYdJ)CS;XnrXS5NRkGGirMZZ;61TeQRNF!AYInk#]Utnkc^(bt=nfdin"Oum$.SW%llpo"jWR/hi_lO5>?m[33dplBH%??ZI%8o(Jh`lHAH3Xc[5+R*]bW6iPrJ-9Hkgd)aD_2YW/WCXn#?oYCo69o6J!!qeU:,_#FULel&6:G]jOP0VrEPMb;6hh.B!)1R4%nlO8J[Cko%$GVI=G$]B\UFN)0Eu8j/$0i7'pO")g$Ji<HS(T_r!YBo7[pe!fP/!0G&&d@cDqCP+aX2kL?u6##L+l1c:(X8_%gSl"%>)in2`clCsF*3$?3C+c`H9ca-Ds@suQqO:A3h2J'<KT+a/7#!S#LaJ+^+P!0\Qkj1Zg"2Vp/X"FnjXF26;Vu"R<U00a(C^?oqomQ%d4H+'WZE:#6He[3/Bt,tZkW&tV5PlHE@FK*3Fmi.`L:7XZ--qFVD43nW]3qO%0T(2,MYWt0]Pbp[+]WSrLj3bbZ`2LJn$j(ZBC;+%mKK.1eog(1JUg;A`qQ*oBGFV2/ZuNU$f5EH'D3R/W>!k\b[SjdDIOB/^QF\:Gu/Uf4mNbr6#[J1JPR++k]i=N9#Oi%\/*"V3NmJ\%=UlJam'p!eq3Kjf@5W(;0WJ9p7:i`Pc^!oVcnh]M\U_cRhUX%>Rob!-WhBWgRAn5g<(;)J0!R=16]!]Pf\#Pok.t/YAZ;9B&[c6<%53RR++pS.!'JZ.7jt2ZF0kVp-Cc.4EKOOR$rEntW[K_DiWd(ZR6e]^<Va_GhAl=.`$X&![`@:,29.2[pamcFF-619RYH_\bD.ECN%+G+^oNPb0'5$R/I^G;*U0\Uc,Uc>1UTNU2)2mXEG)ZTp4k;mUjL0</icN`*7)+aE9E)'JfOIIDS05]MrJUef3gWTe;%kV^Cl4Xt&%'c:Ja%Ru5U>o=MEnUU1%*+<jC\;oNYZbJt0-piG6>g8&Z\)I'KbgEcg:M6>Tc12BFD$^G0To)Rqg!iYud&(A>3pVC"TYS]LWSNKg%TS3%_4O9Z2j(TIh8j&*PgJ:(LC3goc[_s>oWMIs!NmtJkp:R(kWg?(BfQ)naKPpsGG2*:9lPeV8g9+8%1BGbae4V]G!rLS=H"nii%L/l6V'f5I0PaKRE8*@\kOOK]"'9))^Kh,i,n(dQB[3E$?$O))[]r:P;Jo`7/ZJLC=#f&\5.$H.F,NK9p397\KbqqRR-eC`CG'\bX%1iO8&1\C>:P$<oK`?$M3MiA*h6PU[d5\>aRashX#_#R/ZBRo%F:.+2^B3emHF(mfMUp+`OTlDPUi5WFCGC^(r6WFQEbJ6]WMsg6Y%U':g'&Xc8=^-bjS&j)rUW-Ymcq(`8-PCWdtf3X/s6WD#UU5Ws@n&=-3X;7k@QHV/ppH5/N#gX_6KGj98E[<3=apuJ+;j7h>;]0Ef%Cre-L4]h(8-rqLp-t.-5#M-kfI'9K=/aHRp!3NKID$++l+@OC')LuOI71#*^,aI]<iqYCl%V$hj346j%MXk#VoX+-pjGeaa9bco?%75ba]jV9(0Wc2cG;HT!fk7o9O&\W:(/'fds&CBq"44,B/[bRU/DbTG<?+0oR;;qp2asO_8Kb%ZQ#Y5-O,3E(gqaLP"k,tkrN[)+6%!rduP,/@MqWTii=l'^n%KO"T[$m]e.,]<lQ1KjgGU-ZoCqVS2GIItbN.P5;@VB#aFQK$lqGBHo.eL@kiERiP.C^D^1*_jj1U<f*`%Cl\Ff]S;?-U5:hWI0D)9*A8kTQb?`_5WHMlLq3#5!eH`J>rYgH(ZjHU]"MBU;!/VU+d:$h:;h-Y,I](>(AMK3]g8/mPa?[N'esiK%d1F^9775:Q>;S&d#Am[bL'17I4s%epg[\=7>El%>bUc/Kb$.L-OfFkP5&Xd&6q(G/b\&L=&bnbdQK_;qK>+^EDQ4/EGD^FO0pFRf%MkhPAJ"2:=QR=8Gd9P/N1Pj>(#ST%KkY)tYQF_>IdQ&2_QCc)UT4]i<7kd55_)`RPoSudHe)u;#e7;fcV35.TC4/G$,P#?4<-9>-%10Bs7;Rp8"7@rR="gJh$V57u^HSn_X5rR,5;KSDu^VYJ2pR+iWGMf#n"Lb65#l6^9bDBDts6?Dm?;)A#,(<JV]8drM>cI@`2,@81%XD$G!_;>.KVcr=SDp4a8/R@=f0tKj\2p)-<V>V14,lg$apLK$5FKFjDqsj;/F*h<fG`?@cn![,^/g@E_`)9p*V'"Or6YeW#goroG%obaQB7_!]N&8K%CbsVV9.P`bTomgdFMk*b$!SJY?KH1ddGF:MsJ,k.h\X)Nrf1gbr"*,<CqA;NOLr*dnPC4(-J/.kTKM&eHK(3pg%VWB)0c&/[^qK-(qg=0SMi8qcR-Ikf5M%lg)7>^'(OV8jXR4`W)HSPJ3\Yu;D@*ZR7$B]XrWnqMIHYHNmb>5ABl,"\`T[JL+ALeP=%oTJQTOsu"ca3$*?[X\Jlg:-?1j_Y!QYqc_%@K2(5TU.W^@c3\kXU68LQ'Q#r[HnlbQ`n[LcIOJ!g`0p#GSDcOA%cIa2mR;.nB;do%$5`qII/tCC#IDId)a"t(N\K28*iE&H@MTML+>D\5M$W/dciG&,q.:,aDAD`0@s"NIBl0]:$C;MI<*uJe=Lmp2UDb1V,XBIiUp'l/%\ZU:W3OdIG._A2b.[>g9!JdR!+)k`pf,l3DY`K($^.7[qn+O-c$LKZi6h*pO-t[*CZq3/"8eW/1.$%q\I+lu"%0IqU'lZ<j)/m@W%Z5(Xe#%?h3eVRTDf06U$TYuGH"CdY'0Y0GVFdpB(gRb8J1",2BP>dK_[ou?f$jbo<@lmgLW(!VcANmCn]INAt0#39!NQ)8d42<HC%q=2;#Qk._qK8VTFb3C1;6J\n""c.jg)qraZT<0/503rE&?`t^e<iKiRLk6lf1Ie=DO<Ihb+MPW\,Uhu0jl+QcN8d9]g,VOfCbHc%%'26GhKKrCU(C8H(-J2_=2#_)R*_'JSi+26Ll._,1C<JKjXmP@nos[07e08_E\m2n>Z%=!H1mlgXI&F"J#T-5,M*\T\'@lfD:,h`,%kqsqT*e4'jRI1J[7U$><i:[D^le3iUlL)F>;Cdo#8:;>^YccSX!e_Z%a)lWkmg4(h*;6Ct.K+M(QM:#4a%WmcN%u^i.J`:D?[L#c%bZ+IN?2dQdC@MoFC?7n1F%">(?)5Y/(qEESY:>a#'?53FK^%5PLA=QcCB+<0a)gh%_Eg4^j//]uM<[\i%'(GBY4YErMAuot=]J)M%ht#"i8mQm@^=k"\ClU,0F2@]*HHbh=X1q]%T9B?kq@<IYNl`\E>i.u2q-@Y+fBVpJo$oAgH5ad=I1pbN@t*$4rO'67S9kuZP5Bk'%@.Y_nASKBs?X!P$(t.4Pn^0_L*`<QP;UUSJ_ma^n6^lmt$CJ)2!e[/A2<ilJWGmkr!dW7r[3hTTNA/M/Oo7)l5qE9C1lCkS7MnOJ%;sT&J"G.tXA9Aq>l!;%kp['S#W6g=A:q+;HqAniUp!LiK,)dI%P0p9DpWuK\C9<kSO52^>(Zl.+f<f#l`DPca5uQg.7c3s-F+ajc%I:3p(rB.6QF`Ia$[$<lcZI"_1Y)jlq@):XNO'm?>QpnZFlndgl#`#KJo/kb9"pWp`P[B%n8?Z43N/^k#TriG)as>s*V-GB-7^.n^%[,So_:(DDBLq\2Rm1miG<(4.3Np&!</`niAFfMu"K3a#oG7"m!Ir6">Un%tt(2Bu+bHJl@.K[FAP8AU99EVjamu5X3"d3qh"=ukR%RQ$oR@!<A?1Ys7=3g;@0.AoUlT$&T,3X7qP(28Ts=o,#l"HrP$OJRQiAe%E],jSKfB5692LEN?U.0W6$^'#9P.9@8t=WuK;WJFoT%187c6&Z74D2C=(dY/5Y7,@o$f1JE_Gk4u3bP<@)aBgJ;4>)DphlUMRmlbEd8>j+eAqVSXHQ).;MH'C]X_LQiEd+<l5lm<_<5oGgk%6*$?[+J,qB^C57&'Xh=7J<[LmKopOlIV;/%FfNKPAO"R>(rW#30rN%k_^dQN:Y6XUT4AP<63_jQO'J(+Z(UHD14o-(>sd8A8Y_fN%Y:OWsVCengP<Vb'Rf3_)8WA8C[Ru=+s&[C_b7ZEucV-c@4ClpXi3)4b^j$-X7DRu;buf(]Gu)"MkZi"HJeINo`*.jARFh[c]8KPJ%!(0t?k>9&S=DbA*\APAtMJe1TdQisbAYuo(3m;-^^I^?tD(N2hYQ[HhDKI(*&''@*BUN^#6AA`B-r$]a`?/5+-.cBXa603BdnVQ(%`.AdPnS!8pI="5VZfFX$AXXoV]+Y@#-J!Dp=RpN$%*^bK15QA+1$8gp%hImc^njhX)6Y3%#H_fe&/2F)k:'SsOuT32+9ip*:A5I3%FTd=-PDlt3GN%28@"PiB=rbAgZ+j^ZZjG]c:^1$FP,8:h>ci`#(`;dT0[Emn3u6BU;"UP\8>&9urR%.BAGcaUr!O@.H!c/!a!:)n%8%P<].=s"q@6iHp5u(>>dIdVISGkbUQ_g;=j`horQF.FuGG6+f>%bFi3SS';(h&@r,=pnJUL-DcOD#W9,W5ERU%i4W:3H2p:/-WK%%M6ID*<tU%l_(F*o-rl0I*!.;mg%;pi9c(a()inM^8tf*0NkI.\5M9.Jt0nid$Q]SmfIHg!;Hd.N)`CP;`J5UQ.tU1Ui3-n4+%rs%VmS"jqSj$-=uh0X!=[P)VGCd0.i@jiN,QncrXmB9^kGF]ir5O'@ufaHJg:.V_E^>p*"%,r*1?4)Of_+KE<JY`$;Yknk=OcN?k@?U%72N!Z#'#Eom:@nD=@BlbWfS#+9c9?sNNUuO'b50e^^qjg;05D[\i7+J(e0Vd72hIk%`:$jR&/sVIsV*)Q9g!tG8uXV"G$Z-Gu%X>%=!4OZRYhu3!?OZ>jIJd`ViUgiSZV`UJE^XKl\Uh_DENI]WH^t94%;%[7.;3"'[b7lGfMkiV!#n$>ii[B6!e1R&9eTqN4=Z8K%G2K%<5'Zf0QfUIi0nn2OW2h"W8u+,D/a]MY1KnP<\cM-_FcM)%MKgAf@D)RC4@qFcc1o7EWhH,Mm4:a*2,IE_Cpj21#_5B+D#m?@f\9E%f8/WskjUMofO8IFP;&:^1MI1f3NXp8Hj6_&9oDHalC]f@M_W&"M-8$@c8!<J*V#u<Qf\Pe?A5=?$P>QJjiJPUC9\.;VF<p"f)[$o%djDIT0]r`%(OeXkjG`7OFWV^BppT\]&!Ne?l;K]p#o:aEr<UEP7C0La+B_3_jjNK&&76hK/TWrT1VdV/0[PD^4c;T2X5qDH=aAgU%F#\beX2Ms_Z@ZfIN"iurcs^6:XrU\d$R#1NJTu(ha+Y*2'JOH9KYVg^W^KB/c0\Me+na^5Y"@3IP/t8?)+$=1!L;qC&7:)Un>Q/)%R].g7U<(+bNobh&OV-CA(A!qK0^1-[9eZheCt7NH,a?[c\QYRH?;>:$:q,\1#Z?7Q[E'HS98=CfRo[<5W!FM2*p;\LAKE#>aFH1.%2+7*9A5&CS6Il_4q';EqI(QRmY"#R6Aa6FkCV*2QqoT2-!<oI4i]'521$r$;=n`8kJjZ<nV_OA::7Fm'mNfCNR6Ohf8qk/8Br)ha%VSF?,mWUt4)(Ou-6AuE5Yj>$^oGA/_$eU:]/6TPW9:WCCZCNc!I5n9*0<u=,V.p>-b`8o1FrmUjKW\]K;/iXEj$,:C7C\SJ.tW4P%ML]LhLS0WY\4FeU\@i5(>@Ijki.tJC"A`pE%NV?%=WMj2Fds#*5ATe?P1_oY8ec3l"XJ_XB$%'DiXd<RP;a;man&Q$S*eH3&/uEY%H^%g_?#J,A1-_36)BpYg8Vt<Gg0VA+J<edD$?\#H[$R`cZgMShFAF/-240_3E.W)MfbW6cA-H\.?cl7?Q'nEn=RG`s'LWD>'O!dR%NSD\<gJ2)4*g#WJr3SZ/A05K/fXAIM,tT.`kD:O>[\PrE/hNIkd+aE+!64s`kOsFH"O^G1CV=%gkL&b*T&e?#B9i_'*5OTj0c9Ko%9[K)pr?I]dPQY9(JaFf#Q1?&NW`G9#`?bF*_aIY!Ou5*+C0?)i>_t:4)-(op<C#lQ(G?FZ%<sYkCGe@NQeEiY2][Y@^N#F:OU.9]%HBPGud6JPjgitTa'$)U@Q%o1%a1T8c8]ER:A'R2KOof0Q[KE!1!75sY\M"+cT.LEa]d4%tAWh8!<-gqdAqrZ/kW5Mf4'bWQ.0__g%WG6lEr>ON6=D)(&)\BHldUg$]ThZ:d"UBV_X\1h<'tVcE*j@]L3Q==D<([e#:Q='hK'D!8__c%KLFUOV15:qe[I/(emir7s..mP(%dm[G-"i<m0V^PL"&^6'Cg3=I?nMr4+BQa.kAjk(!Br69TBHrOYX^#`E#k3&"DDs<k+dO.bVt+@/5j"LcFEqY^*"@6@'spEPK8qIt%>YNE<_">_oA(PRF./qTK1CI4aX^,XIMZ.iqM2Pl,!i8<ih%BAee.s/9IF<@a)O8A8il:_g(KkW<_4_b:B!PF[M%1!/1Ef_Jhp:g&%L377=*ZtY6Ie^6'nhE,`*YF@a@<uqRHNN;fI^2Lk5Ft,"5.Ss*CJ7oX"q-,E]#&4b"q<eA+;c5g\Vo>M8'SG]#_V;o,_\A"o18-g%fp4-oU_]PS,>>ZW=[5uE+Z&jIRC-$46K=pSBtg%J.E*,L)Xlp'g#oXNP7ktm"slHA^_km.!S?\b;VJKB8.o6_0mea3DWlmZYq-uZ%1/BNddIAAnbA%$66Z:cq3Pj*toYE&!;QAe!Et0n?U/+V6X&(*`<5fGCe/%'ABq4<o3em/Tk/VoRj4^51S.e6@.W$tG1H[#O_F*_p%1P%)<Bu*BXYSk:/!e*kU"U3hA.Kc++f"tS:OBOFWbWomLdiL.R\%E,W+!mVm"a=7$"mH&EX:.[4dhcRNhl8$3`/(,+6a_(u9EJ!T%C-5K]JECQPNS#'\WR[uf,tI"39?/;=SKQA-?F$!%Eup]J#(_.7,RA17+8Kp=M'[5LDUfYU)0Q&74L_h)k>>1WiE+[PTS/+-fgPN`%E-i=/o!E`u6uPB(3"3,i07kL!6Lc?r=l^m)4.H_.+`6TI11F(Ujd*FuI=r=1KhtrM]l9-A[M2e:rJG9VQ#k(>q3+Li;(Ba:>sP^E%aYIPUOpJW"$)kL!Sn'@&hFm3^7_lSfp-d44OGIa+.Kn6<M)+t\J]Yua.a/fm4[rreGXLeYQ*(Hd/Q`10SkCsT[,sqRfd%B_9$OZr%29XLEVGa9YC&p1.!+!>C/ik4Ln/m5!L:5HDgq;hV8gt9C,iTEg-_SYE8/L#.*<tAsQI]"0/$rOsS>6>ni`BYcP3aG>h6&?h.:&"$%?7[-Q?IH<,j2C\!S[GQrR5&faD3V,@&6@$90WE46,nlS9bOh_`P/KXb2*E/$Xg%V)Cc?L(Jm:eZj4ob3qWtH/.fk#LidPA`J<'mY%Z-&jG7!jTGGTAgWg3n[-jmY=.2<N9uK\T.A]ho=Egc*4ifSf%L"6,i)I\e^FHDJPC?4abGLR+S;Ttajm+,8:jC54f>(qf;TZ!n=S%;n:8LLuNFd'=9V?@ZQPbW&4%"0JF.3JQEQthprAJ>^`EWDH3]hYoggW[es;K_76aCNZ6j'V"AAi,OH6l>o/Hu]n+!N?5%Qb>Ms7/%U]^td*saQk_;m]+fj&t_?L)6-1-3M$KcXq+TG,3oBrpCV>p;P\2*n_/-u:BHM;eQPJ9sh"/-Xknr#pMChR%WUM2`I?0$h(J=9SU7%n2]'O#9lglofe6Ee+l&A[Z4ac59t5&,H8AqlId=kH8"fBC(Ul<oO!lHUHM)F$)tZX17,p$7k8)3.72(B.mdmS(,eQ<<%U.mKE-2_%BK=8g5P6DZT3t'mk74rI:iNkO8id9>#\91FZknCJ*gY>WdP@F-?T1\P'_-u-XKa/aIt1X7Diqmg<hF@(";h98-r8U=?_K9gX3k16%G=^:G*>df]_ptn9bKYJZ'ltVb\E35hUtBJbD8].D>,>M&Qke?EU^e\.#'qq#@bh3A$`EC.p];U<Q^:Ylr[W4GhER<c:haRI0SC7M%U-9b1c<g6H7%16t"KTJ%>+JTnq=V>LEQ>W0mqM_n[2M'pimXu$P!&I?KR$0c/>#10Q;-$d.uEA>OF@)3a69*`*kfrVU*]Ye,_n,W%1:8Lp+B=>a7m79=LKO`Q0P:LOJiA=7$_(qJNM5RKd_727oi:A)E?Or'@]"]!XXqpp0>bkmZK>kekA-Sf?9]!Q8Bp,S&`MF,^B0n)%=bO*a9d$[?E=W6ZOT-WlHWjEr$SYuH>4$UBn9tN-Qh$/.@,OqBr<'eU5V>m$KTL]<65b^hGQE^'WgI[tP"S,Z^/ipMog>YX.tFil%,me=Qb^l=*ag6uJTY1C4_us9'BhkD`pGVte,U8l9s0Nb'hFg\aP$K_i>438%Ga^o,;HAjB^SBb<1@Al%]m&)@7lVT!JE^&DhihA`%l%]r-ST:hc&ho_@Y>W5+!'=>Zi5p75!E`Q_:YfuV(VN<A,BfG\j_u7)S>(HhJU6t<)N31&batNI?H670%0"#qm,r'I*%'=,Y,t&.%k8ORnr]F^9V\XWQF,i!`38n(t9[m*<ZjqB(<j4^Q&+`L?E+@J?9]mD7G>RS(CdQT251(J+Y+u<!-&L:H(dE3,*.<.HKU+:M.N;T*%B]'l,q\9Vpb0-&Bj<4)^kg3;Ia4NM/c;BW/g1#K*'sg,^nLNbBIKU<D7mXd8jaN1NaZDurPK8V!m+U8W8+GnR.`RX8]NZ%#JY7Lk%o(2&WFHT.=kilPion!$B7U1uFQ9Ek^7mf]-*"=TmEtjE3:0T$P4ZV[R`WPq"H#r[?k9r$_aCA1FVnb;"%/=Ek@8_Jp(X>mLgM6O5%=d'$`cI!3N3CcH\Kl[qkWSk/.<aVnOD"8J[,]?oDT6H=t1X$hRU\,/q=%I$*VesPQ`F$2H!C4fXd)aGEHP@;FUdJj?9BR@-"=S+G%ak4-oH+SXU<cqp@qNQ.-:td\l=n.T[5j#XX??"cK`:(f)+Hj#C:=qWd0l%Yc[V==")Xea/'jR[H,D$<;!o9k!Dipm"GE7''GE2rq%c99<DSVU$F<<$t+;;OrV;,38p.*iEpH^)R@><\98;-^\&H*8?,6N/k3O7G'T!Y*%\m_[76)BbQ"1rNYo7tFbq(m96t-D(dAEjS?c%c99=VOt_T(ds^%25Tj-m49"<rUEV?^bL0Jq0<B(&#]pjZ'7C0)i^Q!G\49+sJ:`!@PqM?8FY:3)j'835O*D``Xn(pH9[M@@r,T%_%36h%+`jm"?[Z4aclSBCT&PUQ;>Dj_n^cgt^;9<L@p0?JeZ#']7TOl*iN<6]FS?LnsO[DGuW5?eJpQm-1MG''2Q)rBT6Ms..lFr<W%hkW(F+Z@CBZ#)g=GW[nDM,ed5*>*+KM26$-?F4*Go\*6lU:6SY_rQFki!/F#)<o/QaA(P(RSp_35_:T\HMhaYKo(%kH]52I]Xk`O%_p;EKoOj6t,"#rdH(aEAA2I!$0?@=^l9<'Yi+^ee.Ggj.-`2s:/F5`kY,sL97lAg`SP;Ts/)h[2^52kV4&7%s+b_7(&'DqBB%G'n%cnB1s1$*_YiGAm0"f6RC?(?CtnO%VK'kH.;osu!p4fE%f1@>Kq\C%p,A/#3GV!"\n&b`1#b+#FrHlp]Bp1GqNO6fZK-[tD.6@b^r%"tfp,XVoMVp(GI@UmG;74T:Ff\j_+i4D?%#F%\a5L`Gqp0+pAk(ph7f8giL.#e4\l%o,hX*%spV?=rPZQ`o8Co\J?\5+V\<p?Kg[%O*>g*J,&QmoIodac2HJQ%mSqL9n*)&:CiN$f['Bc&qBZ@_l*5fkP$nWhg]l@s8&Xo/*:pLnS179p%@Rarpq4F+[(/[q:St#cecP6%ln(oWhST3W/^uFiJa_9as+,pUB-5:eKe8C^s3a30k<Fjg9BF8[1T]b(S`rd9bWdnbk8+Hh94bsuXRE?!r:':-j/5,V^]!g(iPWq#%0@]9F+23?_JH*>Q$]k).=0GuG]"S(<rnE3(2h6?O?[hMI)*t'LPel3):G9Jr]/cLtHM)GE]tOI1iUPC]ou#)tIf+HepAMV<IZcpq%$hCV837$Hknah8&c/!m8hiQrJ]ho=<]nTiXI/<JS07S]Jpn81#\ShFB9A_o1,_,A4qS+pOhn6[Ln`oN6_d>V*ps%&:GE77Oj40&(%s*jS-m^pN/pZK0/X*5Y(ro`]koAKd`jmFMmc0='Eh+(Y5]@4g855[)5L&T$K04+S<hqhW:+#`ne+9~>%AI9_PrivateDataEnd